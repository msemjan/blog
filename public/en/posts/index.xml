<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Marek&#39;s Blog (ᵔ◡ᵔ)	</title>
		<link>http://localhost:1313/blog/en/posts/</link>
		<description>Recent content in Posts on Marek&#39;s Blog (ᵔ◡ᵔ)	</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en</language>
		<lastBuildDate>Sun, 05 May 2024 16:01:14 +0200</lastBuildDate>
		<atom:link href="http://localhost:1313/blog/en/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Create Project Templates With Cookiecutter</title>
			<link>http://localhost:1313/blog/en/posts/create-project-templates-with-cookiecutter/</link>
			<pubDate>Sun, 05 May 2024 16:01:14 +0200</pubDate>
			
			<guid>http://localhost:1313/blog/en/posts/create-project-templates-with-cookiecutter/</guid>
			<description><![CDATA[%!s(<nil>)]]></description>
			<content type="html"><![CDATA[<h2 id="what-is-cookiecutter-and-why-you-should-use-it">What Is Cookiecutter And Why You Should Use It?</h2>
<p><a href="https://cookiecutter.readthedocs.io/en/stable/index.html">Cookiecutter</a> is a cross-platform CLI application that creates projects from project templates. It is ideal for people who tend to create the same project structure repeatedly and want to save some time. Cookiecutter is not dedicated to a specific programming language (or programming projects in general) and can create a given project structure for any programming, machine learning or any other text-based project.</p>
<p>Cookiecutter also allows you to use one of the templates created by community (just <a href="https://github.com/search?q=cookiecutter&type=repositories">search for Cookiecutter on Github</a> and pick one you like). In this post I will show how to get started (both with using existing templates and writing your own).</p>
<h2 id="installation">Installation</h2>
<p>Using <code>pipx</code> is recommended, but you can also install it with <code>pip</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>pipx install cookiecutter
</span></span><span style="display:flex;"><span><span style="color:#75715e"># or</span>
</span></span><span style="display:flex;"><span>python -m pip install --user cookiecutter
</span></span></code></pre></div><p>When you are done with installation, you can verify that it works using <code>cookiecutter --version</code> command.</p>
<h2 id="using-an-existing-template">Using An Existing Template</h2>
<p>In order to generate a new project, you can use a template that is on your disk, but it works with Git too!</p>
<p>To generating code with a local folder use the following command (you may need to clone some template if you want to follow along, but we will create a new one later):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cookiecutter path/to/cookiecutter/template
</span></span></code></pre></div><p>The application will prompt you for any inputs that the template requires. Cookiecutter will generate the project based on the values you&rsquo;ve entered or use the defaults. You may modify the default values by modifying the template&rsquo;s <code>cookiecutter.json</code>, if necessary.</p>
<p>If you want to use a Git repository instead of a local folder, use an URL instead of path to folder:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cookiecutter https://github.com/john-doe/example-template.git
</span></span></code></pre></div><p>And if you want a specific branch, you can add <code>--checkout &lt;branch&gt;</code>, e.g. for <code>develop</code> branch:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cookiecutter https://github.com/john-doe/example-template.git --checkout develop
</span></span></code></pre></div><p>In addition to local files and Git repositories, you can also use templates in ZIP files, templates on private servers, and even Mercurial repositories.</p>
<h2 id="writing-your-first-project-template">Writing Your First Project Template</h2>
<p>We will create a folder structure that looks something like this:</p>
<pre tabindex="0"><code>.
├── cookiecutter.json
├── {{ cookiecutter.project_slug }}
│   ├── Dockerfile
│   ├── LICENSE
│   ├── Makefile
│   ├── README.md
│   ├── src
│   │   └── ...
│   └────── ...
├── LICENSE
└── README.md
</code></pre><p>The first strange thing you will probably notice is this strange file called <code>{{ cookiecutter.project_slug }}</code>. Cookiecutter uses <a href="https://jinja.palletsprojects.com/">Jinja2 templating engine</a>, which is also used in other projects (such as Ansible, SaltStack, and Flask). Basically, Jinja2 will try to substitute everything that is between two curly braces with values of the corresponding variables. The values in the object <code>cookiecutter</code> are specified in the <code>cookiecutter.json</code>.</p>
<p>When creating a Cookiecutter template, you can add new fields to <code>cookiecutter.json</code> (as long as it is a valid JSON, it&rsquo;s fine) and then use the variables inside the template. Usually there is a <code>project_slug</code> that will then be rendered as a root folder of the generated project. You can also call Python functions to create new fields. Example <code>cookiecutter.json</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;email&#34;</span>: <span style="color:#e6db74">&#34;john.doe@example.com&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;project_name&#34;</span>: <span style="color:#e6db74">&#34;My Amazing Project&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;project_slug&#34;</span>: <span style="color:#e6db74">&#34;{{ cookiecutter.project_name.lower().replace(&#39; &#39;, &#39;-&#39;) }}&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;short_description&#34;</span>: <span style="color:#e6db74">&#34;This is my amazing project&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>As you can see, we are transforming the <code>project_name</code> to create the default value of the <code>project_slug</code> (we are transforming the text to lower case and replacing any spaces with dashes). The values inside <code>cookiecutter.json</code> then can be used in any file inside the <code>{{ cookiecutter.project_slug }}</code> folder (including in the file names, though you may run into issues with some special characters). Several variable types are supported by Jinja2 (and therefore by Cookiecutter): numbers, strings, dictionaries, arrays (the arrays are used for options from which a user can select).</p>
<p>These values then can be used in files we add into our template. For example we can create a <code>README.md</code> file with the following content:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-markdown" data-lang="markdown"><span style="display:flex;"><span># {{ cookiecutter.project_name }}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>{{ cookiecutter.short_description }}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">## Report issues
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>If you find any issue, don&#39;t hesitate and send me an email at {{ coookiecutter.email }}.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">## Contributing
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>We are open to contributions!
</span></span></code></pre></div><p>In my practice project I&rsquo;ve added a couple more files, including a couple files for a simple server into <code>{{ cookiecutter.project_slug }}/src/</code>. In the <code>main.go</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;net/http&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">HandleFunc</span>(<span style="color:#e6db74">&#34;/index&#34;</span>, <span style="color:#a6e22e">IndexHandler</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ListenAndServe</span>(<span style="color:#e6db74">&#34;:8080&#34;</span>, <span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In the <code>handler.go</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;log&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;net/http&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">IndexHandler</span>(<span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;/index endpoint was hit&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Fprintf</span>(<span style="color:#a6e22e">w</span>, <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(<span style="color:#e6db74">&#34;Hello %s&#34;</span>, <span style="color:#e6db74">&#34;{{ cookiecutter.author }}&#34;</span>))
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>And a relevant test in <code>handler_test.go</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;net/http&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;net/http/httptest&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;testing&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">TestIndexHandler</span>(<span style="color:#a6e22e">t</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">testing</span>.<span style="color:#a6e22e">T</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">NewRequest</span>(<span style="color:#e6db74">&#34;GET&#34;</span>, <span style="color:#e6db74">&#34;/index&#34;</span>, <span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">rr</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">httptest</span>.<span style="color:#a6e22e">NewRecorder</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">handler</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">HandlerFunc</span>(<span style="color:#a6e22e">IndexHandler</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">handler</span>.<span style="color:#a6e22e">ServeHTTP</span>(<span style="color:#a6e22e">rr</span>, <span style="color:#a6e22e">req</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">status</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">rr</span>.<span style="color:#a6e22e">Code</span>; <span style="color:#a6e22e">status</span> <span style="color:#f92672">!=</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusOK</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Errorf</span>(<span style="color:#e6db74">&#34;handler returned wrong status code: got %v want %v&#34;</span>,
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">status</span>, <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusOK</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">expected</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(<span style="color:#e6db74">&#34;Hello %s&#34;</span>, <span style="color:#e6db74">&#34;{{ cookiecutter.author }}&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">rr</span>.<span style="color:#a6e22e">Body</span>.<span style="color:#a6e22e">String</span>() <span style="color:#f92672">!=</span> <span style="color:#a6e22e">expected</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Errorf</span>(<span style="color:#e6db74">&#34;handler returned unexpected body: got %v want %v&#34;</span>,
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">rr</span>.<span style="color:#a6e22e">Body</span>.<span style="color:#a6e22e">String</span>(), <span style="color:#a6e22e">expected</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Arguably, such code would not be very useful in a template, but you could replace <code>IndexHandler</code> with a more useful health check that would work similarly, and it is enough for demonstration purposes. Of course, you can and probably should write something more useful. As said before, we can use Cookiecutter variables inside the code. Once we generate the project, <code>{{ cookiecutter.author }}</code> will be replaced with an actual value. This may be useful if you want to create functions or variables that have some prefix, e.g.:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> {{ <span style="color:#a6e22e">cookiecutter</span>.<span style="color:#a6e22e">endpoint</span> }}<span style="color:#a6e22e">Handler</span>(<span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// implementation that uses cookiecutter.endpoint
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p>If we specified <code>cookiecutter.endpoint</code> as <code>Post</code>, Cookiecutter would generate <code>PostHandler()</code> function. One of the CLI options, that Cookiecutter has, is <code>--skip-if-file-exists</code>, so you probably (I haven&rsquo;t tested it) could run Cookiecutter repeatedly with the same <code>project_slug</code>, but different <code>endpoint</code> to generate code for several different objects that the API can return, and than tweak the implementations and add correct business logic. Since you can call Python functions, you can capitalize or transform to lower/upper case based on your needs.</p>
<p>Another feature is that the variables in the <code>cookiecutter.json</code> can be defined as private by prepending an underscore to the variable. The user will not be required to fill the values of private variables. Furthermore the user does not need to see these variables and they will not be rendered. If we user should see the value for some reason, we can prepend a double underscore to show the value. Non-render private variables can be useful for defining constants, or when you want to enforce any naming conventions, e.g. to use the same name for both the project and the package name.</p>
<p>Text can be rendered conditionally using the <code>if</code> statement:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-markdown" data-lang="markdown"><span style="display:flex;"><span>{%- if cookiecutter.should_print -%}
</span></span><span style="display:flex;"><span>This will be printed if should_print is true.
</span></span><span style="display:flex;"><span>{%- else -%}
</span></span><span style="display:flex;"><span>This will be printed if should_print is false.
</span></span><span style="display:flex;"><span>{% endif %}
</span></span></code></pre></div><p>The variable <code>should_print</code> can be a boolean in the <code>cookiecutter.json</code> or a result of some condition. We can also write the condition inside the Jinja2 template.</p>
<p>Once you create all the variables and files that you would like in your template, you can generate a new project using <code>cookiecutter path/to/your/template</code>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>In this blog post I&rsquo;ve introduced the basics of Cookiecutter. An example Cookiecutter project, that was based on this post, can be found <a href="https://github.com/msemjan/cookiecutter-example">on my Github</a> (it is a simple Go Hello World project). Many other examples can be found on Github and used as an inspiration for your new templates. I think that Cookiecutter is an interesting and useful tool that will simplify the start of new projects (especially the ones that require more setup and a lot of boilerplate code). There are some advanced features which were not covered by this article (e.g. hooks, user config, calling Cookiecutter functions from Python, injecting extra context, or template extensions), which allow the template creators to build more complex templates. However, the basics described above are more than enough to get started and write templates for majority of projects.</p>
]]></content>
		</item>
		
		<item>
			<title>My Experience With JSNAD</title>
			<link>http://localhost:1313/blog/en/posts/my-experience-with-jsnad/</link>
			<pubDate>Sat, 13 Apr 2024 09:55:35 +0200</pubDate>
			
			<guid>http://localhost:1313/blog/en/posts/my-experience-with-jsnad/</guid>
			<description><![CDATA[%!s(<nil>)]]></description>
			<content type="html"><![CDATA[<h2 id="what-is-openjs-nodejs-application-developer-jsnad">What Is OpenJS Node.js Application Developer (JSNAD)?</h2>
<p><a href="https://training.linuxfoundation.org/certification/jsnad/">JSNAD</a> is a certification offered by <a href="https://www.linuxfoundation.org/">Linux Foundation</a> that verifies candidate&rsquo;s skill in using <a href="https://nodejs.org/en">Node.js</a> to build applications of any kind. Unlike many other certifications, this is not a quiz in which you pick a correct answer from a given list of options. It is a practical exam in which you connect to a remote computer and write real code to solve various programming problems. The company I work for bought a voucher for me, so I had an opportunity to take the exam.</p>
<p>In this post I will share what the exam entails, I will give the general information about the certification exam, I will share my experience with JSNAD, as well as provide my recommendations for anyone who would like to obtain this certification. Unfortunately, I am not allowed to disclose any of the questions I got at the exam, since Linux Foundation terms and services<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> forbid me to do so.</p>
<h2 id="specifics-of-the-exam">Specifics of The Exam</h2>
<p>As mentioned above, the exam consists of several programming tasks that you need to complete. In total there are 25 questions. To pass, you need a score of at least 68%. The exam-taker has two hours to complete the exam.</p>
<p>At the time of writing of this blog post, the Linux Foundation has listed these key competencies and domains which a candidate for the JSNAD certification must know<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>:</p>
<ul>
<li><strong>Buffer and Streams</strong> (11%)
<ul>
<li>Node.js Buffer API’s</li>
<li>Incremental Processing</li>
<li>Transforming Data</li>
<li>Connecting Streams</li>
</ul>
</li>
<li><strong>Control flow</strong> (12%)
<ul>
<li>Managing asynchronous operations</li>
<li>Control flow abstractions</li>
</ul>
</li>
<li><strong>Child Processes</strong> (8%)
<ul>
<li>Spawning or Executing child processes</li>
<li>Child process configuration</li>
</ul>
</li>
<li><strong>Diagnostics</strong> (6%)
<ul>
<li>Debugging Node.js</li>
<li>Basic performance analysis</li>
</ul>
</li>
<li><strong>Error Handling</strong> (8%)
<ul>
<li>Common patterns</li>
<li>Handling errors in various scenarios</li>
</ul>
</li>
<li><strong>Node.js CLI</strong> (4%)
<ul>
<li>Node executable command line flags</li>
</ul>
</li>
<li><strong>Events</strong> (11%)
<ul>
<li>The event system</li>
<li>Building event emitters</li>
<li>Consuming event emitters</li>
</ul>
</li>
<li><strong>File System</strong> (8%)
<ul>
<li>Input/output</li>
<li>Watching</li>
</ul>
</li>
<li><strong>JavaScript Prerequisites</strong> (7%)
<ul>
<li>Language fundamentals</li>
<li>Scoped to core language features introduced since EcmaScript 1 and still heavily used today</li>
</ul>
</li>
<li><strong>Module system</strong> (7%)
<ul>
<li>CommonJS Module System only</li>
</ul>
</li>
<li><strong>Process/Operating System</strong> (6%)
<ul>
<li>Controlling the process</li>
<li>Getting system data</li>
</ul>
</li>
<li><strong>Package.json</strong> (6%)
<ul>
<li>Package configuration</li>
<li>Dependency management</li>
</ul>
</li>
<li><strong>Unit Testing</strong> (6%)
<ul>
<li>Using assertions</li>
<li>Testing synchronous code</li>
<li>Testing asynchronous code</li>
</ul>
</li>
</ul>
<p>This list may change in the future, since the exam targets the latest LTS version of Node.js. As the current Long Term Support version changes the environment will be updated to the latest LTS. See <a href="https://github.com/nodejs/Release">https://github.com/nodejs/Release</a> for information on the Node.js LTS schedule. You will have two hours to complete the exam, which consists of 25 questions from the list.</p>
<h2 id="the-exam">The Exam</h2>
<p>The exam is proctored. There are several requirements for both <a href="https://docs.linuxfoundation.org/tc-docs/certification/instructions-openjs#system-requirements-to-take-the-exam">your computer</a> and <a href="https://docs.linuxfoundation.org/tc-docs/certification/faq-openjs#what-are-the-testing-environment-requirements-to-take-the-exam">the place where yoy will take the exam</a>. For example, you are allowed to have only one monitor, and smartphones, headsets, or smartwatches are <strong>not allowed</strong>.</p>
<p>Before you are allowed to take the exam and write your answers, you will go through a check-in process, in which you will take a photo of your ID card and a selfie, then the proctor will verify your identity and inspect your room and your workplace to make sure that they both satisfy all the criteria given by the Linux Foundation.</p>
<p>Then will be connected to a remote virtual machine running Ubuntu with Gnome Desktop environment. The candidate can use anything installed on the workstation (docs, man-pages, etc), and several text editors are provided, including Vim, VS Code, and WebStorm.</p>
<p>You will also have access to <a href="https://docs.linuxfoundation.org/tc-docs/certification/certification-resources-allowed#openjs-node.js-application-developer-jsnad-and-openjs-node.js-services-developer-jsnsd">several online resources</a>, including Node.js documentation, Mozilla Javascript documentation, NPM website, etc. However, even if you have access to these resources, you should prepare appropriately since there will not be much time to search for everything. Moreover, you should be familiar with documentation so you know where to look for the information that you might need. You will have approximately 5 minutes per question and that is not a lot of time.</p>
<h2 id="my-recommendation-of-study-materials-and-experience">My Recommendation of Study Materials and Experience</h2>
<p>I have only two websites to recommend:</p>
<ul>
<li><a href="https://www.nodecertification.com/">Node.js Certification Study Guide by Hey Node</a></li>
<li><a href="https://nodejs.org/docs/latest/api/">Index | Node.js v21.7.3 Documentation</a></li>
</ul>
<p>The Linux Foundation also offers a self-paced course <a href="https://training.linuxfoundation.org/training/nodejs-application-development-lfw211/">The Node.js Application Development</a>, which is allegedly pretty good and should prepare your for the exam, but I can neither confirm, nor deny this information.</p>
<p>I only used the guide by Hey Node to learn the basics. It is good idea to register on this website. It is for free, and you will gain an access to all of their guides. A <a href="https://10minutemail.com/">temporary 10 Minute Mail</a> can be used to avoid any potential spam. I went through all of the topics on the list by the Linux Foundation and tried the examples, as well as tried to come up with my own. Some of the topics were not as detailed, so I also looked at the Node.js documentation. I highly recommend that you do the same and study each of the modules in more detail. Also take a look at <a href="https://nodejs.org/docs/latest/api/globals.html">Globals</a>, <a href="https://nodejs.org/docs/latest/api/path.html">Path</a>, and <a href="https://nodejs.org/docs/latest/api/util.html">Util</a> modules.</p>
<p>When I requested a voucher for this exam, I was already professionally working with Node.js for one year and writing production-ready code even though I did not consider (and I still do not) myself to be a Node.js expert. Our tech stack consisted of Node.js, AWS Lambdas, AWS RDS, AWS SNS, and Express. However, I was not using the built-in modules of Node.js standard library on daily basis. But at least I knew how to use promises, handler errors, and had general working knowledge of Javascript, and I was aware of several useful NPM packages, such as Jest and Axios.</p>
<p>I started studying for the exam in December 2024 and spent approximately one to two hours studying. I also took one week off to focus on the preparation. I scheduled the first exam for April 5th of 2024, and I managed to score 65%, which unfortunately was not enough to pass. For reference, you need to score 68% to pass the exam, so I was very close.</p>
<p>The questions I have got were relatively simple. In some questions, you will be provided with some code, and in others you will have to write everything yourself. You can read the questions in the browser, or directly in the text editor of your choice. Using the text editor is of course faster.</p>
<p>Speaking of the text editor, you should pick the one that you are familiar with. If you use something different than what is provided in the exam environment, install one of the editors that will be available and get familiar with it. Also, you should be familiar with shell, Node.js commands and CLI options, and NPM commands, and be able to quickly traverse through the folder structure and execute necessary commands, such as <code>npm install</code>. So practice that as well.</p>
<p>Unfortunately I had technical issues during the exam and got disconnected at the end. Moreover, during the exam I had an issue with my keyboard layout and had to use on-screen keyboard, which slowed me down. This happened because I am using a <code>SK (qwerty)</code> keyboard, which is fairly good for programming on Linux (unlike the Windows one, which is atrocious). However, ALT key did not work in the PSI Secure Browser, and I needed on-screen keyboard to write several special characters, such as <code>{</code>, <code>}</code>, <code>[</code>, <code>]</code>, <code>&lt;</code>, and <code>&gt;</code>. If you are also using some special keyboard layout, I highly recommend to install <code>US</code> keyboard just to be sure and to make the exam easier. I am not sure if this information was never provided in the material by Linux foundation, or if I just missed it, but I find it to be important detail.</p>
<p>The other issue I had was poor internet connection. I did not realize this until it was too late, because my system passed the <a href="https://syscheck.bridge.psiexams.com/">PSI Online Proctoring System Check</a> without any issues. Unfortunately, I did not manage to fix this by using wired connection either, and I failed my free-retake as well. The second time I manage to get into a loop of passing the check-in process, and then my camera froze, which resulted in a pop-up window that told me something along lines &ldquo;Your camera stopped working, the PSI Secure Browser will exit in 60 seconds&rdquo;. Even thought the camera started working, after I closed pop-up, the Secure Browser closed. I kept trying to connect, but ultimately I was unsuccessful.</p>
<p>Since I have other important things coming, I will not trying for the third time, despite having received a free retake from the Support team, since I do not have an option to take the exam somewhere with better internet, and  I suspect that trying it at home would result in the same outcome. All the people I have interacted with were polite and helpful, so if you have any issues, do not hesitate to contact them.</p>
<p>Securing stable and fast internet connection is the candidate&rsquo;s responsibility, so if you have slower internet at home, like me, consider taking the exam somewhere else. Ask friends, family, or take the exam at work (though, bring your own computer, because it is not recommended to use the company machine).</p>
<p>Regarding the exam questions, they were relatively easy and I did not have to stress so much as I did before the exam. The questions were only from the list mentioned above. Sometimes you were provided with some code to speed things up, other questions required you to write everything. Even though the questions were simple and you have two hours to complete the exam, it is not that much time. You can read the questions in the web browser, or directly in the text editor, which is faster.</p>
<h2 id="conclusion">Conclusion</h2>
<p>OpenJS Node.js Application Developer (JSNAD) is a Node.js certification offered by Linux Foundation. The exam content is interesting, and even tough I did not pass the exam, I gained useful knowledge and skills that I can use in both personal projects and work. Unlike many other certifications, JSNAD is obtained by displaying knowledge of Node.js standard library by writing code solving programming problems, not doing a quiz, which gives this certification more weight than some other certificates.</p>
<p>Even though I did not pass the exam and did not obtain the certification, I think I can recommend this certification. I learned a lot of interesting things, which I can use in future projects. Even if you are not interested in taking the exam, studying for JSNAD may be a useful way to learn more about Node.js and its built-in modules.</p>
<p>If I ever move somewhere with a faster and more stable internet connection, I will seriously consider trying to obtain this certification.</p>
<h2 id="sources">Sources</h2>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><em>Linux Foundation Global Certification and Confidentiality Agreement | T&amp;C DOCS (Candidate Facing Resources)</em>. (n.d.). <a href="https://docs.linuxfoundation.org/tc-docs/certification/lf-cert-agreement">https://docs.linuxfoundation.org/tc-docs/certification/lf-cert-agreement</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>The Linux Foundation. (2024, April 1). <em>JSNAD Exam | OpenJS Node.js Application Developer Exam</em>. Linux Foundation - Training. <a href="https://training.linuxfoundation.org/certification/jsnad/">https://training.linuxfoundation.org/certification/jsnad/</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content>
		</item>
		
		<item>
			<title>Introduction Into gRPC in Go</title>
			<link>http://localhost:1313/blog/en/posts/introduction-into-grpc-in-go/</link>
			<pubDate>Wed, 15 Nov 2023 18:35:15 +0100</pubDate>
			
			<guid>http://localhost:1313/blog/en/posts/introduction-into-grpc-in-go/</guid>
			<description><![CDATA[%!s(<nil>)]]></description>
			<content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>gRPC is a modern, cross-platform Remote Procedure Call (RPC) framework created by Google and released in 2016. It is considered to be an alternative to <a href="https://en.wikipedia.org/wiki/REST">REST</a> APIs, and can be used to connect various services. REST uses JSON, which is a plain-text format, while gRPC uses a <a href="../introduction-into-protocol-buffers-in-go">protocol buffers</a>. Protocol buffers are a binary format, which was designed to result in smaller serialized messages, which are simple to use and faster to encode and decode. This leads to a noticeable speedup when compared to REST and JSON.</p>
<p>Despite all the advantages, you should not immediately start rewriting all your REST services. Let&rsquo;s look at various advantages and disadvantages of gRPC.</p>
<h2 id="advantages-and-disadvantages">Advantages and disadvantages</h2>
<h3 id="advantages">Advantages</h3>
<p>The main benefit that gRPC promises is its speed. Because of a binary format is uses, it should be much faster to encode and decode messages. Moreover, the data that is sent over the network should be smaller, because protocol buffers are more efficient way of encoding data than JSON.</p>
<p>Unlike REST, which uses HTTP 1.1, gRPC is using HTTP/2, which allows for various new features, such as server-side streaming, client-side streaming, or bi-directional streaming.</p>
<h3 id="disadvantages">Disadvantages</h3>
<p>The biggest disadvantage of gRPC is that it is not supported by any of the modern browsers (all are using HTTP 1.1, no HTTP/2), and therefor it is either necessary to use something like <a href="https://grpc.io/docs/platforms/web/basics/">gRPC-web</a> that lets you access gRPC services built from browsers using an idiomatic API.</p>
<p>Other disadvantage is that protocol buffers are not human-readable and therefore it is more difficult to work with them. While a simple REST service can easily be tested with a simple request using <code>curl</code> or Postman, you will need an extra step transcode requests.</p>
<p>That being said, it is still an excellent choice for facilitating communication between various back-end services or when creating mobile apps.</p>
<h2 id="a-simple-example-in-go">A simple example in Go</h2>
<p>In this example, I&rsquo;ll create a simple gRPC server and a client in Go. The gRPC server will expose two endpoints to send new notifications and fetch the list of notifications.</p>
<h3 id="setup">Setup</h3>
<p>Let&rsquo;s start by creating a new directory for our project, and then running <code>go mod init</code> to create <code>go.mod</code> and <code>go.sum</code> files.</p>
<p>Before writing gRPC clients and servers, you need to have protocol buffer and gRPC code generator installed.</p>
<pre tabindex="0"><code>$ go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28
$ go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2
</code></pre><p>Also, don&rsquo;t forget to update your <code>PATH</code> so that your <code>protoc</code> compiler is able to find and use the plugins:</p>
<pre tabindex="0"><code>$ export PATH=&#34;$PATH:$(go env GOPATH)/bin&#34;
</code></pre><h3 id="protocol-buffers">Protocol buffers</h3>
<p>As mentioned above, gRPC uses <a href="../introduction-into-protocol-buffers-in-go">protocol buffers</a>. Before we start writing our Go server, we need to create a file that defines messages and available services. Let&rsquo;s create a folder <code>pb</code> and put in it a <code>message.proto</code> file with the following content:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-proto" data-lang="proto"><span style="display:flex;"><span>syntax <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;proto3&#34;</span>;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">option</span> go_package <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;./types&#34;</span>;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">// Type for notifications
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">message</span> <span style="color:#a6e22e">Notification</span>  {<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#66d9ef">string</span> title  <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#66d9ef">string</span> body   <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#66d9ef">string</span> from   <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#66d9ef">string</span> for    <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>}<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">// A list of notifications
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">message</span> <span style="color:#a6e22e">Notifications</span> {<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#66d9ef">repeated</span> Notification notifications <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>}<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">// A return type for sending notifications, the status should be non-zero,
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// if there is some issue
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">message</span> <span style="color:#a6e22e">ServerResponse</span> {<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#66d9ef">int32</span> status <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>}<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">// An empty type
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">message</span> <span style="color:#a6e22e">Empty</span> {}<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">// Define functions that a client can use
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">service</span> NotificationService {<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#66d9ef">rpc</span> SendNotification(Notification) <span style="color:#66d9ef">returns</span> (ServerResponse) {};<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#66d9ef">rpc</span> GetNotifications(Empty) <span style="color:#66d9ef">returns</span> (Notifications) {};<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>}<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>The first line tells us that we are using version 3 of protocol buffers syntax. The second line specifies Go package. I haven&rsquo;t seen it in some examples online, but without it the compiler generates an error and no Go code, so it is necessary. The <code>message Something {}</code> specifies what the messages look like, that is what fields we can expect and what are their types. The value after the equal sign specifies a unique field number and it specifies a field in the message wire format. In the <code>Notifications</code> message you can a <code>repeated</code> keyword, which specifies that <code>notifications</code> is an array with values of type <code>Notification</code>.</p>
<p>The messages are similar to Go&rsquo;s <code>struct</code>s. You can learn more about the syntax of protocol buffers in the <a href="https://protobuf.dev/programming-guides/proto3/">protocol buffers documentation</a>, including supported types, enumerations, nested types, and other details.</p>
<p>Lastly, we define a <code>service</code> that has two remote procedure calls (RPC) - <code>SendNofication</code> and <code>GetNotifications</code>. You can think of these as REST endpoints. As you can see, the definition of these functions includes types of arguments and the return type. Unfortunately, all functions require an argument, and there is no <code>void</code> type for functions that have no arguments, so I had to create an <code>Empty</code> message with no fields to represent <code>void</code>.</p>
<p>We will use <code>SendNofication</code> and <code>GetNotifications</code> to create new notifications and fetch the excising ones, respectively.</p>
<p>Now, we need to create a <code>types</code> folder for the generated Go code.</p>
<p>Once you&rsquo;ve created the <code>pb/message.pb</code> file and created a <code>types</code> folder, you can generate Go code using this command:</p>
<pre tabindex="0"><code>$ protoc --go_out=types --go_opt=paths=source_relative \
         --go-grpc_out=. --go-grpc_opt=paths=source_relative \
         pg/*.proto
</code></pre><p>If it was successful, you should see two new files in <code>types</code> folder: <code>message_grpc.pb.go</code> and <code>message.pb.go</code>. If you want to, you can check the generated code. It contains <code>struct</code>s that represent our protocol buffers messages and various functions necessary for marshaling an unmarshaling messages.</p>
<h3 id="server">Server</h3>
<p>Now we are ready to create a gRPC server. Create a <code>server.go</code> file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;log&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;net&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;github.com/msemjan/go-grpc/types&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;google.golang.org/grpc&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Create a TPC connection and listen on port 9000
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">lis</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">net</span>.<span style="color:#a6e22e">Listen</span>(<span style="color:#e6db74">&#34;tcp&#34;</span>, <span style="color:#e6db74">&#34;:9000&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatalf</span>(<span style="color:#e6db74">&#34;failed to listen: %v&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Create a gRPC server
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">grpcServer</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">grpc</span>.<span style="color:#a6e22e">NewServer</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Create a server that defines the SendNotification and GetNotifications
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#75715e">// functions
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">notificationServer</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">types</span>.<span style="color:#a6e22e">MyGRPCServer</span>{}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Register our service
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">types</span>.<span style="color:#a6e22e">RegisterNotificationServiceServer</span>(<span style="color:#a6e22e">grpcServer</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">notificationServer</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Start a server
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">grpcServer</span>.<span style="color:#a6e22e">Serve</span>(<span style="color:#a6e22e">lis</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatalf</span>(<span style="color:#e6db74">&#34;failed to serve: %s&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We also need to define <code>MyGRPCServer</code>. We will create a <code>types/service.go</code> file, and write the following code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">types</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;context&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;log&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Create our server
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">MyGRPCServer</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Without this, we will be getting an error
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">UnimplementedNotificationServiceServer</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Create fake notifications, this can also be empty. In real-world example,
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// this data would come from a database
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">notifications</span> = <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">Notifications</span>{
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">Notifications</span>: []<span style="color:#f92672">*</span><span style="color:#a6e22e">Notification</span>{
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">Notification</span>{
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">Title</span>: <span style="color:#e6db74">&#34;New message from &#39;Jerry&#39;&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">Body</span>: <span style="color:#e6db74">&#34;Hi, how are you doing?&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">From</span>: <span style="color:#e6db74">&#34;Messenger&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">For</span>: <span style="color:#e6db74">&#34;User&#34;</span>,
</span></span><span style="display:flex;"><span>      },
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">Notification</span>{
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">Title</span>: <span style="color:#e6db74">&#34;Low batter&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">Body</span>: <span style="color:#e6db74">&#34;Plug in charger as soon as possible&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">From</span>: <span style="color:#e6db74">&#34;System&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">For</span>: <span style="color:#e6db74">&#34;User&#34;</span>,
</span></span><span style="display:flex;"><span>      },
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">Notification</span>{
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">Title</span>: <span style="color:#e6db74">&#34;Alarm&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">Body</span>: <span style="color:#e6db74">&#34;Wake up!&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">From</span>: <span style="color:#e6db74">&#34;Alarm&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">For</span>: <span style="color:#e6db74">&#34;User&#34;</span>,
</span></span><span style="display:flex;"><span>      },
</span></span><span style="display:flex;"><span>	},
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">s</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">MyGRPCServer</span>) <span style="color:#a6e22e">SendNotification</span>(
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">ctx</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">notification</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Notification</span>,
</span></span><span style="display:flex;"><span>) (<span style="color:#f92672">*</span><span style="color:#a6e22e">ServerResponse</span>, <span style="color:#66d9ef">error</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// When the client sends a new notification, we log it, append it to the list
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#75715e">// of notifications, and send a status with code 0 for success. Since there
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#75715e">// probably shouldn&#39;t be any issue, we are not handling any errors. In
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#75715e">// real-world example, you probably would want to replace this with a database
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#75715e">// insert.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;New notification: %s&#34;</span>, <span style="color:#a6e22e">notification</span>.<span style="color:#a6e22e">String</span>())
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">notifications</span>.<span style="color:#a6e22e">Notifications</span> = append(<span style="color:#a6e22e">notifications</span>.<span style="color:#a6e22e">Notifications</span>, <span style="color:#a6e22e">notification</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">ServerResponse</span>{<span style="color:#a6e22e">Status</span>: <span style="color:#ae81ff">0</span>}, <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">s</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">MyGRPCServer</span>) <span style="color:#a6e22e">GetNotifications</span>(
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">ctx</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">_</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Empty</span>,
</span></span><span style="display:flex;"><span>) (<span style="color:#f92672">*</span><span style="color:#a6e22e">Notifications</span>, <span style="color:#66d9ef">error</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// If the user requests notifications, we log that there is a request, and
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#75715e">// then send all the notifications. Again, in a real-world there would be some
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#75715e">// kind of database search here instead of a slice.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;User is requesting notifications&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">notifications</span>, <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>These two files are enough to create a working gRPC server that allows you to send new notifications and fetch all the notifications. You can test that the code works with <code>go run server.go</code>.</p>
<h3 id="client">Client</h3>
<p>To test that our server works correctly, we can create a simple client in <code>client.go</code> file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">ctx</span> <span style="color:#e6db74">&#34;context&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;log&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;golang.org/x/net/context&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;google.golang.org/grpc&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;github.com/msemjan/go-grpc/types&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Create a gRPC connection for our client
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">conn</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">grpc</span>.<span style="color:#a6e22e">ClientConn</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Create a connection to our server on the port 9000
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">conn</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">grpc</span>.<span style="color:#a6e22e">Dial</span>(<span style="color:#e6db74">&#34;:9000&#34;</span>, <span style="color:#a6e22e">grpc</span>.<span style="color:#a6e22e">WithInsecure</span>())
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatalf</span>(<span style="color:#e6db74">&#34;Error while connecting to the server: %s\n&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">conn</span>.<span style="color:#a6e22e">Close</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Create a gRPC client
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">client</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">types</span>.<span style="color:#a6e22e">NewNotificationServiceClient</span>(<span style="color:#a6e22e">conn</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Use SendNotification remote procedure call. This should send a new
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#75715e">// notification to our server, and add it to the list of existing notifications.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">SendNotification</span>(
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>(),
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">types</span>.<span style="color:#a6e22e">Notification</span>{
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">Title</span>: <span style="color:#e6db74">&#34;Client notification&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">Body</span>: <span style="color:#e6db74">&#34;Hello from the client&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">From</span>: <span style="color:#e6db74">&#34;Client&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">For</span>: <span style="color:#e6db74">&#34;User&#34;</span>},
</span></span><span style="display:flex;"><span>      )
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatalf</span>(<span style="color:#e6db74">&#34;Error when calling SendNotification: %s\n&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// At this point, the notifications were sent and there was no error.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;Notification successfully sent\n&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Use GetNotification remote procedure call. This should return all the
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#75715e">// notifications from our server.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">notifications</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">GetNotifications</span>( <span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">Background</span>(),
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">types</span>.<span style="color:#a6e22e">Empty</span>{})
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatalf</span>(<span style="color:#e6db74">&#34;Error when calling GetNotifications: %s\n&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// If there is no error and we receive notifications, we print them out.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;Notifications received:&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">notification</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">notifications</span>.<span style="color:#a6e22e">Notifications</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;Title: &#39;%s&#39;, Body: &#39;%s&#39;, From: &#39;%s&#39;, For: &#39;%s&#39;\n&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">notification</span>.<span style="color:#a6e22e">Title</span>, <span style="color:#a6e22e">notification</span>.<span style="color:#a6e22e">Body</span>, <span style="color:#a6e22e">notification</span>.<span style="color:#a6e22e">From</span>, <span style="color:#a6e22e">notification</span>.<span style="color:#a6e22e">For</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now we are ready to test our application. Start server with <code>go run server</code> and then you can run the client with <code>go run client.go</code>. It will quickly send a new notification, fetch all the notifications, and print them out and, then it will exit. In the output you should see something along lines:</p>
<pre tabindex="0"><code>$ go run client.go
2023/11/19 16:46:37 Notification successfully sent

2023/11/19 16:46:37 Notifications received:
2023/11/19 16:46:37 Title: &#39;New message from &#39;Jerry&#39;&#39;, Body: &#39;Hi, how are you
  doing?&#39;, From: &#39;Messenger&#39;, For: &#39;User&#39;
2023/11/19 16:46:37 Title: &#39;Low batter&#39;, Body: &#39;Plug in charger as soon as
  possible&#39;, From: &#39;System&#39;, For: &#39;User&#39;
2023/11/19 16:46:37 Title: &#39;Alarm&#39;, Body: &#39;Wake up!&#39;, From: &#39;Alarm&#39;, For:
  &#39;User&#39;
2023/11/19 16:46:37 Title: &#39;Client notification&#39;, Body: &#39;Hello from the
  client&#39;, From: &#39;Client&#39;, For: &#39;User&#39;
</code></pre><h2 id="conclusions">Conclusions</h2>
<p>gRPC is a faster and more efficient alternative to REST APIs that uses protocol buffers as an encoding format. It allows programmers to specify remote procedure calls (RPC) and specific format of the data that these RPC endpoints use. gRPC supports several popular languages, which means that you can have various services written in different programming languages communicate using this technology. It is mostly used on the back-end to send information between various microservices.</p>
<p>In this post I&rsquo;ve discussed advantages and disadvantages of gRPC and provided an example of a simple gRPC server and a client. You can find the full example on my <a href="https://github.com/msemjan/go-grpc">Github</a>.</p>
]]></content>
		</item>
		
		<item>
			<title>Getting Started With Latex</title>
			<link>http://localhost:1313/blog/en/posts/getting-started-with-latex/</link>
			<pubDate>Sun, 01 Oct 2023 17:29:22 +0200</pubDate>
			
			<guid>http://localhost:1313/blog/en/posts/getting-started-with-latex/</guid>
			<description><![CDATA[%!s(<nil>)]]></description>
			<content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Latex is a typesetting software based on Tex created by Donald Knuth, who was dissatisfied with a quality of his paper. Using Latex is a little bit like programming your documents. Instead of clicking buttons to add styling, like one would do when writing in Microsoft Word, in Latex you use commands to change the appearance of the text. Moreover, you don&rsquo;t need to worry about the aesthetic of your document, since it can easily be changed later, and instead you can focus on the text itself.</p>
<p>Latex is especially useful, if you need to write academic texts that include many equations, citations, and numbered figures, since Latex makes it very easy to work with these.</p>
<p>Once you finished writing a Latex document, you can compile it into PDF or DVI formats.</p>
<h2 id="installing-latex">Installing Latex</h2>
<p>Probably the easiest way to install Latex is to use <a href="https://miktex.org/">Miktex</a> distribution. Just follow the instructions on the install page. If you are using Linux, it&rsquo;s probably easier to install Latex using your native package manager. For example, in Arch-based distributions, you can install <code>texlive-latex</code> package.</p>
<h2 id="minimal-working-example">Minimal working example</h2>
<p>The simplest document you can create you create a file <code>example.tex</code> with the following content:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-latex" data-lang="latex"><span style="display:flex;"><span><span style="color:#66d9ef">\documentclass</span>{article}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">\begin</span>{document}
</span></span><span style="display:flex;"><span>  Your content goes here.
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">\end</span>{document}
</span></span></code></pre></div><p>The first line in the example (<code>\documentclass{article}</code>) specifies that we want an <code>article</code> document class. There are several options you can use:</p>
<ul>
<li><code>article</code> - Great for scientific papers, short reports, program documentations, and any other shorter document that does not require a complex division into chapters and smaller parts.</li>
<li><code>report</code> - For longer documents that have several chapters. Can also be used for shorter books and thesis.</li>
<li><code>book</code> - Used for typesetting real books that require features such as chapters and parts, two kinds of pages, a front matter, etc.</li>
<li><code>slides</code> - This allows you to create presentations, although, most people prefer to use <a href="https://ctan.org/pkg/beamer?lang=en"><code>beamer</code></a> package for this purpose.</li>
<li><code>letter</code> - This is for writing letters.</li>
</ul>
<p>Some packages may add different classes, but for now we will stick to <code>article</code>. You can try all these options, if you want to see what they do. Here is a <a href="https://ctan.org/topic/class">comprehensive list of document classes</a>. For some classes, you can also specify various options between square brackets like this:</p>
<pre tabindex="0"><code>\documentclass[12pt,a4paper,oneside,draft]{report}
</code></pre><p>In this example, we create a report that is in 12pt type on A4, but printed one-sided in draft mode.</p>
<p>You can also see that we have a <code>document</code> environment. Environments are always defined with a begin-end pair:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-latex" data-lang="latex"><span style="display:flex;"><span><span style="color:#66d9ef">\begin</span>{...}
</span></span><span style="display:flex;"><span>  Something goes here
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">\end</span>{...}
</span></span></code></pre></div><p>An example of a different environment is the math environment, which allows us to typeset equations:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-latex" data-lang="latex"><span style="display:flex;"><span><span style="color:#66d9ef">\begin</span>{equation}
</span></span><span style="display:flex;"><span>  E = mc^2
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">\end</span>{equation}
</span></span></code></pre></div><p>The equation above would render as:
</p>
$$
  E = mc^2
$$
<p>We will not discuss mathematics in Latex deeper, since I want to keep this relatively short. If you want to learn more about math equations in Latex, I recommend checking <a href="https://en.wikibooks.org/wiki/LaTeX/Mathematics">this Wikipedia article</a>.</p>
<p>Let&rsquo;s return to our example, which has a <code>document</code> environment. Every document needs to have this, and Latex will create a final document based on whatever is between the begin and the end. In our case, it would be <code>Your content goes here.</code> text.</p>
<h2 id="comments">Comments</h2>
<p>Sometimes you may want to add a note for yourself, that should not be in the final product. Latex allows you to add comments into your source files. Any line that starts with a <code>%</code> will be ignored by the Latex compiler.</p>
<h2 id="formatting-text">Formatting text</h2>
<p>You can split your text into various sections using these commands:</p>
<ul>
<li><code>\part{Name of part}</code></li>
<li><code>\chapter{Name of the chapter}</code> - Only for books</li>
<li><code>\section{Name of the section}</code></li>
<li><code>\subsection{Name of the subsection}</code></li>
<li><code>\subsubsection{Name of the subsubsection}</code></li>
<li><code>\paragraph{Name of the paragraph}</code></li>
<li><code>\subparagraph{Name of the subparagraph}</code></li>
</ul>
<p>These commands also automatically add entries into the automatically generated table of contents. If you want to have an alternative text in the table of contents, you can specify it with square brackets:</p>
<pre tabindex="0"><code>\section[My alternative title]{The title of my section in the text}
</code></pre><p>By the way, you can easily add a table of contents with the <code>\tableofcontents</code> command. Similarly, you can add a list of figures (<code>\listoffigures</code>) and a list of tables (<code>\listoftables</code>).</p>
<p>Normally, all parts are numbered, but you can also create an unnumbered section (e.g. for a Foreword or Preface) with a star:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-latex" data-lang="latex"><span style="display:flex;"><span><span style="color:#66d9ef">\subsection*</span>{Preface}
</span></span></code></pre></div><p>However, the star will cause the subsection to be omitted from the table of contents. If you still want this line to be included, add the following line after the <code>\subsection*{...}</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-latex" data-lang="latex"><span style="display:flex;"><span><span style="color:#66d9ef">\addcontentsline</span>{toc}{subsection}{Preface}
</span></span></code></pre></div><h2 id="ordered-lists">Ordered lists</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-latex" data-lang="latex"><span style="display:flex;"><span><span style="color:#66d9ef">\begin</span>{enumerate}
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">\item</span> First item
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">\item</span> Second item
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">\end</span>{enumerate}
</span></span></code></pre></div><h2 id="unordered-lists">Unordered lists</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-latex" data-lang="latex"><span style="display:flex;"><span><span style="color:#66d9ef">\begin</span>{itemize}
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">\item</span> First item
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">\item</span> Second item
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">\end</span>{itemize}
</span></span></code></pre></div><h2 id="packages">Packages</h2>
<p>Packages are a way to extent the core functionality of Latex. It can help you specific problem, for example aligning <code>=</code> signs in equations, or rendering source code in your document. The basic syntax for including a package is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-latex" data-lang="latex"><span style="display:flex;"><span><span style="color:#66d9ef">\usepackage</span><span style="color:#a6e22e">[options]</span>{package}
</span></span></code></pre></div><p>You can search for packages on CTAN website in the <a href="https://ctan.org/pkg">Packages</a> section. I recommend to search for packages that add specific functionality online when you find out that you can not do something with the current setup. Eventually you will create a blueprint with several packages that solve your common problems.</p>
<h2 id="meta-data">Meta-data</h2>
<p>Usually, the documents contain various meta-data, such as author&rsquo;s name, address, title of the document, or date. Example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-latex" data-lang="latex"><span style="display:flex;"><span><span style="color:#66d9ef">\documentclass</span><span style="color:#a6e22e">[11pt,a4paper]</span>{report}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">\begin</span>{document}
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">% Declare meta-data
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">\title</span>{My Amazing Latex Document}
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">\author</span>{John Doe}
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">\date</span>{February 2023}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">% This line renders a title page with a title
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">\maketitle</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">\end</span>{document}
</span></span></code></pre></div><p>If you omit <code>{...}</code> in <code>\date</code>, the command will use the current date when compiling the document.</p>
<h2 id="abstract">Abstract</h2>
<p>Abstracts are an important part of scientific literature, which helps the reader to quickly identify the topic of a paper. They are so important that Latex adds a special environment just for writing abstracts:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-latex" data-lang="latex"><span style="display:flex;"><span><span style="color:#66d9ef">\documentclass</span>{article}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">\begin</span>{document}
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">\begin</span>{abstract}
</span></span><span style="display:flex;"><span>  In this paper is shown the minimal example of a Latex document.
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">\end</span>{abstract}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  This is the content of the minimal example.
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">\end</span>{document}
</span></span></code></pre></div><p>By default, Latex will use <code>Abstract</code> as the title of your abstract, which may not be desired. To change the behavior, add the following line (replace <code>Executive Summary</code> with whatever you need):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-latex" data-lang="latex"><span style="display:flex;"><span><span style="color:#66d9ef">\renewcommand</span>{<span style="color:#66d9ef">\abstractname</span>}{Executive Summary}
</span></span></code></pre></div><h2 id="images">Images</h2>
<p>The easiest way of adding an image is using <code>\includegraphics</code> command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-latex" data-lang="latex"><span style="display:flex;"><span><span style="color:#66d9ef">\includegraphics</span><span style="color:#a6e22e">[height=2cm]</span>{path/to/my-image}
</span></span></code></pre></div><p>EPS, PNG, JPG, and PDF files are supported.</p>
<p>However, you will usually want to use the <code>figure</code> environment, which let&rsquo;s you easily add a caption:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-latex" data-lang="latex"><span style="display:flex;"><span><span style="color:#66d9ef">\begin</span>{figure}[ht]
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">\centering</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">\includegraphics</span><span style="color:#a6e22e">[width=0.5\textwidth]</span>{path/to/my-image.png}
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">\caption</span>{An example image}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">\end</span>{figure}
</span></span></code></pre></div><p>You can learn more about graphics and positioning in <a href="https://www.learnlatex.org/en/lesson-07">this article</a>.</p>
<h2 id="bibliography">Bibliography</h2>
<p>There are multiple ways of writing a bibliography in Latex. Here I will show you how to use an embedded method, which will include the bibliography inside the Latex file. Alternatively, you can create a <code>.bib</code> file with a specific syntax that will contain bibliographic items in a specific format. To learn more about bibliography management, check this <a href="https://en.wikibooks.org/wiki/LaTeX/Bibliography_Management">article</a>.</p>
<p>The bibliography support is included in Natbib package, which can be included with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-latex" data-lang="latex"><span style="display:flex;"><span><span style="color:#66d9ef">\usepackage</span><span style="color:#a6e22e">[options]</span>{natbib}
</span></span></code></pre></div><p>Useful options that I always use are:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-latex" data-lang="latex"><span style="display:flex;"><span><span style="color:#66d9ef">\usepackage</span><span style="color:#a6e22e">[numbers,square,sort&amp;compress,comma]</span>{natbib}
</span></span></code></pre></div><p>This will cause the in text citations to be labeled with numbers, sorted, compressed (<code>[1-3]</code> instead of <code>[1,2,3]</code>), and separated by commas.</p>
<p>A minimal example of a file with bibliography is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-latex" data-lang="latex"><span style="display:flex;"><span><span style="color:#66d9ef">\documentclass</span>{article}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">\begin</span>{document}
</span></span><span style="display:flex;"><span>  Here we want to cite an imporant paper<span style="color:#66d9ef">\cite</span>{doe2023}.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">% This command will tell Latex that we want a list of used literature printed here
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">% And here we specify the papers we cited
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">\printbibliography</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">\begin</span>{thebibliography}{9}
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">\bibitem</span>{doe2023} J. Doe. <span style="color:#66d9ef">\emph</span>{Phys. Lett. B} <span style="color:#66d9ef">\textbf</span>{84} 98 (2023).
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">\end</span>{thebibliography}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">\end</span>{document}
</span></span></code></pre></div><p>So, you need a <code>thebibliography</code> environment with bibliography items, which have the following format:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-latex" data-lang="latex"><span style="display:flex;"><span><span style="color:#66d9ef">\bibitem</span>{key} The citation
</span></span></code></pre></div><p>The <code>key</code> can be whatever you want, but I recommend a format <code>firstAuthorYear</code> (e.g. <code>doe2023</code>) to remember the papers easily. You will use the key, when you want to reference the paper in the text with a <code>\cite{key}</code> command. You can also mention several papers separated with comma (<code>\cite{key1, key2, ...}</code>).</p>
<h2 id="a-full-example-of-a-document">A full example of a document</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-latex" data-lang="latex"><span style="display:flex;"><span><span style="color:#66d9ef">\documentclass</span>{article}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">\usepackage</span><span style="color:#a6e22e">[utf8]</span>{inputenc}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">\usepackage</span><span style="color:#a6e22e">[numbers,square,sort&amp;compress,comma]</span>{natbib}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">% Meta-data
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">\title</span>{My Amazing Article}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">\author</span>{John Doe}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">% Abstract
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">\begin</span>{abstract}
</span></span><span style="display:flex;"><span>In this paper is shown an example of a Latex document.
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">\end</span>{abstract}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">% The document content
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">\begin</span>{document}
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">\maketitle</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">\section</span>{Introduction}
</span></span><span style="display:flex;"><span>  Here we introduce our topic<span style="color:#66d9ef">\cite</span>{doe2023}.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">\section</span>{Model}
</span></span><span style="display:flex;"><span>  We used a model with the following Hamiltonian:
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">\begin</span>{equation}
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">\mathcal</span>{H} = -J <span style="color:#66d9ef">\sum</span>_{<span style="color:#66d9ef">\langle</span> i, j <span style="color:#66d9ef">\rangle</span>} <span style="color:#66d9ef">\sigma</span>_i<span style="color:#66d9ef">\sigma</span>_j - h <span style="color:#66d9ef">\sum</span>_{i = 1}^{N} <span style="color:#66d9ef">\sigma</span>_i
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">\end</span>{equation}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">\section</span>{Methods}
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">\subsection</span>{Monte Carlo simulations}
</span></span><span style="display:flex;"><span>  Here we explain Metropolis algorithm.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">\subsection</span>{Transfer matrix method}
</span></span><span style="display:flex;"><span>  Here we explain what is Transfer matrix method.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">\section</span>{Results and discussion}
</span></span><span style="display:flex;"><span>  Our results go here.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">\section</span>{Conclusion}
</span></span><span style="display:flex;"><span>  Here we draw conclusions.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">\section*</span>{Acknowledgement}
</span></span><span style="display:flex;"><span>  We would like to thank to XYZ Grant Agency for financial support.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">\printbibliography</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">\begin</span>{thebibliography}{9}
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">% You need to sort the entries here manually, otherwise they will appear in the text out of order.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">\bibitem</span>{doe2023} J. Doe. <span style="color:#66d9ef">\emph</span>{Phys. Lett. B} <span style="color:#66d9ef">\textbf</span>{84} 98 (2023).
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">\end</span>{thebibliography}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">\end</span>{document}
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>In this post I&rsquo;ve shown you how to use the most basic features of Latex to create a simple document. Even though you will be able to write the most basic texts, this is just a start, and there is a lot to learn. The benefits of Latex may not be obvious at first, but it is a useful tool for writing high quality texts ready for publications, and it will help you get rid of various issues encountered when using text editors such as Microsoft Word.</p>
]]></content>
		</item>
		
		<item>
			<title>Writing Simple Webpage With Alpine.js and Tailwind</title>
			<link>http://localhost:1313/blog/en/posts/writing-simple-webpage-with-alpine.js-and-tailwind/</link>
			<pubDate>Mon, 04 Sep 2023 21:21:13 +0200</pubDate>
			
			<guid>http://localhost:1313/blog/en/posts/writing-simple-webpage-with-alpine.js-and-tailwind/</guid>
			<description><![CDATA[%!s(<nil>)]]></description>
			<content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>In this post I&rsquo;ll demonstrate how to create a simple website using Alpine.js<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> and Tailwind<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</p>
<h2 id="installation">Installation</h2>
<p>We will use CDN to install both Alpine.js and Tailwind to keep things simple. First, create an <code>index.html</code> file with the following boilerplate code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span><span style="color:#75715e">&lt;!doctype html&gt;</span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">html</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">head</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">charset</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;UTF-8&#34;</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;viewport&#34;</span> <span style="color:#a6e22e">content</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;width=device-width, initial-scale=1.0&#34;</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">&lt;!--- Install Tailwind ---&gt;</span>
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://cdn.tailwindcss.com&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">&lt;!--- Install Alpine.js ---&gt;</span>
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">defer</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">&lt;!--- Customization of the Tailwind config --&gt;</span>
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">script</span>&gt;
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">tailwind</span>.<span style="color:#a6e22e">config</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">theme</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>          <span style="color:#a6e22e">extend</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">colors</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>              <span style="color:#a6e22e">clifford</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;#da373d&#39;</span>,
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>          }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">script</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;/<span style="color:#f92672">head</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">body</span>&gt;
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">&lt;!--- The webpage content goes here ---&gt;</span>
</span></span><span style="display:flex;"><span>  &lt;/<span style="color:#f92672">body</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">html</span>&gt;
</span></span></code></pre></div><p>It&rsquo;s also possible to install Alpine.js as a Node.js module<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>. Tailwind also has a couple of alternative ways of installation<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>.</p>
<p>In production environment, it&rsquo;s recommended to hardcode the latest version of Alpine.js to improve stability. So, instead of <code>3.x.x</code>, you should put there a specific version.</p>
<h2 id="sources-">Sources 📚️</h2>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><em>Alpine.js</em>. (n.d.). <a href="https://alpinejs.dev/">https://alpinejs.dev/</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><em>Tailwind CSS - Rapidly build modern websites without ever leaving your HTML</em>. (n.d.). Tailwind CSS. <a href="https://tailwindcss.com/">https://tailwindcss.com/</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><em>Installation — Alpine.js</em>. (n.d.). <a href="http://alpinejs.dev/essentials/installation">http://alpinejs.dev/essentials/installation</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p><em>Installation - Tailwind CSS</em>. (n.d.). Tailwind CSS. <a href="https://tailwindcss.com/docs/installation">https://tailwindcss.com/docs/installation</a>&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content>
		</item>
		
		<item>
			<title>Introduction Into Protocol Buffers in Go</title>
			<link>http://localhost:1313/blog/en/posts/introduction-into-protocol-buffers-in-go/</link>
			<pubDate>Sat, 26 Aug 2023 09:14:53 +0200</pubDate>
			
			<guid>http://localhost:1313/blog/en/posts/introduction-into-protocol-buffers-in-go/</guid>
			<description><![CDATA[%!s(<nil>)]]></description>
			<content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Protocol buffers<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> are a language-agnostic and platform-independent mechanism for serialization of data created by Google. Protocol buffers can be used as a replacement for older formats, such as JSON or XML, but they are designed to be much smaller, faster and simpler. The speed is achieved by the fact that protocol buffers encode information into a binary format, which both increases the speed of parsing and reduces the size of the message, which in turn improves the transmission speeds.</p>
<p>Before using them, one has to specify how the data is structured, and then the language-specific code can be automatically generated. Currently protocol buffers are supported in the following languages: Java, Python, Objective-C, and C++, and in <code>proto3</code> version you can also use Kotlin, Dart, Go, Ruby, PHP, and C#.</p>
<p>The most notable application of protocol buffers is in <a href="../introduction-into-grpc-in-go">gRPC</a>, which is a high-performance framework that can run in any environment and can be used as a more efficient replacement for REST APIs in some applications<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</p>
<p>One of the main benefits of protocol buffers is that they are language-independent and therefore the producer of a message can be written in a different language than the consumer.</p>
<p>In this blog post I&rsquo;ll show you how to get started with protocol buffers in Go programming language<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>.</p>
<h2 id="preparation">Preparation</h2>
<p>In this tutorial we will be using <code>proto3</code> version of protocol buffers<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>. Before we start working with the protocol buffers, you need to install the compiler. Head to the <a href="https://protobuf.dev/downloads">download page</a>, get the package and follow the instructions in the README. In my case, I was able to download the package using my Linux distribution package manager.</p>
<p>First, we need the <code>go.mod</code> file, which can be generated with:</p>
<pre tabindex="0"><code>go mod init github.com/msemjan/protobuf-tutorial
</code></pre><p>You also need to install a couple of packages:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>go get github.com/golang/protobuf
</span></span><span style="display:flex;"><span>go get github.com/golang/protobuf/proto
</span></span><span style="display:flex;"><span>go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
</span></span></code></pre></div><p>Finally, make sure that you&rsquo;ve exported <code>$GOPATH/bin</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export PATH<span style="color:#f92672">=</span>$PATH:$GOPATH/bin
</span></span></code></pre></div><h2 id="specifying-the-message-structure">Specifying the message structure</h2>
<p>As an example, I&rsquo;ve decided to create a message for posts with several common fields: id, author, title, body, and an array of tags.</p>
<p>As I&rsquo;ve mentioned before, the protocol buffers require you to specify the message structure in a <code>.proto</code> file. So let&rsquo;s create a <code>types</code> folder and inside it a <code>post.proto</code> file with the following content:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-proto" data-lang="proto"><span style="display:flex;"><span>syntax <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;proto3&#34;</span>;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#f92672">package</span> pb;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">option</span> go_package <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;./pb&#34;</span>;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">message</span> <span style="color:#a6e22e">Post</span> {<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#66d9ef">int64</span> id <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#66d9ef">string</span> author <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#66d9ef">string</span> title <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#66d9ef">string</span> body <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#66d9ef">repeated</span> <span style="color:#66d9ef">string</span> tags <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>;<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>}<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>The first line says that we are using the version 3 of the protocol buffers. We also declared a package <code>pb</code>. The third line is necessary when we want to work with protocol buffers in Go. Basically, this will cause the code generator to create a <code>pb</code> folder in the root of our project and put all the generated files there.</p>
<p>As you can see the message itself has several fields that have types. Protocol buffers support several types that are similar to those used by Go. A full list of scalar types can be found in the <a href="https://protobuf.dev/programming-guides/proto3/#scalar">documentation</a>. The only field that is not scalar in our example is the <code>tags</code> field. Each post can have several tags, and you can create something like an array with <code>repeated</code> keyword.</p>
<p>Also notice that we are giving each field a unique identifier (<code>= 1</code>, <code>= 2</code>, &hellip;) that is used in the binary encoding. Tag numbers 1-15 require one less byte to encode than higher numbers, so as an optimization you can decide to use those tags for the commonly used or repeated elements, leaving tags 16 and higher for less-commonly used optional elements. This is particularly important for the repeated fields, since they require re-encoding of the tag number. But in our case, it is not necessary, since we don&rsquo;t have so many fields.</p>
<p>Once you&rsquo;ve created all your <code>.proto</code> files, you can compile them with this command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>protoc --go_out<span style="color:#f92672">=</span>. types/*.proto
</span></span></code></pre></div><p>This will generate Go code automatically. You can check the compiled files in the <code>pb</code> folder. It will contain a Go <code>struct</code> that represents the <code>Post</code> message and several functions necessary for the protocol buffers. Do not modify these files manually!</p>
<h2 id="marshaling-and-unmarshaling">Marshaling and unmarshaling</h2>
<p>Now that we&rsquo;ve created a specification of the message structure, and generated Go code, we can start using protocol buffers inside of our Go applications.</p>
<p>Below is a full example with comments that shows how to marshal your <code>struct</code>s, save them into a file, read them, and finally, how to unmarshal them.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;io/ioutil&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;log&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;github.com/golang/protobuf/proto&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;github.com/msemjan/protobuf-tutorial/pb&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">PrintPost</span>(<span style="color:#a6e22e">post</span> <span style="color:#a6e22e">pb</span>.<span style="color:#a6e22e">Post</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;Id:     %v\n&#34;</span>, <span style="color:#a6e22e">post</span>.<span style="color:#a6e22e">Id</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;Author: %v\n&#34;</span>, <span style="color:#a6e22e">post</span>.<span style="color:#a6e22e">Author</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;Title:  %v\n&#34;</span>, <span style="color:#a6e22e">post</span>.<span style="color:#a6e22e">Title</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;Body:   %v\n&#34;</span>, <span style="color:#a6e22e">post</span>.<span style="color:#a6e22e">Body</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;Tags:   %v\n&#34;</span>, <span style="color:#a6e22e">post</span>.<span style="color:#a6e22e">Tags</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">filename</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;posts.data&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Create a post - this is a standard Go structure
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">post</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">pb</span>.<span style="color:#a6e22e">Post</span>{
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">Id</span>:     <span style="color:#ae81ff">1234</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">Author</span>: <span style="color:#e6db74">&#34;Jon Doe&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">Title</span>:  <span style="color:#e6db74">&#34;Protobufs&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">Body</span>:   <span style="color:#e6db74">&#34;Protobufs are amazing :)&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">Tags</span>:   []<span style="color:#66d9ef">string</span>{<span style="color:#e6db74">&#34;protobufs&#34;</span>, <span style="color:#e6db74">&#34;golang&#34;</span>, <span style="color:#e6db74">&#34;data&#34;</span>, <span style="color:#e6db74">&#34;serialization&#34;</span>},
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Marshaling the data
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">marshaledPost</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">proto</span>.<span style="color:#a6e22e">Marshal</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">post</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatalln</span>(<span style="color:#e6db74">&#34;Failed to marshal the post: &#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Writing the data into a file
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ioutil</span>.<span style="color:#a6e22e">WriteFile</span>(<span style="color:#a6e22e">filename</span>, <span style="color:#a6e22e">marshaledPost</span>, <span style="color:#ae81ff">0644</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatalln</span>(<span style="color:#e6db74">&#34;Failed to write the post into a file:&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Reading the data from a file
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">data</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ioutil</span>.<span style="color:#a6e22e">ReadFile</span>(<span style="color:#a6e22e">filename</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatalln</span>(<span style="color:#e6db74">&#34;Failed to read the post into a file:&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Unmarshaling the data
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">readPost</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">pb</span>.<span style="color:#a6e22e">Post</span>{}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">proto</span>.<span style="color:#a6e22e">Unmarshal</span>(<span style="color:#a6e22e">data</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">readPost</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatalln</span>(<span style="color:#e6db74">&#34;Failed to unmarshal the post: &#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">PrintPost</span>(<span style="color:#a6e22e">readPost</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We can run the code with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>go run main.go
</span></span></code></pre></div><p>And we should get the following output:</p>
<pre tabindex="0"><code>Id:     1234
Author: Jon Doe
Title:  Protobufs
Body:   Protobufs are amazing :)
Tags:   [protobufs golang serializations]
</code></pre><h2 id="conclusion">Conclusion</h2>
<p>In this blog post I demonstrated how to create a simple message with protocol buffers in Go programming language. Their main use is as a serialization format for gRPC, which can be used as a replacement for REST APIs. I consider protocol buffers to be a technology that will become more desired in future, especially for communication between various back-end services, low-powered and mobile devices. Protocol buffers and gRPC are relatively simple to set up and work with, and offers various benefits, such as increased speed and efficiency. They definitely require a little more setup than using JSON, but if you are transmitting a large quantity of messages, it&rsquo;s worth it. It probably won&rsquo;t replace JSON or XML soon, because at the moment HTTP/2 required by the gRPC is not supported by any of the major browsers. Protocol buffers can also be used to store data on the hard drive, and due to their use of binary encoding, the saved files will take up less space then the same data encoded in JSON or XML.</p>
<h2 id="sources-">Sources 📚️</h2>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><em>Protocol buffers</em>. (n.d.). <a href="https://protobuf.dev/">https://protobuf.dev/</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><em>GRPC</em>. (n.d.). gRPC. <a href="https://grpc.io/">https://grpc.io/</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><em>Protocol buffer Basics: Go</em>. (n.d.). Protocol Buffers Documentation. <a href="https://protobuf.dev/getting-started/gotutorial/">https://protobuf.dev/getting-started/gotutorial/</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p><em>Language Guide (proto 3)</em>. (n.d.). Protocol Buffers Documentation. <a href="https://protobuf.dev/programming-guides/proto3">https://protobuf.dev/programming-guides/proto3</a>&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content>
		</item>
		
		<item>
			<title>What Front End Framework Should You Pick in 2023?</title>
			<link>http://localhost:1313/blog/en/posts/what-front-end-framework-should-you-pick-in-2023/</link>
			<pubDate>Fri, 18 Aug 2023 19:07:26 +0200</pubDate>
			
			<guid>http://localhost:1313/blog/en/posts/what-front-end-framework-should-you-pick-in-2023/</guid>
			<description><![CDATA[%!s(<nil>)]]></description>
			<content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>As I&rsquo;ve mentioned in one of my previous <a href="../introducing-ghast-stack">posts</a>, some time ago I&rsquo;ve decided to learn a little bit of front-end development. At that time I already knew the basics of Javascript, so the natural question was &ldquo;What front-end framework should I pick?&rdquo;. I&rsquo;ll share the results of my front-end framework investigation in the today&rsquo;s post.</p>
<h2 id="so-many-options">So many options!</h2>
<p>The first thing that anyone dabbling in the front-end quickly finds out is that there are so many competing frameworks. It&rsquo;s said that a new Javascript framework is born every day. Moreover, the way things are done also change frequently. If you look at a React code that is five years old, it looks archaic. This means that newcomers are overwhelmed by countless options. And the experienced developers need to constantly learn to stay on top of things.</p>
<p>Fortunately, there is a smaller subset of frameworks that are being used by majority of the front-end developers. According to the <a href="https://2022.stateofjs.com/en-US/">State of JavaScript survey from 2022</a>, the most popular frameworks are (in this order):</p>
<ol>
<li><a href="https://react.dev/">React</a></li>
<li><a href="https://angularjs.org/">Angular</a></li>
<li><a href="https://vuejs.org/">Vue.js</a></li>
<li><a href="https://svelte.dev/">Svelte</a></li>
<li><a href="https://preactjs.com/">Preact</a></li>
<li><a href="https://emberjs.com/">Ember</a></li>
<li><a href="https://www.solidjs.com/">Solid</a></li>
<li><a href="https://lit.dev/">Lit</a></li>
<li><a href="https://alpinejs.dev/">Alpine.js</a></li>
<li><a href="https://stenciljs.com/">Stencil</a></li>
<li><a href="https://qwik.builder.io/docs/">Qwik</a></li>
</ol>
<p>I&rsquo;ll write a brief description of each of the frameworks, mention some of its features, and when to use it.</p>
<blockquote>
<p><strong>⚠️ Quick disclaimer</strong></p>
<p>I am definitely not an expert on front-end and I haven&rsquo;t used all of the frameworks on this list, so take this post with a grain of salt. This is mostly my opinion based on the information I&rsquo;ve gathered, while trying to pick a front-end framework myself.</p>
</blockquote>
<h2 id="react">React</h2>
<p>As of 2023, <a href="https://react.dev/">React</a> is the industry standard and the most popular Javascript framework. If you&rsquo;ve ever googled anything related to front-end, you&rsquo;ve likely heard about it. It was created by Meta (formerly Facebook) and it can be used to create <a href="https://en.wikipedia.org/wiki/Single-page_application">single page applications (SPA)</a>. The React code is written in JSX, which is an extended Javascript syntax that allows you to embed HTML into your Javascript code.</p>
<p>It has two approaches to building websites based on components: the older class-based style, and the newer functional style with React <a href="https://reactjs.org/docs/hooks-intro.html">hooks</a>. As the name suggests, React allows you to build reactive websites, which can update many parts of its when a change occurs. To achieve this, React uses so-called virtual DOM. It is a virtual version of the website and its elements. When some value gets changed, React changes the virtual DOM and then compares it with the real DOM, and updates only the parts that were affected by this change. This can be viewed as a good and a bad thing. React updates only what needs to be updated, but you need to send the entire library to the client to handle the virtual DOM.</p>
<p>An another plus of React is its thriving community and a large ecosystem of various libraries that will make creation of the websites an easy task. Moreover, there are many job position for React developers.</p>
<p>If you decide to learn React, you should also check out <a href="https://nextjs.org/">Next.js</a>, a meta-framework that allows you to create fullstack applications with React.</p>
<h2 id="angular">Angular</h2>
<p>Another entry on the list is <a href="https://angularjs.org/">Angular</a>. It was created by Google, and like React, it is used for creating SPA applications. It utilizes model-view-controller and model-view-viewmodel architectures.</p>
<p>It is not as popular as React and it has been on a steady decline in the recent years, but there are still many jobs in some companies, which have large code bases in this framework.</p>
<h2 id="vuejs">Vue.js</h2>
<p><a href="https://vuejs.org/">Vue.js</a> is a another popular framework that uses virtual DOM and is used for creating reactive websites. However, unlike React, which uses JSX, Vue.js chose a different approach. You write <code>.vue</code> files, which have <code>&lt;template&gt;</code>, <code>&lt;script&gt;</code>, and <code>&lt;style&gt;</code> tags for your HTML, Javascript code, and CSS, respectively. Vue.js was created by Evan You, and is maintained by him and the rest of the active core team members. Therefore, it does not have a support of large companies, like React and Angular.</p>
<p>Vue.js is relatively easy to learn, and it looks more like HTML with vanilla Javascript than React. Therefore, you should pick it, if you don&rsquo;t like the look of JSX.</p>
<p>Similarly, to React&rsquo;s Next.js, there exists a fullstack meta-framework called <a href="https://nuxt.com/">Nuxt</a>.</p>
<h2 id="svelte">Svelte</h2>
<p><a href="https://svelte.dev/">Svelte</a> is my personal favorite on this list. Unlike the previous entries on our list, Svelte isn&rsquo;t really a framework, but a compiler, which allows it to produce a much smaller final website. Svelte also does not use virtual DOM.</p>
<p>Svelte uses <code>.svelte</code> files with a syntax that looks a little bit like Vue.js, but you don&rsquo;t have to wrap your HTML in a <code>&lt;template&gt;</code> tag. Another similarity to Vue.js is that it was developed by a single man, Rich Harris. It is easy to learn, and offers many useful features, which are missing in some other frameworks, such as state management, stores, animations, etc.</p>
<p>If you are interested in writing fullstack applications, you can use <a href="https://kit.svelte.dev/">SvelteKit</a>, which is to Svelte what Next.js is to React and Nuxt.js to Vue.js.</p>
<h2 id="preact">Preact</h2>
<p><a href="https://preactjs.com/">Preact</a>, as the name suggests, is something very similar to React. In fact, the entire frameworks aims to be an alternative to React, with the same API, but much smaller (only 3.5kb!). Preact API is as close as possible to React, but not exactly the same. It excels in the use-cases, when the goal is to make it as small as possible (e.g. when you need to embed your website). The main difference between Preact and React is that Preact does not ship its own Synthetic Event System, and instead uses the browser&rsquo;s native <code>addEventListener</code> for event handling internally. This can cause a subtle differences, that might catch you off guard, if you are used to working React.</p>
<p>The another large difference is that Preact classes accept a couple of additional attributes/properties. And there are a couple additional minor <a href="https://preactjs.com/guide/v10/differences-to-react">differences</a>.</p>
<p>I would say that if you are deciding between React and Preact, pick one based on your use-case. But since the API is so similar, it should not be difficult to learn the other framework, when needed. Additionally, Preact makes the <a href="https://preactjs.com/guide/v10/switching-to-preact">transition from React to Preact</a> as easy as possible.</p>
<h2 id="ember">Ember</h2>
<p><a href="https://emberjs.com/">Ember</a> is another framework for creating scalable SPA applications with a component-service pattern. It utilizes <a href="https://handlebarsjs.com/guide/">Handlebars templating language</a> to render data in your web applications. Ember.js comes with a handy CLI that helps you auto-generate boilerplate code for your components, controllers, and routes, as well as perform certain tasks, such as generate a project or run tests.</p>
<h2 id="solid">Solid</h2>
<p><a href="https://www.solidjs.com/">Solid</a> is another framework that takes a lot of inspiration from React. Solid is fairly pragmatic and highly performant, which lead to its quick raise to popularity. It uses JSX, and they syntax looks very similar, except Solid uses <a href="https://www.solidjs.com/tutorial/introduction_signals">Signals</a> instead of Hooks. On the surface, they look like the same thing, but there is a huge difference between them &ldquo;under the hood&rdquo;. Signals allow you to surgically update only the parts of the DOM that need to be updated, while maintaining the reactivity. Moreover, unlike React Hooks, Signals are executed only once.</p>
<p>Other differences are that Solid uses compiler, just like Svelte, and it does not ship any virtual DOM. It is also very lightweight, while still offering all the modern features you might want, such as server-side rendering, lazy loading, context, etc.</p>
<h2 id="lit">Lit</h2>
<p><a href="https://lit.dev/">Lit</a> is a simple library for building fast, lightweight web components.</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Components">Web components</a> are a built-in feature of modern browsers, which have a fairly clunky API and are a pain to write manually. That&rsquo;s why there is a need for a framework to simplify this process. The benefit of the web components is that they are supported by the browsers, and it should (at least in theory) be possible to render them anywhere HTML is rendered.</p>
<p>Moreover, you should be able to use the web components in any framework (like the ones mentioned above). Lit provides reactive state, scoped styles, efficient shadow DOM support, and a declarative template system that&rsquo;s tiny, fast and expressive.</p>
<p>Lit is similar to React class syntax with lifecycle methods, properties, and attributes. It has a built-in Typescript support and uses decorators. Since it is used by several Google websites, Lit will very likely remain supported for quiet some time.</p>
<h2 id="alpinejs">Alpine.js</h2>
<p><a href="https://alpinejs.dev/">Alpine.js</a> is a super simple and lightweigh Javascript library that has only 15 attributes, 6 properties, and 2 methods. Because of this reason, it is very easy to learn, and can be used to directly compose the behavior of your elements. It markets itself as a modern replacement for <a href="https://jquery.com/">jQuery</a>. Despite it&rsquo;s simplicity, it offers functionality such as reactivity, state management, templating, events, and lifecycles. Alpine.js is an amazing option, if you have an existing web page written with vanilla Javascript or jQuery and want to add a little bit of interactivity.</p>
<p>Since it is a minimal framework, don&rsquo;t expect some features that are available in other frameworks, such as hydration, server-side rendering, or SPA. You should use it with some server-side technology, such as Django, Ruby on Rails, Java with Spring, or some other server framework, that will do the heavy lifting and render the web page.</p>
<p>Personally, I really like this approach that mainly uses a back-end language and Javascript is used only for scripting interactivity on the front-end, and I even added it into my <a href="../introducing-ghast-stack">GHAST tech stack</a>.</p>
<h2 id="stencil">Stencil</h2>
<p>Similarly to Lit, <a href="https://stenciljs.com/">Stencil</a> is another framework for creating web components. It should be easy to learn, have a Typescript support, and a stable API. The Stencil components are compiled into Web components, and then can be distributed natively to React, Angular, Vue, and traditional web developers from a single, framework-agnostic codebase. Honestly, I am not sure what are the most notable differences between Stencil and Lit and which one is better, but based on the <a href="https://2022.stateofjs.com/en-US/">State of JavaScript survey from 2022</a>, Lit is a bit more popular.</p>
<h2 id="qwik">Qwik</h2>
<p><a href="https://qwik.builder.io/docs/">Qwik</a> is a relatively new web framework that promises that it can deliver instant loading web applications at any size or complexity, and achieve consistent performance at scale.</p>
<p>Unlike other frameworks on this list, it uses a strategy called &ldquo;resumability&rdquo;, which means that the application be can stopped, serialized, and moved to a different environment (either a server, or a browser) at any point. Then it simply resumes in a new environment from the point, when the serialization stopped.</p>
<p>This approach is the cornerstone of building fullstack apps with Qwik. The instant loads are a consequence of your application being HTML first. The HTML is sent to the client, and the Javascript code is streamed to the client only when needed. This is combined with speculative fetching and lazy execution, so the framework is using only the Javascript code it really needs.</p>
<p>This sounds pretty simple, but Qwik has to do a lot of things in the background to support the resumability.</p>
<p>The Qwik&rsquo;s syntax is inspired by React, it uses JSX, hooks, and other established ways of solving various front-end problems.</p>
<p>I think that Qwik definitely presents interesting ideas.</p>
<h2 id="which-framework-is-best-for-you">Which framework is best for you?</h2>
<p>As one can see, when it comes to front-end frameworks, there are many options to choose from. Some of them introduced new and fresh ideas, while the others are only trying to perfect the existing solutions. But which Javascript framework should you choose? Well, it depends&hellip;</p>
<p>Do you want to learn a front-end framework to get a job? Then React is a clear answer. It is the most popular framework and most companies are hiring React developers. Even though some other frameworks are gaining popularity, React will not go anywhere, since there are so many websites written in it, and companies will need developers to maintain and extend them for years to come.</p>
<p>Are you a back-end programmer, who enjoys the ecosystem of their language, but wants to sprinkle a little bit of interactivity to your website? Then Alpine.js sounds like a very good choice.</p>
<p>Do you need to create Web Components? Then choose Lit or Stencil.</p>
<p>Do you just want to quickly learn a front-end framework and start working on your side-project as soon as possible? Then Svelte or Vue.js are excellent choice, since both are easy to learn.</p>
<p>Or do you feel adventurous and want to try some new approaches to building websites? Than I can recommend Solid or Qwik.</p>
<h2 id="conclusions">Conclusions</h2>
<p>In this post I&rsquo;ve briefly described the most popular front-end frameworks and some of their features. Hopefully, this post will help you pick a framework that suits your needs and preferences. There should be something suitable for everyone.</p>
<p>Ultimately, the choice is not as important as people think. Once you learn one framework, it is easier to pick up another, since some concepts are general and apply to several frameworks. Unless you have specific requirements, you will be able to build most applications with any of the popular front-end frameworks.</p>
<p>If you still don&rsquo;t know which one is best for your, I would recommend to learn the basics of each of the frameworks and try to build a simple application in all of them, and then pick the one you liked the most.</p>
]]></content>
		</item>
		
		<item>
			<title>Introducing GHAST Stack</title>
			<link>http://localhost:1313/blog/en/posts/introducing-ghast-stack/</link>
			<pubDate>Fri, 11 Aug 2023 18:12:17 +0200</pubDate>
			
			<guid>http://localhost:1313/blog/en/posts/introducing-ghast-stack/</guid>
			<description><![CDATA[%!s(<nil>)]]></description>
			<content type="html"><![CDATA[<h1 id="introducing-ghast-stack">Introducing GHAST Stack</h1>
<p>GHAST stack is a new tech-stack for developing web applications without excessive use of Javascript. In this article I describe why I am suggesting usage of this tech-stack and what technologies it uses.</p>
<h2 id="why-a-new-tech-stack">Why A New Tech-Stack?</h2>
<p>Modern web app development heavily relies on Javascript libraries, such as <a href="https://react.dev/">React</a>, <a href="https://vuejs.org/">Vue</a>, <a href="https://angular.io/">Angular</a>, <a href="https://svelte.dev/">Svelte</a>, or some other lesser-known emerging players. Moreover, in 2009 Javascript also invaded the back-end world in a form of <a href="https://nodejs.org/">Node.js</a>.</p>
<p>Over the years the Javascript ecosystem became a hot mess with a large number of packages, modules, libraries, and frameworks, which makes it difficult for the newcomers to navigate. The sheer volume of choices is overwhelming. Last year I&rsquo;ve decided that I&rsquo;ll learn a little bit of front-end, and I found it hard to decide what to learn. If you want to land a job in a front-end position, React is a solid choice, but I didn&rsquo;t like it. I found Vue to be prettier than React, but that means that I still have to write Javascript. The same with Angular, plus in the recent years it was on a steady decline in terms of popularity.</p>
<p>What are options do you have? If you are a back-end developer, like myself, you will quickly realize that your favorite back-end language is more or less good only for writing APIs or at the best case scenario server-side rendering, which allows you to create dynamic webpages, but if you want to change only a part of the website, the user needs to make a HTTP request that will cause a re-render of the entire web page.</p>
<p>However, there is a light at the end of the tunnel. It is HTMX, which can be thought of as an extension of HTML, and it gives you an access to AJAX, CSS transitions, WebSockets, and Server Sent Events directly in HTML. With HTMX, you can sprinkle islands of interactivity into your web page, that dynamically change when user interacts with your web page. Since most back-end languages, such as Python, Golang, Ruby, PHP, etc., have a templating engines, you can render parts of the web page, and send them to front-end, where HTMX will swap the original content with your snippet of HTML.</p>
<p>This means that you can don&rsquo;t have to use Javascript for changing only a small part of the website, and you don&rsquo;t have to re-render the entire web page, when the user interacts with it. Moreover, you can use your favorite back-end language that you are familiar with and don&rsquo;t have to sink countless hours into learning (and relearning, since the Javascript landscape is constantly changing, and what was the hottest thing last year is painfully outdated today) front-end Javascript framework.</p>
<p><img alt="You&rsquo;re fullstack now" src="https://htmx.org/img/memes/fullstack.jpg"></p>
<p><em>Source: <a href="https://htmx.org/essays/#memes">HTMX Official Website</a></em></p>
<h2 id="what-is-ghast-stack">What Is GHAST Stack?</h2>
<p>GHAST Stack is comprised of five technologies:</p>
<ul>
<li><a href="https://go.dev/learn/">Golang</a> programming language</li>
<li><a href="https://htmx.org/">HTMX</a></li>
<li><a href="https://alpinejs.dev/">Alpine.js</a></li>
<li>SQL (e.g. <a href="https://www.postgresql.org/">PostgreSQL</a>, <a href="https://www.mysql.com/">MySQL</a>, <a href="https://www.sqlite.org/index.html">SQLite</a>, &hellip;)</li>
<li><a href="https://tailwindcss.com/">Tailwind</a></li>
</ul>
<p>The core of the GHAST stack is Golang programming language (mostly because I like it at the moment, but also to have a cool acronym 😅). Golang is among younger programming language, but it is growing in popularity. In the <a href="https://survey.stackoverflow.co/2023/">Stack Overflow Developer Survey 2023</a> it ranked 13-th in the most popular programming technology list. It is simple to learn, but has a large standard library that allows you to accomplish most common tasks without a need for third-party dependencies. Additionally, there is a growing community of Golang developers (who call themselves Gophers), who are writing useful libraries and frameworks, which will benefit your future projects. Since it is backed by large companies, such as Google, we can expect that Golang will only become more popular in the coming years.</p>
<p>As discussed in the previous section, we want to use a back-end programming language and still have some interactivity in our application. Therefore, we will use HTMX to do the heavy lifting. Parts of the website that should change will be swapped with the snippets of HTML generated by our Golang server. This can be easily done with the built-in <a href="https://pkg.go.dev/text/template"><code>template</code></a> package. Since we are working directly with HTML, we can also avoid the need to transform JSON into something that can be displayed on the front-end as is often the case when using Javascript libraries, such as React.</p>
<p>Alpine.js is another front-end library. It may seem that including it in our stack goes against everything said against the usage of Javascript. However, I think it is okay to use a little bit of Javascript for small things such as animations, transitions, and other small tasks that are not the best fit for the back-end server. Even the official website of HTMX features an <a href="https://htmx.org/essays/hypermedia-friendly-scripting/">essay</a> that argues that some Javascript scripting is HTMX-friendly. It mostly comes down to avoiding changes to the state of your application using Javascript (in HTMX, the state is stored in the HTML). I recommend reading the essay for better understanding of when it is suitable to use Javascript in your application. When using Alpine.js, you probably should also consider using the <a href="https://htmx.org/docs/#included-extensions">alpine-morph extension/plugin</a>.</p>
<p>I think that the choice of SQL is fairly self-explanatory. Using databases for data-persistence is an industry standard. Since I wanted that cool acronym, I left the specific implementation of SQL free to the user&rsquo;s preference. Use whatever you like and what makes sense in your use-case.</p>
<p>The last technology used in the GHAST stack is Tailwind, a utility CSS framework that will make styling of our application much easier than using pure CSS. It defines a large set of small, constrained utility classes, which can be combined to achieve the desired look.</p>
<h2 id="when-to-use-ghast-stack">When To Use GHAST Stack?</h2>
<p>GHAST stack is intended for smaller applications, which don&rsquo;t have very complex front-ends. The interactivity should be contained within well-defined &ldquo;islands&rdquo; of interactivity. It is great for UIs that are mostly text and images. It is also great if you need a good first-render performance. Basically, this stack is mostly limited by the same <a href="https://htmx.org/essays/when-to-use-hypermedia/">things as HTMX</a> itself.</p>
<h2 id="when-not-to-use-ghast-stack">When Not To Use GHAST Stack?</h2>
<p>GHAST is not ideal for applications that have complex UI with dynamic inter-dependencies, where a change in one place causes updates all over the web page. If the interactivity is not localized in smaller blocks, a more standard approach using one of the popular Javascript libraries is more suitable.</p>
<p>Also, hypermedia approach is not ideal if the state of the application changes very frequently (e.g. in a games), since a lot of syncing between the client and the server is required. You can however, embed a <em>single page application</em> (SPA) component within a larger hypermedia architecture.</p>
<p>The last reason not to use the GHAST stack is when you need to hire developers (or be hired) to work on a web application, since technologies, such as React, are much more popular there are more developers who can work with them. The same is true, if your existing team isn&rsquo;t on board.</p>
<h2 id="conclusions">Conclusions</h2>
<p>In this post I&rsquo;ve introduced a new tech-stack, which is built around Golang, HTMX, Alpine.js, SQL, and Tailwind. It is an alternative to the more popular approaches to building web application based on Javascript. GHOST stack is suitable for smaller applications that have smaller interactive parts that don&rsquo;t update very frequently. The majority of the work is done on our Golang server and the generated snippets that return from the Golang app are inserted into our front-end. Alpine.js can be used to enhance our website with small amount of inline Javascript. These tools provide everything necessary to build a well-functioning web application.</p>
]]></content>
		</item>
		
		<item>
			<title>How to Learn New Technology With Stack Overflow</title>
			<link>http://localhost:1313/blog/en/posts/how-to-learn-new-technology-with-stack-overflow/</link>
			<pubDate>Fri, 14 Jul 2023 18:07:25 +0200</pubDate>
			
			<guid>http://localhost:1313/blog/en/posts/how-to-learn-new-technology-with-stack-overflow/</guid>
			<description><![CDATA[%!s(<nil>)]]></description>
			<content type="html"><![CDATA[<h1 id="how-to-learn-new-technology-with-stack-overflow">How to Learn New Technology With Stack Overflow</h1>
<h2 id="introduction">Introduction</h2>
<p>Constant learning is important for anyone who works in technical fields, such as programming, software engineering, data science, or DevOps. Technical fields are very dynamic and new technologies (programming languages, frameworks, and libraries) are constantly emerging and becoming popular, and often replacing older alternatives. One has to spend a considerable amount of time learning (or at least watching the new trends) to stay on top of things. Therefore, it makes sense to pick up a couple of studying tips and tricks. There are many of them that promise to help with learning new things faster. In this post I&rsquo;ll describe how to use Stack Overflow to learn new things.</p>
<h2 id="how-could-stack-overflow-help-you-learn">How could Stack Overflow help you learn?</h2>
<p>There exists a concept of &ldquo;<em>Learning by teaching</em>&rdquo;, which is a method of learning, in which a student is made to learn some topic and then prepare a lecture to teach it to other students<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. One of the methods based on this concept was developed by a famous theoretical physicist Richard Feynman, and it is based on the following workflow:</p>
<ol>
<li>Learn the necessary minimum of information on a desired topic</li>
<li>Try to teach it to someone</li>
<li>Fill in the holes in your knowledge</li>
<li>Review what you&rsquo;ve learned and make your teaching easier to understand</li>
</ol>
<p>You can use this method with a pen and a paper, and try to write an explanation of a topic or a question. Then try to formulate several questions that your student may ask. Also, identify the parts of the explanation that are not clear enough. Then you should write a new, improved explanation. If you want to, you can repeat these steps a couple of times to improve your lecture as much as possible.</p>
<p>When you think about it, on Stack Overflow people ask questions and expect explanations on various technical topics. Moreover, there are many other Stack Exchange for various fields, such as physics, chemistry, language learning, game development, and other, where people ask things regarding these fields. This is a great opportunity to practice &ldquo;Learning by teaching&rdquo;, and helping other people at the same time. Many times the questions are fairly simple and answers can be found in the documentation. Sometimes you may also need to make a simple proof of concept and test it, but not always.</p>
<h2 id="how-to-learn-with-stack-overflow">How to learn with Stack Overflow?</h2>
<p>As mentioned before, you will learn by teaching (or more specifically by helping people).</p>
<ol>
<li>You need to create an account on the Stack Overflow (or specialized Stack Exchange, e.g. Math Stack Exchange)</li>
<li>When creating the profile select <em>Tags</em> related to the topic that you want to learn (e.g. <code>python</code>, <code>flask</code>, <code>jinja2</code>, <code>postgres</code>, <code>sql</code>), you may also want to add <em>Ignored tags</em></li>
<li>Read the Stack Overflow&rsquo;s <a href="https://stackoverflow.com/help/how-to-answer">tips on writing great answers</a></li>
<li>Once you have an idea of how a great answer looks like, go to the &ldquo;Questions&rdquo; section</li>
<li>Search for a &ldquo;good&rdquo; question that you may be able to answer (even though you&rsquo;ve used tags, Stack Overflow sometimes shows questions that are not relevant, so you may also need to use the search bar, and look up the topic manually)</li>
<li>Google keywords related to the question and try to find an answer in the documentation of specific technology (programming language, library, framework, &hellip;), sometimes you may need to do a couple of searches, or make a deeper dive into the concepts related to the question</li>
<li>Use your research to write a detailed answer. Add references, links, and if applicable a minimal working example (code that can be run and does what is required)</li>
<li>Check your answer and use Feynman&rsquo;s technique to improve the answer</li>
<li>Once you are satisfied with your answer, post it</li>
<li>Repeat steps 5-10 until you gain a solid grasp of the technology you are trying to learn</li>
</ol>
<h2 id="conclusions">Conclusions</h2>
<p>In this post I described how to use Stack Overflow to learn new things by &ldquo;Learning by teaching&rdquo; method. The entire promise behind this method is that you are answering question related to the technology you are learning. You will need to learn various concepts to formulate satisfactory answer. Moreover, you will be exposed to real-world problems experienced by other people using this technology.</p>
<p>The only downside is that there is a barrier to entry: You need to have some understanding of the domain, and be able to use online resources to seek the answers. However, it is great for people, who already have some experience and know how to search information online. Besides that, you will help to make the world a better place by helping some poor strangers.</p>
<h2 id="sources-">Sources 📚️</h2>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Wikipedia contributors. (2023). Learning by teaching. <em>Wikipedia</em>. <a href="https://en.wikipedia.org/wiki/Learning_by_teaching">https://en.wikipedia.org/wiki/Learning_by_teaching</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content>
		</item>
		
		<item>
			<title>Optimize Your brain</title>
			<link>http://localhost:1313/blog/en/posts/health_optimize_your_brain/</link>
			<pubDate>Sat, 01 Apr 2023 12:39:47 +0200</pubDate>
			
			<guid>http://localhost:1313/blog/en/posts/health_optimize_your_brain/</guid>
			<description><![CDATA[%!s(<nil>)]]></description>
			<content type="html"><![CDATA[<h1 id="optimize-your-brain">Optimize Your brain</h1>
<h2 id="introduction">Introduction</h2>
<p>People take care of their skin, their appearance and their fitness, but often neglect their brains. Brain health routine should be an important part of your day that can be used to combat cognitive decline with age, improve focus, reduce brain fog, and generally increase your performance. A popular youtuber Ali Abdaal in his video [1] sums up several evidence-based trick and tips that can help your brain, and I&rsquo;ve decided to make notes in a written form as a reference.</p>
<h2 id="food">Food</h2>
<p>What we eat has a big impact on our health in general, and when it comes to brain, it&rsquo;s no different. In the average adult human, the brain represents only about 2% of the body weight, but despite its small size it accounts for about 20% of the oxygen and calories consumed by our bodies. Our brains and guts are connected and they constantly communicate. Therefore, the first thing we should do to improve our brain health is to improve our diets.</p>
<p>What to avoid? The so-called Western diet, which is high in fat and refined sugar, reduced complex carbohydrate and fiber intake is a large and negative shift from older diets, which were high in complex carbohydrates and fiber, and it is basically a poison for our brains - it is detrimental to the brain, impairs cognition, and increases AD pathologies. Moreover it leads to increased risk of cardiovascular diseases and obesity.</p>
<p>The Mediterranean diet composed of polyunsaturated fatty acids, polyphenols, and antioxydants is considered to be neuroprotective. It is also linked to other health benefits, such as reducing risk of diabetes and cancer, improved memory, lower risk of dementia, and other neurodegenerative issues.</p>
<p><strong>Things to avoid</strong></p>
<ul>
<li>Highly processed food</li>
<li>Sugars, sugary drinks and sweets</li>
</ul>
<p><strong>Things to eat</strong></p>
<ul>
<li>Vegetables and leafy greens (especially spinach, kale, beet and turnip tops, chard and collards when in season) - 90% to 100% of diet should be plant-based</li>
<li>Pickled and dried vegetables (off season) - e.g. beans, greens, sweet potatoes, whole grains, fruit, nuts and seeds</li>
<li>Olive oil (increases good cholesterol, and lowers bad cholesterol)</li>
<li>Fish</li>
<li>Lentils</li>
<li>Tofu</li>
<li>Chickpeas</li>
<li>Eggs</li>
<li>Oatmeal</li>
<li>Avocados</li>
<li>Plant-based foods</li>
</ul>
<p><strong>Supplements</strong></p>
<ul>
<li>If you can not get all your nutrients from the Mediterranean diet</li>
<li>Omega 3 Oils</li>
<li>Key vitamins, such as A, B Complex, C, D, E, etc.</li>
</ul>
<h2 id="body">Body</h2>
<p>Body and brain affect each other in ways which can be surprising. Among humans, regular exercise has a beneficial impact on depression, quality of sleep, and cognitive function. Basically, the exercise positively changes the structure of your brain.</p>
<p>This happens because of the protein called BDNF (Brain-derived Neurotrophic Factor), which is involved in key brain functions such as learning, memory, and higher thinking. It also modulates pathways responsible for the structure of the brain. Some studies shown increased levels of BDNF and other growth factors, which stimulate neurogenesis, increase resistance to brain insult and improve learning and mental performance.</p>
<p>The amount of produced BDNF is a function of volume (intensity + duration + frequency of activity). It also turns out that open-skills (such as badminton, football, or other sports) increase BDNF levels more than closed-skills exercises (e.g. running, or some other repetitive exercise), probably because open-skill activities require more attention to face ever-changing situations, and possibly because they are more enjoyable.</p>
<p>So it is a really good idea to move and exercise.</p>
<h2 id="sleep">Sleep</h2>
<p>Continued sleep deprivation leads to various deficiencies. Not only it makes you feel terrible and sluggish, it also increases risk of obesity, diabetes, cardiovascular disease, depressions, and even early death. At a more advanced level, sleep deprivation can over-stimulate parts of the brain and even lead to permanent brain damage and negatively affects your ability to adapt to new situations. Most sleep experts agree that the high quality sleep is the best single thing you can do to improve your performance.</p>
<h2 id="exercising-the-mind">Exercising the Mind</h2>
<p>You can (and should) train your mind, just like your body. Especially at older age.</p>
<p>In case of damage, brain can reorganize and fix itself, even in adulthood. This ability is called &ldquo;neuroplasticity&rdquo; and it is defined as an ability of neuronal networks in the brain to change through the development and organization of neural circuits. In other words, it can rewire itself.</p>
<p>This can make a difference. The way you can trigger the neuroplasticity at any age is by challenging yourself and your brain. This can be done using brain games, musical training, and learning languages. These activities lead to improved attention, memory, increased neural connectivity, and processing speed. Some studies even claimed the reduced risk of cognitive decline for older adults in the long term.</p>
<p>Another thing that can decrease risk of dementia and cognitive decline is continuous learning. So, maybe read a book, or work on some project that requires you to learn new things.</p>
<h2 id="lifestyle">Lifestyle</h2>
<p>The healthy lifestyle is built on top of morning routines, diets, and healthy habits. You can either do healthy things or avoid unhealthy ones. Of course, you can try to do more activities or habits that have positive benefits, or you can avoid ones that are not good for you. For example, alcohol is a very common substance that is present in the lives of westerners, but nobody questions it&rsquo;s effect on health. A 2018 study found that alcohol use was biggest factor for dementia. Even one drink per day can allegedly shrink your brain. Complete abstinence would be perfect, but you will get the benefits even if you reduce drinking to 1-2 drinks per week.</p>
<p>However, there is some evidence that suggest positive benefits of red wine (in moderation) on your heart. The substances such as resveratrol, a substance that can be found in red wine, and antioxidants may help prevent coronary artery disease that leads to heart attacks. Red wine is also fairly common in Mediterranean.</p>
<p>The last thing that seems to be very important are social interactions. Humans are after all social animals, and being social, especially at older age, can reduce the risk of dementia and cognitive decline. Hang out with family, go on a date, party with friends, etc.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Taking care of brain health is important for improving the general quality of life and preventing mental deterioration in later age. In this post I&rsquo;ve summed up general strategies that positively affect brain health. They can be summarized as: eat healthy food (Mediterranean cuisine), perform some physical activity (frequently), sleep well, train your mind, quit/reduce alcohol consumption, and have a healthy lifestyle with a lot of quality social interactions.</p>
<h2 id="sources-">Sources 📚️</h2>
<ol>
<li><a href="https://youtu.be/n2czIPRE0Nc">&ldquo;How to Optimise Your Brain - An Evidence-Based Guide&rdquo; - Ali Abdaal&rsquo;s video</a></li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>Adding Math Support to Hugo</title>
			<link>http://localhost:1313/blog/en/posts/adding-math-support-to-hugo/</link>
			<pubDate>Sat, 01 Apr 2023 11:45:03 +0200</pubDate>
			
			<guid>http://localhost:1313/blog/en/posts/adding-math-support-to-hugo/</guid>
			<description><![CDATA[%!s(<nil>)]]></description>
			<content type="html"><![CDATA[<h1 id="adding-math-support-to-hugo">Adding Math Support to Hugo</h1>
<h2 id="introduction">Introduction</h2>
<p>If you are a scientist who wants to share their research in a form of a blog post or a STEM student, who wants to convert their notes with equations into a good looking HTML, you may need to somehow render math blocks on the web page. One of the libraries that can help with this task is <a href="https://www.mathjax.org/">MathJax</a>. In this post I describe how I added Math support to my template with MathJax. Alternative to MathJax, which isn&rsquo;t discussed in this post, is <a href="https://katex.org/docs/autorender.html">KaTeX</a>.</p>
<h2 id="how-to">How to</h2>
<p>You can create a Hugo website with:</p>
<pre tabindex="0"><code>hugo new site my-blog
cd my-blog
git init
</code></pre><p>I recommend to fork the theme as described in this <a href="https://www.mrnice.dev/posts/how-to-add-math-expressions-to-hugo-blog-the-shortest-guide-possible/">guide</a>, but it isn&rsquo;t absolutely necessary. Add the theme (the forked one or the original) with:</p>
<pre tabindex="0"><code>git submodule add https://github.com/&lt;repository&gt;/&lt;theme&gt; themes/&lt;theme&gt;
echo &#34;theme = &#39;&lt;theme&gt;&#39;&#34; &gt;&gt; config.toml
</code></pre><p>Create a simple post with equation for testing:</p>
<pre tabindex="0"><code>hugo new posts/testing-math.md
</code></pre><p>Open the file and add the math block:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-markdown" data-lang="markdown"><span style="display:flex;"><span># Testing Math
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="font-weight:bold">**Mass–Energy Equivalence**</span>
</span></span><span style="display:flex;"><span>$$
</span></span><span style="display:flex;"><span>E = mc^2
</span></span><span style="display:flex;"><span>$$
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="font-weight:bold">**Einstein Field Equations**</span>
</span></span><span style="display:flex;"><span>$$
</span></span><span style="display:flex;"><span>R_{\mu\nu} - \frac{D}{2}Rg_{\mu\nu} - \Lambda g_{\mu\nu} = -\kappa T_{\mu\nu}
</span></span><span style="display:flex;"><span>$$
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="font-weight:bold">**Schrödinger Equation**</span>
</span></span><span style="display:flex;"><span>$$
</span></span><span style="display:flex;"><span>i \hbar\frac{d}{dt}\ket{\psi(t)} = \hat{H}\ket{\psi(t)}
</span></span><span style="display:flex;"><span>$$
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="font-weight:bold">**Time-dependent Schrödinger Equation**</span>
</span></span><span style="display:flex;"><span>$$
</span></span><span style="display:flex;"><span>\hat{H} \psi = E \psi
</span></span><span style="display:flex;"><span>$$
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="font-weight:bold">**Hamiltonian of the Heisenberg Model in an External Magnetic Field**</span>
</span></span><span style="display:flex;"><span>$$
</span></span><span style="display:flex;"><span>\hat{H} = \sum_{i,j} \hat{s_i}\hat{s_j} - h\sum_{i}\hat{s_i}
</span></span><span style="display:flex;"><span>$$
</span></span></code></pre></div><p>You need to modify the layout and add MathJax script tag. You can add it into <code>themes/&lt;theme&gt;/layouts/_default/baseof.html</code> if you want to enable math for all pages. But you can include JavaScript in other files if you want to (<code>themes/&lt;theme&gt;/layouts/_default/header.html</code>, <code>themes/&lt;theme&gt;/layouts/_default/footer.html</code> or <code>themes/&lt;theme&gt;/layouts/_default/single.html</code>). The code itself goes into the <code>&lt;head&gt;</code> tag, and it is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span><span style="color:#75715e">&lt;!-- This part includes the Javascript file --&gt;</span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text/javascript&#34;</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;MathJax-script&#34;</span> <span style="color:#a6e22e">async</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js&#34;</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">script</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">&lt;!-- this part configures it --&gt;</span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text/x-mathjax-config&#34;</span>&gt;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">MathJax</span>.<span style="color:#a6e22e">Hub</span>.<span style="color:#a6e22e">Config</span>({
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">tex2jax</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">inlineMath</span><span style="color:#f92672">:</span> [[<span style="color:#e6db74">&#39;\\(&#39;</span>,<span style="color:#e6db74">&#39;\\)&#39;</span>]],
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">displayMath</span><span style="color:#f92672">:</span> [[<span style="color:#e6db74">&#39;$$&#39;</span>,<span style="color:#e6db74">&#39;$$&#39;</span>], [<span style="color:#e6db74">&#39;\[&#39;</span>,<span style="color:#e6db74">&#39;\]&#39;</span>]],
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">processEscapes</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">processEnvironments</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">skipTags</span><span style="color:#f92672">:</span> [<span style="color:#e6db74">&#39;script&#39;</span>, <span style="color:#e6db74">&#39;noscript&#39;</span>, <span style="color:#e6db74">&#39;style&#39;</span>, <span style="color:#e6db74">&#39;textarea&#39;</span>, <span style="color:#e6db74">&#39;pre&#39;</span>],
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">TeX</span><span style="color:#f92672">:</span> { <span style="color:#a6e22e">equationNumbers</span><span style="color:#f92672">:</span> { <span style="color:#a6e22e">autoNumber</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;AMS&#34;</span> },
</span></span><span style="display:flex;"><span>         <span style="color:#a6e22e">extensions</span><span style="color:#f92672">:</span> [<span style="color:#e6db74">&#34;AMSmath.js&#34;</span>, <span style="color:#e6db74">&#34;AMSsymbols.js&#34;</span>] }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>});
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">script</span>&gt;
</span></span></code></pre></div><p>If you&rsquo;ve forked the theme, you can commit changes, otherwise, it probably isn&rsquo;t the best idea, since the theme is used by other people.</p>
<h2 id="testing-changes">Testing Changes</h2>
<p>Now you can test if it works. Start the server:</p>
<pre tabindex="0"><code>hugo server --buildDrafts
</code></pre><p>And go to <code>http://localhost:1313/</code> in your browser.</p>
<p>If you did everything correctly, you should see the equations rendered as:</p>
<p><strong>Mass–Energy Equivalence</strong>
</p>
$$
E = mc^2
$$
<p><strong>Einstein Field Equations</strong>
</p>
$$
R_{\mu\nu} - \frac{D}{2}Rg_{\mu\nu} - \Lambda g_{\mu\nu} = -\kappa T_{\mu\nu}
$$
<p><strong>Schrödinger Equation</strong>
</p>
$$
i \hbar\frac{d}{dt}\ket{\psi(t)} = \hat{H}\ket{\psi(t)}
$$
<p><strong>Time-dependent Schrödinger Equation</strong>
</p>
$$
\hat{H} \psi = E \psi
$$
<p><strong>Hamiltonian of the Heisenberg Model in an External Magnetic Field</strong>
</p>
$$
\hat{H} = \sum_{i,j} \hat{s_i}\hat{s_j} - h\sum_{i}\hat{s_i}
$$
<h2 id="conclusion">Conclusion</h2>
<p>In this post I&rsquo;ve showed you how to add a math support to your Hugo website with MathJax Javascript library.</p>
]]></content>
		</item>
		
		<item>
			<title>Github Markdown Emoji Reference</title>
			<link>http://localhost:1313/blog/en/posts/emoji/</link>
			<pubDate>Tue, 28 Mar 2023 16:54:44 +0100</pubDate>
			
			<guid>http://localhost:1313/blog/en/posts/emoji/</guid>
			<description><![CDATA[Github flavor of Markdown let's you work with emojis in your Markdown documents easily. In this post you can find a handy reference table with the supported emojis and their shortcodes.]]></description>
			<content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>You may have noticed that many <code>README</code> files on Github are enhanced with the use of emojis. Github flavor of Markdown adds special shortcodes that let you easily work with emojis in your Markdown documents.</p>
<p>In general, there are two approaches when it comes to adding emojis:</p>
<ol>
<li>Copy-Paste a unicode character for the emoji you want (E.g. from this <a href="https://emojipedia.org/">website</a>)</li>
<li>Use Github Markdown shortcode for the emoji</li>
</ol>
<p>Both approaches have their pros and cons. When you copy an emoji, you can see it in the plain text, but you need to have unicode encoding.</p>
<p>On the other hand, shortcodes make the document less readable, and some parsers don&rsquo;t support them.</p>
<p>No mather which option you choose, I recommend to use emojis sparingly to avoid making an impression of a kid.</p>
<h2 id="table-with-emojis">Table with Emojis</h2>
<p>Below is a handy reference tables with the Github Markdown supported emojis.</p>
<table>
<thead>
<tr>
<th style="text-align:center">Emoji</th>
<th style="text-align:center">Markdown Shortode</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>People</strong></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">😄</td>
<td style="text-align:center"><code>:smile: </code></td>
</tr>
<tr>
<td style="text-align:center">😆</td>
<td style="text-align:center"><code>:laughing:</code></td>
</tr>
<tr>
<td style="text-align:center">😊</td>
<td style="text-align:center"><code>:blush:</code></td>
</tr>
<tr>
<td style="text-align:center">😃</td>
<td style="text-align:center"><code>:smiley:</code></td>
</tr>
<tr>
<td style="text-align:center">☺️</td>
<td style="text-align:center"><code>:relaxed:</code></td>
</tr>
<tr>
<td style="text-align:center">😏</td>
<td style="text-align:center"><code>:smirk:</code></td>
</tr>
<tr>
<td style="text-align:center">😍</td>
<td style="text-align:center"><code>:heart_eyes:</code></td>
</tr>
<tr>
<td style="text-align:center">😘</td>
<td style="text-align:center"><code>:kissing_heart:</code></td>
</tr>
<tr>
<td style="text-align:center">😚</td>
<td style="text-align:center"><code>:kissing_closed_eyes:</code></td>
</tr>
<tr>
<td style="text-align:center">😳</td>
<td style="text-align:center"><code>:flushed:</code></td>
</tr>
<tr>
<td style="text-align:center">😌</td>
<td style="text-align:center"><code>:relieved:</code></td>
</tr>
<tr>
<td style="text-align:center">😆</td>
<td style="text-align:center"><code>:satisfied:</code></td>
</tr>
<tr>
<td style="text-align:center">😁</td>
<td style="text-align:center"><code>:grin:</code></td>
</tr>
<tr>
<td style="text-align:center">😉</td>
<td style="text-align:center"><code>:wink:</code></td>
</tr>
<tr>
<td style="text-align:center">😜</td>
<td style="text-align:center"><code>:stuck_out_tongue_winking_eye:</code></td>
</tr>
<tr>
<td style="text-align:center">😝</td>
<td style="text-align:center"><code>:stuck_out_tongue_closed_eyes:</code></td>
</tr>
<tr>
<td style="text-align:center">😀</td>
<td style="text-align:center"><code>:grinning:</code></td>
</tr>
<tr>
<td style="text-align:center">😗</td>
<td style="text-align:center"><code>:kissing:</code></td>
</tr>
<tr>
<td style="text-align:center">😙</td>
<td style="text-align:center"><code>:kissing_smiling_eyes:</code></td>
</tr>
<tr>
<td style="text-align:center">😛</td>
<td style="text-align:center"><code>:stuck_out_tongue:</code></td>
</tr>
<tr>
<td style="text-align:center">😴</td>
<td style="text-align:center"><code>:sleeping:</code></td>
</tr>
<tr>
<td style="text-align:center">😟</td>
<td style="text-align:center"><code>:worried:</code></td>
</tr>
<tr>
<td style="text-align:center">😦</td>
<td style="text-align:center"><code>:frowning:</code></td>
</tr>
<tr>
<td style="text-align:center">😧</td>
<td style="text-align:center"><code>:anguished:</code></td>
</tr>
<tr>
<td style="text-align:center">😮</td>
<td style="text-align:center"><code>:open_mouth:</code></td>
</tr>
<tr>
<td style="text-align:center">😬</td>
<td style="text-align:center"><code>:grimacing:</code></td>
</tr>
<tr>
<td style="text-align:center">😕</td>
<td style="text-align:center"><code>:confused:</code></td>
</tr>
<tr>
<td style="text-align:center">😯</td>
<td style="text-align:center"><code>:hushed:</code></td>
</tr>
<tr>
<td style="text-align:center">😑</td>
<td style="text-align:center"><code>:expressionless:</code></td>
</tr>
<tr>
<td style="text-align:center">😒</td>
<td style="text-align:center"><code>:unamused:</code></td>
</tr>
<tr>
<td style="text-align:center">😅</td>
<td style="text-align:center"><code>:sweat_smile:</code></td>
</tr>
<tr>
<td style="text-align:center">😓</td>
<td style="text-align:center"><code>:sweat:</code></td>
</tr>
<tr>
<td style="text-align:center">😥</td>
<td style="text-align:center"><code>:disappointed_relieved:</code></td>
</tr>
<tr>
<td style="text-align:center">😩</td>
<td style="text-align:center"><code>:weary:</code></td>
</tr>
<tr>
<td style="text-align:center">😔</td>
<td style="text-align:center"><code>:pensive:</code></td>
</tr>
<tr>
<td style="text-align:center">😞</td>
<td style="text-align:center"><code>:disappointed:</code></td>
</tr>
<tr>
<td style="text-align:center">😖</td>
<td style="text-align:center"><code>:confounded:</code></td>
</tr>
<tr>
<td style="text-align:center">😨</td>
<td style="text-align:center"><code>:fearful:</code></td>
</tr>
<tr>
<td style="text-align:center">😰</td>
<td style="text-align:center"><code>:cold_sweat:</code></td>
</tr>
<tr>
<td style="text-align:center">😣</td>
<td style="text-align:center"><code>:persevere:</code></td>
</tr>
<tr>
<td style="text-align:center">😢</td>
<td style="text-align:center"><code>:cry:</code></td>
</tr>
<tr>
<td style="text-align:center">😭</td>
<td style="text-align:center"><code>:sob:</code></td>
</tr>
<tr>
<td style="text-align:center">😂</td>
<td style="text-align:center"><code>:joy:</code></td>
</tr>
<tr>
<td style="text-align:center">😲</td>
<td style="text-align:center"><code>:astonished:</code></td>
</tr>
<tr>
<td style="text-align:center">😱</td>
<td style="text-align:center"><code>:scream:</code></td>
</tr>
<tr>
<td style="text-align:center">😫</td>
<td style="text-align:center"><code>:tired_face:</code></td>
</tr>
<tr>
<td style="text-align:center">😠</td>
<td style="text-align:center"><code>:angry:</code></td>
</tr>
<tr>
<td style="text-align:center">😡</td>
<td style="text-align:center"><code>:rage:</code></td>
</tr>
<tr>
<td style="text-align:center">😤</td>
<td style="text-align:center"><code>:triumph:</code></td>
</tr>
<tr>
<td style="text-align:center">😪</td>
<td style="text-align:center"><code>:sleepy:</code></td>
</tr>
<tr>
<td style="text-align:center">😋</td>
<td style="text-align:center"><code>:yum:</code></td>
</tr>
<tr>
<td style="text-align:center">😷</td>
<td style="text-align:center"><code>:mask:</code></td>
</tr>
<tr>
<td style="text-align:center">😎</td>
<td style="text-align:center"><code>:sunglasses:</code></td>
</tr>
<tr>
<td style="text-align:center">😵</td>
<td style="text-align:center"><code>:dizzy_face:</code></td>
</tr>
<tr>
<td style="text-align:center">👿</td>
<td style="text-align:center"><code>:imp:</code></td>
</tr>
<tr>
<td style="text-align:center">😈</td>
<td style="text-align:center"><code>:smiling_imp:</code></td>
</tr>
<tr>
<td style="text-align:center">😐</td>
<td style="text-align:center"><code>:neutral_face:</code></td>
</tr>
<tr>
<td style="text-align:center">😶</td>
<td style="text-align:center"><code>:no_mouth:</code></td>
</tr>
<tr>
<td style="text-align:center">😇</td>
<td style="text-align:center"><code>:innocent:</code></td>
</tr>
<tr>
<td style="text-align:center">👽</td>
<td style="text-align:center"><code>:alien:</code></td>
</tr>
<tr>
<td style="text-align:center">💛</td>
<td style="text-align:center"><code>:yellow_heart:</code></td>
</tr>
<tr>
<td style="text-align:center">💙</td>
<td style="text-align:center"><code>:blue_heart:</code></td>
</tr>
<tr>
<td style="text-align:center">💜</td>
<td style="text-align:center"><code>:purple_heart:</code></td>
</tr>
<tr>
<td style="text-align:center">❤️</td>
<td style="text-align:center"><code>:heart:</code></td>
</tr>
<tr>
<td style="text-align:center">💚</td>
<td style="text-align:center"><code>:green_heart:</code></td>
</tr>
<tr>
<td style="text-align:center">💔</td>
<td style="text-align:center"><code>:broken_heart:</code></td>
</tr>
<tr>
<td style="text-align:center">💓</td>
<td style="text-align:center"><code>:heartbeat:</code></td>
</tr>
<tr>
<td style="text-align:center">💗</td>
<td style="text-align:center"><code>:heartpulse:</code></td>
</tr>
<tr>
<td style="text-align:center">💕</td>
<td style="text-align:center"><code>:two_hearts:</code></td>
</tr>
<tr>
<td style="text-align:center">💞</td>
<td style="text-align:center"><code>:revolving_hearts:</code></td>
</tr>
<tr>
<td style="text-align:center">💘</td>
<td style="text-align:center"><code>:cupid:</code></td>
</tr>
<tr>
<td style="text-align:center">💖</td>
<td style="text-align:center"><code>:sparkling_heart:</code></td>
</tr>
<tr>
<td style="text-align:center">✨</td>
<td style="text-align:center"><code>:sparkles:</code></td>
</tr>
<tr>
<td style="text-align:center">⭐</td>
<td style="text-align:center"><code>:star:</code></td>
</tr>
<tr>
<td style="text-align:center">🌟</td>
<td style="text-align:center"><code>:star2:</code></td>
</tr>
<tr>
<td style="text-align:center">💫</td>
<td style="text-align:center"><code>:dizzy:</code></td>
</tr>
<tr>
<td style="text-align:center">💥</td>
<td style="text-align:center"><code>:boom:</code></td>
</tr>
<tr>
<td style="text-align:center">💥</td>
<td style="text-align:center"><code>:collision:</code></td>
</tr>
<tr>
<td style="text-align:center">💢</td>
<td style="text-align:center"><code>:anger:</code></td>
</tr>
<tr>
<td style="text-align:center">❗</td>
<td style="text-align:center"><code>:exclamation:</code></td>
</tr>
<tr>
<td style="text-align:center">❓</td>
<td style="text-align:center"><code>:question:</code></td>
</tr>
<tr>
<td style="text-align:center">❕</td>
<td style="text-align:center"><code>:grey_exclamation:</code></td>
</tr>
<tr>
<td style="text-align:center">❔</td>
<td style="text-align:center"><code>:grey_question:</code></td>
</tr>
<tr>
<td style="text-align:center">💤</td>
<td style="text-align:center"><code>:zzz:</code></td>
</tr>
<tr>
<td style="text-align:center">💨</td>
<td style="text-align:center"><code>:dash:</code></td>
</tr>
<tr>
<td style="text-align:center">💦</td>
<td style="text-align:center"><code>:sweat_drops:</code></td>
</tr>
<tr>
<td style="text-align:center">🎶</td>
<td style="text-align:center"><code>:notes:</code></td>
</tr>
<tr>
<td style="text-align:center">🎵</td>
<td style="text-align:center"><code>:musical_note:</code></td>
</tr>
<tr>
<td style="text-align:center">🔥</td>
<td style="text-align:center"><code>:fire:</code></td>
</tr>
<tr>
<td style="text-align:center">💩</td>
<td style="text-align:center"><code>:hankey:</code></td>
</tr>
<tr>
<td style="text-align:center">💩</td>
<td style="text-align:center"><code>:poop:</code></td>
</tr>
<tr>
<td style="text-align:center">💩</td>
<td style="text-align:center"><code>:shit:</code></td>
</tr>
<tr>
<td style="text-align:center">👍</td>
<td style="text-align:center"><code>:+1:</code></td>
</tr>
<tr>
<td style="text-align:center">👍</td>
<td style="text-align:center"><code>:thumbsup:</code></td>
</tr>
<tr>
<td style="text-align:center">👎</td>
<td style="text-align:center"><code>:-1:</code></td>
</tr>
<tr>
<td style="text-align:center">👎</td>
<td style="text-align:center"><code>:thumbsdown:</code></td>
</tr>
<tr>
<td style="text-align:center">👌</td>
<td style="text-align:center"><code>:ok_hand:</code></td>
</tr>
<tr>
<td style="text-align:center">👊</td>
<td style="text-align:center"><code>:punch:</code></td>
</tr>
<tr>
<td style="text-align:center">👊</td>
<td style="text-align:center"><code>:facepunch:</code></td>
</tr>
<tr>
<td style="text-align:center">✊</td>
<td style="text-align:center"><code>:fist:</code></td>
</tr>
<tr>
<td style="text-align:center">✌️</td>
<td style="text-align:center"><code>:v:</code></td>
</tr>
<tr>
<td style="text-align:center">👋</td>
<td style="text-align:center"><code>:wave:</code></td>
</tr>
<tr>
<td style="text-align:center">✋</td>
<td style="text-align:center"><code>:hand:</code></td>
</tr>
<tr>
<td style="text-align:center">✋</td>
<td style="text-align:center"><code>:raised_hand:</code></td>
</tr>
<tr>
<td style="text-align:center">👐</td>
<td style="text-align:center"><code>:open_hands:</code></td>
</tr>
<tr>
<td style="text-align:center">☝️</td>
<td style="text-align:center"><code>:point_up:</code></td>
</tr>
<tr>
<td style="text-align:center">👇</td>
<td style="text-align:center"><code>:point_down:</code></td>
</tr>
<tr>
<td style="text-align:center">👈</td>
<td style="text-align:center"><code>:point_left:</code></td>
</tr>
<tr>
<td style="text-align:center">👉</td>
<td style="text-align:center"><code>:point_right:</code></td>
</tr>
<tr>
<td style="text-align:center">🙌</td>
<td style="text-align:center"><code>:raised_hands:</code></td>
</tr>
<tr>
<td style="text-align:center">🙏</td>
<td style="text-align:center"><code>:pray:</code></td>
</tr>
<tr>
<td style="text-align:center">👆</td>
<td style="text-align:center"><code>:point_up_2:</code></td>
</tr>
<tr>
<td style="text-align:center">👏</td>
<td style="text-align:center"><code>:clap:</code></td>
</tr>
<tr>
<td style="text-align:center">💪</td>
<td style="text-align:center"><code>:muscle:</code></td>
</tr>
<tr>
<td style="text-align:center">🤘</td>
<td style="text-align:center"><code>:metal:</code></td>
</tr>
<tr>
<td style="text-align:center">🖕</td>
<td style="text-align:center"><code>:fu:</code></td>
</tr>
<tr>
<td style="text-align:center">🚶</td>
<td style="text-align:center"><code>:walking:</code></td>
</tr>
<tr>
<td style="text-align:center">🏃</td>
<td style="text-align:center"><code>:runner:</code></td>
</tr>
<tr>
<td style="text-align:center">🏃</td>
<td style="text-align:center"><code>:running:</code></td>
</tr>
<tr>
<td style="text-align:center">👫</td>
<td style="text-align:center"><code>:couple:</code></td>
</tr>
<tr>
<td style="text-align:center">👪</td>
<td style="text-align:center"><code>:family:</code></td>
</tr>
<tr>
<td style="text-align:center">👬</td>
<td style="text-align:center"><code>:two_men_holding_hands:</code></td>
</tr>
<tr>
<td style="text-align:center">👭</td>
<td style="text-align:center"><code>:two_women_holding_hands:</code></td>
</tr>
<tr>
<td style="text-align:center">💃</td>
<td style="text-align:center"><code>:dancer:</code></td>
</tr>
<tr>
<td style="text-align:center">👯</td>
<td style="text-align:center"><code>:dancers:</code></td>
</tr>
<tr>
<td style="text-align:center">🙆‍♀️</td>
<td style="text-align:center"><code>:ok_woman:</code></td>
</tr>
<tr>
<td style="text-align:center">🙅</td>
<td style="text-align:center"><code>:no_good:</code></td>
</tr>
<tr>
<td style="text-align:center">💁</td>
<td style="text-align:center"><code>:information_desk_person:</code></td>
</tr>
<tr>
<td style="text-align:center">🙋</td>
<td style="text-align:center"><code>:raising_hand:</code></td>
</tr>
<tr>
<td style="text-align:center">👰‍♀️</td>
<td style="text-align:center"><code>:bride_with_veil:</code></td>
</tr>
<tr>
<td style="text-align:center">🙇</td>
<td style="text-align:center"><code>:bow:</code></td>
</tr>
<tr>
<td style="text-align:center">💏</td>
<td style="text-align:center"><code>:couplekiss:</code></td>
</tr>
<tr>
<td style="text-align:center">💑</td>
<td style="text-align:center"><code>:couple_with_heart:</code></td>
</tr>
<tr>
<td style="text-align:center">💆</td>
<td style="text-align:center"><code>:massage:</code></td>
</tr>
<tr>
<td style="text-align:center">💇</td>
<td style="text-align:center"><code>:haircut:</code></td>
</tr>
<tr>
<td style="text-align:center">💅</td>
<td style="text-align:center"><code>:nail_care:</code></td>
</tr>
<tr>
<td style="text-align:center">👦</td>
<td style="text-align:center"><code>:boy:</code></td>
</tr>
<tr>
<td style="text-align:center">👧</td>
<td style="text-align:center"><code>:girl:</code></td>
</tr>
<tr>
<td style="text-align:center">👩</td>
<td style="text-align:center"><code>:woman:</code></td>
</tr>
<tr>
<td style="text-align:center">👨</td>
<td style="text-align:center"><code>:man:</code></td>
</tr>
<tr>
<td style="text-align:center">👶</td>
<td style="text-align:center"><code>:baby:</code></td>
</tr>
<tr>
<td style="text-align:center">👵</td>
<td style="text-align:center"><code>:older_woman:</code></td>
</tr>
<tr>
<td style="text-align:center">👴</td>
<td style="text-align:center"><code>:older_man:</code></td>
</tr>
<tr>
<td style="text-align:center">👲</td>
<td style="text-align:center"><code>:man_with_gua_pi_mao:</code></td>
</tr>
<tr>
<td style="text-align:center">👳‍♂️</td>
<td style="text-align:center"><code>:man_with_turban:</code></td>
</tr>
<tr>
<td style="text-align:center">👷</td>
<td style="text-align:center"><code>:construction_worker:</code></td>
</tr>
<tr>
<td style="text-align:center">👮</td>
<td style="text-align:center"><code>:cop:</code></td>
</tr>
<tr>
<td style="text-align:center">👼</td>
<td style="text-align:center"><code>:angel:</code></td>
</tr>
<tr>
<td style="text-align:center">👸</td>
<td style="text-align:center"><code>:princess:</code></td>
</tr>
<tr>
<td style="text-align:center">😺</td>
<td style="text-align:center"><code>:smiley_cat:</code></td>
</tr>
<tr>
<td style="text-align:center">😸</td>
<td style="text-align:center"><code>:smile_cat:</code></td>
</tr>
<tr>
<td style="text-align:center">😻</td>
<td style="text-align:center"><code>:heart_eyes_cat:</code></td>
</tr>
<tr>
<td style="text-align:center">😽</td>
<td style="text-align:center"><code>:kissing_cat:</code></td>
</tr>
<tr>
<td style="text-align:center">😼</td>
<td style="text-align:center"><code>:smirk_cat:</code></td>
</tr>
<tr>
<td style="text-align:center">🙀</td>
<td style="text-align:center"><code>:scream_cat:</code></td>
</tr>
<tr>
<td style="text-align:center">😿</td>
<td style="text-align:center"><code>:crying_cat_face:</code></td>
</tr>
<tr>
<td style="text-align:center">😹</td>
<td style="text-align:center"><code>:joy_cat:</code></td>
</tr>
<tr>
<td style="text-align:center">😾</td>
<td style="text-align:center"><code>:pouting_cat:</code></td>
</tr>
<tr>
<td style="text-align:center">👹</td>
<td style="text-align:center"><code>:japanese_ogre:</code></td>
</tr>
<tr>
<td style="text-align:center">👺</td>
<td style="text-align:center"><code>:japanese_goblin:</code></td>
</tr>
<tr>
<td style="text-align:center">🙈</td>
<td style="text-align:center"><code>:see_no_evil:</code></td>
</tr>
<tr>
<td style="text-align:center">🙉</td>
<td style="text-align:center"><code>:hear_no_evil:</code></td>
</tr>
<tr>
<td style="text-align:center">🙊</td>
<td style="text-align:center"><code>:speak_no_evil:</code></td>
</tr>
<tr>
<td style="text-align:center">💂‍♂️</td>
<td style="text-align:center"><code>:guardsman:</code></td>
</tr>
<tr>
<td style="text-align:center">💀</td>
<td style="text-align:center"><code>:skull:</code></td>
</tr>
<tr>
<td style="text-align:center">🐾</td>
<td style="text-align:center"><code>:feet:</code></td>
</tr>
<tr>
<td style="text-align:center">👄</td>
<td style="text-align:center"><code>:lips:</code></td>
</tr>
<tr>
<td style="text-align:center">💋</td>
<td style="text-align:center"><code>:kiss:</code></td>
</tr>
<tr>
<td style="text-align:center">💧</td>
<td style="text-align:center"><code>:droplet:</code></td>
</tr>
<tr>
<td style="text-align:center">👂</td>
<td style="text-align:center"><code>:ear:</code></td>
</tr>
<tr>
<td style="text-align:center">👀</td>
<td style="text-align:center"><code>:eyes:</code></td>
</tr>
<tr>
<td style="text-align:center">👃</td>
<td style="text-align:center"><code>:nose:</code></td>
</tr>
<tr>
<td style="text-align:center">👅</td>
<td style="text-align:center"><code>:tongue:</code></td>
</tr>
<tr>
<td style="text-align:center">💌</td>
<td style="text-align:center"><code>:love_letter:</code></td>
</tr>
<tr>
<td style="text-align:center">👤</td>
<td style="text-align:center"><code>:bust_in_silhouette:</code></td>
</tr>
<tr>
<td style="text-align:center">👥</td>
<td style="text-align:center"><code>:busts_in_silhouette:</code></td>
</tr>
<tr>
<td style="text-align:center">💬</td>
<td style="text-align:center"><code>:speech_balloon:</code></td>
</tr>
<tr>
<td style="text-align:center">💭</td>
<td style="text-align:center"><code>:thought_balloon:</code></td>
</tr>
<tr>
<td style="text-align:center"><strong>Nature</strong></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">☀️</td>
<td style="text-align:center"><code>:sunny:</code></td>
</tr>
<tr>
<td style="text-align:center">☔</td>
<td style="text-align:center"><code>:umbrella:</code></td>
</tr>
<tr>
<td style="text-align:center">☁️</td>
<td style="text-align:center"><code>:cloud:</code></td>
</tr>
<tr>
<td style="text-align:center">❄️</td>
<td style="text-align:center"><code>:snowflake:</code></td>
</tr>
<tr>
<td style="text-align:center">⛄</td>
<td style="text-align:center"><code>:snowman:</code></td>
</tr>
<tr>
<td style="text-align:center">⚡</td>
<td style="text-align:center"><code>:zap:</code></td>
</tr>
<tr>
<td style="text-align:center">🌀</td>
<td style="text-align:center"><code>:cyclone:</code></td>
</tr>
<tr>
<td style="text-align:center">🌁</td>
<td style="text-align:center"><code>:foggy:</code></td>
</tr>
<tr>
<td style="text-align:center">🌊</td>
<td style="text-align:center"><code>:ocean:</code></td>
</tr>
<tr>
<td style="text-align:center">🐱</td>
<td style="text-align:center"><code>:cat:</code></td>
</tr>
<tr>
<td style="text-align:center">🐶</td>
<td style="text-align:center"><code>:dog:</code></td>
</tr>
<tr>
<td style="text-align:center">🐭</td>
<td style="text-align:center"><code>:mouse:</code></td>
</tr>
<tr>
<td style="text-align:center">🐹</td>
<td style="text-align:center"><code>:hamster:</code></td>
</tr>
<tr>
<td style="text-align:center">🐰</td>
<td style="text-align:center"><code>:rabbit:</code></td>
</tr>
<tr>
<td style="text-align:center">🐺</td>
<td style="text-align:center"><code>:wolf:</code></td>
</tr>
<tr>
<td style="text-align:center">🐸</td>
<td style="text-align:center"><code>:frog:</code></td>
</tr>
<tr>
<td style="text-align:center">🐯</td>
<td style="text-align:center"><code>:tiger:</code></td>
</tr>
<tr>
<td style="text-align:center">🐨</td>
<td style="text-align:center"><code>:koala:</code></td>
</tr>
<tr>
<td style="text-align:center">🐻</td>
<td style="text-align:center"><code>:bear:</code></td>
</tr>
<tr>
<td style="text-align:center">🐷</td>
<td style="text-align:center"><code>:pig:</code></td>
</tr>
<tr>
<td style="text-align:center">🐽</td>
<td style="text-align:center"><code>:pig_nose:</code></td>
</tr>
<tr>
<td style="text-align:center">🐮</td>
<td style="text-align:center"><code>:cow:</code></td>
</tr>
<tr>
<td style="text-align:center">🐗</td>
<td style="text-align:center"><code>:boar:</code></td>
</tr>
<tr>
<td style="text-align:center">🐵</td>
<td style="text-align:center"><code>:monkey_face:</code></td>
</tr>
<tr>
<td style="text-align:center">🐒</td>
<td style="text-align:center"><code>:monkey:</code></td>
</tr>
<tr>
<td style="text-align:center">🐴</td>
<td style="text-align:center"><code>:horse:</code></td>
</tr>
<tr>
<td style="text-align:center">🐎</td>
<td style="text-align:center"><code>:racehorse:</code></td>
</tr>
<tr>
<td style="text-align:center">🐫</td>
<td style="text-align:center"><code>:camel:</code></td>
</tr>
<tr>
<td style="text-align:center">🐑</td>
<td style="text-align:center"><code>:sheep:</code></td>
</tr>
<tr>
<td style="text-align:center">🐘</td>
<td style="text-align:center"><code>:elephant:</code></td>
</tr>
<tr>
<td style="text-align:center">🐼</td>
<td style="text-align:center"><code>:panda_face:</code></td>
</tr>
<tr>
<td style="text-align:center">🐍</td>
<td style="text-align:center"><code>:snake:</code></td>
</tr>
<tr>
<td style="text-align:center">🐦</td>
<td style="text-align:center"><code>:bird:</code></td>
</tr>
<tr>
<td style="text-align:center">🐤</td>
<td style="text-align:center"><code>:baby_chick:</code></td>
</tr>
<tr>
<td style="text-align:center">🐥</td>
<td style="text-align:center"><code>:hatched_chick:</code></td>
</tr>
<tr>
<td style="text-align:center">🐣</td>
<td style="text-align:center"><code>:hatching_chick:</code></td>
</tr>
<tr>
<td style="text-align:center">🐔</td>
<td style="text-align:center"><code>:chicken:</code></td>
</tr>
<tr>
<td style="text-align:center">🐧</td>
<td style="text-align:center"><code>:penguin:</code></td>
</tr>
<tr>
<td style="text-align:center">🐢</td>
<td style="text-align:center"><code>:turtle:</code></td>
</tr>
<tr>
<td style="text-align:center">🐛</td>
<td style="text-align:center"><code>:bug:</code></td>
</tr>
<tr>
<td style="text-align:center">🐝</td>
<td style="text-align:center"><code>:honeybee:</code></td>
</tr>
<tr>
<td style="text-align:center">🐜</td>
<td style="text-align:center"><code>:ant:</code></td>
</tr>
<tr>
<td style="text-align:center">🪲</td>
<td style="text-align:center"><code>:beetle:</code></td>
</tr>
<tr>
<td style="text-align:center">🐌</td>
<td style="text-align:center"><code>:snail:</code></td>
</tr>
<tr>
<td style="text-align:center">🐙</td>
<td style="text-align:center"><code>:octopus:</code></td>
</tr>
<tr>
<td style="text-align:center">🐠</td>
<td style="text-align:center"><code>:tropical_fish:</code></td>
</tr>
<tr>
<td style="text-align:center">🐟</td>
<td style="text-align:center"><code>:fish:</code></td>
</tr>
<tr>
<td style="text-align:center">🐳</td>
<td style="text-align:center"><code>:whale:</code></td>
</tr>
<tr>
<td style="text-align:center">🐋</td>
<td style="text-align:center"><code>:whale2:</code></td>
</tr>
<tr>
<td style="text-align:center">🐬</td>
<td style="text-align:center"><code>:dolphin:</code></td>
</tr>
<tr>
<td style="text-align:center">🐄</td>
<td style="text-align:center"><code>:cow2:</code></td>
</tr>
<tr>
<td style="text-align:center">🐏</td>
<td style="text-align:center"><code>:ram:</code></td>
</tr>
<tr>
<td style="text-align:center">🐀</td>
<td style="text-align:center"><code>:rat:</code></td>
</tr>
<tr>
<td style="text-align:center">🐃</td>
<td style="text-align:center"><code>:water_buffalo:</code></td>
</tr>
<tr>
<td style="text-align:center">🐅</td>
<td style="text-align:center"><code>:tiger2:</code></td>
</tr>
<tr>
<td style="text-align:center">🐇</td>
<td style="text-align:center"><code>:rabbit2:</code></td>
</tr>
<tr>
<td style="text-align:center">🐉</td>
<td style="text-align:center"><code>:dragon:</code></td>
</tr>
<tr>
<td style="text-align:center">🐐</td>
<td style="text-align:center"><code>:goat:</code></td>
</tr>
<tr>
<td style="text-align:center">🐓</td>
<td style="text-align:center"><code>:rooster:</code></td>
</tr>
<tr>
<td style="text-align:center">🐕</td>
<td style="text-align:center"><code>:dog2:</code></td>
</tr>
<tr>
<td style="text-align:center">🐖</td>
<td style="text-align:center"><code>:pig2:</code></td>
</tr>
<tr>
<td style="text-align:center">🐁</td>
<td style="text-align:center"><code>:mouse2:</code></td>
</tr>
<tr>
<td style="text-align:center">🐂</td>
<td style="text-align:center"><code>:ox:</code></td>
</tr>
<tr>
<td style="text-align:center">🐲</td>
<td style="text-align:center"><code>:dragon_face:</code></td>
</tr>
<tr>
<td style="text-align:center">🐡</td>
<td style="text-align:center"><code>:blowfish:</code></td>
</tr>
<tr>
<td style="text-align:center">🐊</td>
<td style="text-align:center"><code>:crocodile:</code></td>
</tr>
<tr>
<td style="text-align:center">🐪</td>
<td style="text-align:center"><code>:dromedary_camel:</code></td>
</tr>
<tr>
<td style="text-align:center">🐆</td>
<td style="text-align:center"><code>:leopard:</code></td>
</tr>
<tr>
<td style="text-align:center">🐈</td>
<td style="text-align:center"><code>:cat2:</code></td>
</tr>
<tr>
<td style="text-align:center">🐩</td>
<td style="text-align:center"><code>:poodle:</code></td>
</tr>
<tr>
<td style="text-align:center">🐾</td>
<td style="text-align:center"><code>:paw_prints:</code></td>
</tr>
<tr>
<td style="text-align:center">💐</td>
<td style="text-align:center"><code>:bouquet:</code></td>
</tr>
<tr>
<td style="text-align:center">🌸</td>
<td style="text-align:center"><code>:cherry_blossom:</code></td>
</tr>
<tr>
<td style="text-align:center">🌷</td>
<td style="text-align:center"><code>:tulip:</code></td>
</tr>
<tr>
<td style="text-align:center">🍀</td>
<td style="text-align:center"><code>:four_leaf_clover:</code></td>
</tr>
<tr>
<td style="text-align:center">🌹</td>
<td style="text-align:center"><code>:rose:</code></td>
</tr>
<tr>
<td style="text-align:center">🌻</td>
<td style="text-align:center"><code>:sunflower:</code></td>
</tr>
<tr>
<td style="text-align:center">🌺</td>
<td style="text-align:center"><code>:hibiscus:</code></td>
</tr>
<tr>
<td style="text-align:center">🍁</td>
<td style="text-align:center"><code>:maple_leaf:</code></td>
</tr>
<tr>
<td style="text-align:center">🍃</td>
<td style="text-align:center"><code>:leaves:</code></td>
</tr>
<tr>
<td style="text-align:center">🍂</td>
<td style="text-align:center"><code>:fallen_leaf:</code></td>
</tr>
<tr>
<td style="text-align:center">🌿</td>
<td style="text-align:center"><code>:herb:</code></td>
</tr>
<tr>
<td style="text-align:center">🍄</td>
<td style="text-align:center"><code>:mushroom:</code></td>
</tr>
<tr>
<td style="text-align:center">🌵</td>
<td style="text-align:center"><code>:cactus:</code></td>
</tr>
<tr>
<td style="text-align:center">🌴</td>
<td style="text-align:center"><code>:palm_tree:</code></td>
</tr>
<tr>
<td style="text-align:center">🌲</td>
<td style="text-align:center"><code>:evergreen_tree:</code></td>
</tr>
<tr>
<td style="text-align:center">🌳</td>
<td style="text-align:center"><code>:deciduous_tree:</code></td>
</tr>
<tr>
<td style="text-align:center">🌰</td>
<td style="text-align:center"><code>:chestnut:</code></td>
</tr>
<tr>
<td style="text-align:center">🌱</td>
<td style="text-align:center"><code>:seedling:</code></td>
</tr>
<tr>
<td style="text-align:center">🌼</td>
<td style="text-align:center"><code>:blossom:</code></td>
</tr>
<tr>
<td style="text-align:center">🌾</td>
<td style="text-align:center"><code>:ear_of_rice:</code></td>
</tr>
<tr>
<td style="text-align:center">🐚</td>
<td style="text-align:center"><code>:shell:</code></td>
</tr>
<tr>
<td style="text-align:center">🌐</td>
<td style="text-align:center"><code>:globe_with_meridians:</code></td>
</tr>
<tr>
<td style="text-align:center">🌞</td>
<td style="text-align:center"><code>:sun_with_face:</code></td>
</tr>
<tr>
<td style="text-align:center">🌝</td>
<td style="text-align:center"><code>:full_moon_with_face:</code></td>
</tr>
<tr>
<td style="text-align:center">🌚</td>
<td style="text-align:center"><code>:new_moon_with_face:</code></td>
</tr>
<tr>
<td style="text-align:center">🌑</td>
<td style="text-align:center"><code>:new_moon:</code></td>
</tr>
<tr>
<td style="text-align:center">🌒</td>
<td style="text-align:center"><code>:waxing_crescent_moon:</code></td>
</tr>
<tr>
<td style="text-align:center">🌓</td>
<td style="text-align:center"><code>:first_quarter_moon:</code></td>
</tr>
<tr>
<td style="text-align:center">🌔</td>
<td style="text-align:center"><code>:waxing_gibbous_moon:</code></td>
</tr>
<tr>
<td style="text-align:center">🌕</td>
<td style="text-align:center"><code>:full_moon:</code></td>
</tr>
<tr>
<td style="text-align:center">🌖</td>
<td style="text-align:center"><code>:waning_gibbous_moon:</code></td>
</tr>
<tr>
<td style="text-align:center">🌗</td>
<td style="text-align:center"><code>:last_quarter_moon:</code></td>
</tr>
<tr>
<td style="text-align:center">🌘</td>
<td style="text-align:center"><code>:waning_crescent_moon:</code></td>
</tr>
<tr>
<td style="text-align:center">🌜</td>
<td style="text-align:center"><code>:last_quarter_moon_with_face:</code></td>
</tr>
<tr>
<td style="text-align:center">🌛</td>
<td style="text-align:center"><code>:first_quarter_moon_with_face:</code></td>
</tr>
<tr>
<td style="text-align:center">🌔</td>
<td style="text-align:center"><code>:moon:</code></td>
</tr>
<tr>
<td style="text-align:center">🌍</td>
<td style="text-align:center"><code>:earth_africa:</code></td>
</tr>
<tr>
<td style="text-align:center">🌎</td>
<td style="text-align:center"><code>:earth_americas:</code></td>
</tr>
<tr>
<td style="text-align:center">🌏</td>
<td style="text-align:center"><code>:earth_asia:</code></td>
</tr>
<tr>
<td style="text-align:center">🌋</td>
<td style="text-align:center"><code>:volcano:</code></td>
</tr>
<tr>
<td style="text-align:center">🌌</td>
<td style="text-align:center"><code>:milky_way:</code></td>
</tr>
<tr>
<td style="text-align:center">⛅</td>
<td style="text-align:center"><code>:partly_sunny:</code></td>
</tr>
<tr>
<td style="text-align:center"><strong>Objects</strong></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">🎍</td>
<td style="text-align:center"><code>:bamboo:</code></td>
</tr>
<tr>
<td style="text-align:center">💝</td>
<td style="text-align:center"><code>:gift_heart:</code></td>
</tr>
<tr>
<td style="text-align:center">🎎</td>
<td style="text-align:center"><code>:dolls:</code></td>
</tr>
<tr>
<td style="text-align:center">🎒</td>
<td style="text-align:center"><code>:school_satchel:</code></td>
</tr>
<tr>
<td style="text-align:center">🎓</td>
<td style="text-align:center"><code>:mortar_board:</code></td>
</tr>
<tr>
<td style="text-align:center">🎏</td>
<td style="text-align:center"><code>:flags:</code></td>
</tr>
<tr>
<td style="text-align:center">🎆</td>
<td style="text-align:center"><code>:fireworks:</code></td>
</tr>
<tr>
<td style="text-align:center">🎇</td>
<td style="text-align:center"><code>:sparkler:</code></td>
</tr>
<tr>
<td style="text-align:center">🎐</td>
<td style="text-align:center"><code>:wind_chime:</code></td>
</tr>
<tr>
<td style="text-align:center">🎑</td>
<td style="text-align:center"><code>:rice_scene:</code></td>
</tr>
<tr>
<td style="text-align:center">🎃</td>
<td style="text-align:center"><code>:jack_o_lantern:</code></td>
</tr>
<tr>
<td style="text-align:center">👻</td>
<td style="text-align:center"><code>:ghost:</code></td>
</tr>
<tr>
<td style="text-align:center">🎅</td>
<td style="text-align:center"><code>:santa:</code></td>
</tr>
<tr>
<td style="text-align:center">🎄</td>
<td style="text-align:center"><code>:christmas_tree:</code></td>
</tr>
<tr>
<td style="text-align:center">🎁</td>
<td style="text-align:center"><code>:gift:</code></td>
</tr>
<tr>
<td style="text-align:center">🔔</td>
<td style="text-align:center"><code>:bell:</code></td>
</tr>
<tr>
<td style="text-align:center">🔕</td>
<td style="text-align:center"><code>:no_bell:</code></td>
</tr>
<tr>
<td style="text-align:center">🎋</td>
<td style="text-align:center"><code>:tanabata_tree:</code></td>
</tr>
<tr>
<td style="text-align:center">🎉</td>
<td style="text-align:center"><code>:tada:</code></td>
</tr>
<tr>
<td style="text-align:center">🎊</td>
<td style="text-align:center"><code>:confetti_ball:</code></td>
</tr>
<tr>
<td style="text-align:center">🎈</td>
<td style="text-align:center"><code>:balloon:</code></td>
</tr>
<tr>
<td style="text-align:center">🔮</td>
<td style="text-align:center"><code>:crystal_ball:</code></td>
</tr>
<tr>
<td style="text-align:center">💿</td>
<td style="text-align:center"><code>:cd:</code></td>
</tr>
<tr>
<td style="text-align:center">📀</td>
<td style="text-align:center"><code>:dvd:</code></td>
</tr>
<tr>
<td style="text-align:center">💾</td>
<td style="text-align:center"><code>:floppy_disk:</code></td>
</tr>
<tr>
<td style="text-align:center">📷</td>
<td style="text-align:center"><code>:camera:</code></td>
</tr>
<tr>
<td style="text-align:center">📹</td>
<td style="text-align:center"><code>:video_camera:</code></td>
</tr>
<tr>
<td style="text-align:center">🎥</td>
<td style="text-align:center"><code>:movie_camera:</code></td>
</tr>
<tr>
<td style="text-align:center">💻</td>
<td style="text-align:center"><code>:computer:</code></td>
</tr>
<tr>
<td style="text-align:center">📺</td>
<td style="text-align:center"><code>:tv:</code></td>
</tr>
<tr>
<td style="text-align:center">📱</td>
<td style="text-align:center"><code>:iphone:</code></td>
</tr>
<tr>
<td style="text-align:center">☎️</td>
<td style="text-align:center"><code>:phone:</code></td>
</tr>
<tr>
<td style="text-align:center">☎️</td>
<td style="text-align:center"><code>:telephone:</code></td>
</tr>
<tr>
<td style="text-align:center">📞</td>
<td style="text-align:center"><code>:telephone_receiver:</code></td>
</tr>
<tr>
<td style="text-align:center">📟</td>
<td style="text-align:center"><code>:pager:</code></td>
</tr>
<tr>
<td style="text-align:center">📠</td>
<td style="text-align:center"><code>:fax:</code></td>
</tr>
<tr>
<td style="text-align:center">💽</td>
<td style="text-align:center"><code>:minidisc:</code></td>
</tr>
<tr>
<td style="text-align:center">📼</td>
<td style="text-align:center"><code>:vhs:</code></td>
</tr>
<tr>
<td style="text-align:center">🔉</td>
<td style="text-align:center"><code>:sound:</code></td>
</tr>
<tr>
<td style="text-align:center">🔈</td>
<td style="text-align:center"><code>:speaker:</code></td>
</tr>
<tr>
<td style="text-align:center">🔇</td>
<td style="text-align:center"><code>:mute:</code></td>
</tr>
<tr>
<td style="text-align:center">📢</td>
<td style="text-align:center"><code>:loudspeaker:</code></td>
</tr>
<tr>
<td style="text-align:center">📣</td>
<td style="text-align:center"><code>:mega:</code></td>
</tr>
<tr>
<td style="text-align:center">⌛</td>
<td style="text-align:center"><code>:hourglass:</code></td>
</tr>
<tr>
<td style="text-align:center">⏳</td>
<td style="text-align:center"><code>:hourglass_flowing_sand:</code></td>
</tr>
<tr>
<td style="text-align:center">⏰</td>
<td style="text-align:center"><code>:alarm_clock:</code></td>
</tr>
<tr>
<td style="text-align:center">⌚</td>
<td style="text-align:center"><code>:watch:</code></td>
</tr>
<tr>
<td style="text-align:center">📻</td>
<td style="text-align:center"><code>:radio:</code></td>
</tr>
<tr>
<td style="text-align:center">📡</td>
<td style="text-align:center"><code>:satellite:</code></td>
</tr>
<tr>
<td style="text-align:center">➿</td>
<td style="text-align:center"><code>:loop:</code></td>
</tr>
<tr>
<td style="text-align:center">🔍</td>
<td style="text-align:center"><code>:mag:</code></td>
</tr>
<tr>
<td style="text-align:center">🔎</td>
<td style="text-align:center"><code>:mag_right:</code></td>
</tr>
<tr>
<td style="text-align:center">🔓</td>
<td style="text-align:center"><code>:unlock:</code></td>
</tr>
<tr>
<td style="text-align:center">🔒</td>
<td style="text-align:center"><code>:lock:</code></td>
</tr>
<tr>
<td style="text-align:center">🔏</td>
<td style="text-align:center"><code>:lock_with_ink_pen:</code></td>
</tr>
<tr>
<td style="text-align:center">🔐</td>
<td style="text-align:center"><code>:closed_lock_with_key:</code></td>
</tr>
<tr>
<td style="text-align:center">🔑</td>
<td style="text-align:center"><code>:key:</code></td>
</tr>
<tr>
<td style="text-align:center">💡</td>
<td style="text-align:center"><code>:bulb:</code></td>
</tr>
<tr>
<td style="text-align:center">🔦</td>
<td style="text-align:center"><code>:flashlight:</code></td>
</tr>
<tr>
<td style="text-align:center">🔆</td>
<td style="text-align:center"><code>:high_brightness:</code></td>
</tr>
<tr>
<td style="text-align:center">🔅</td>
<td style="text-align:center"><code>:low_brightness:</code></td>
</tr>
<tr>
<td style="text-align:center">🔌</td>
<td style="text-align:center"><code>:electric_plug:</code></td>
</tr>
<tr>
<td style="text-align:center">🔋</td>
<td style="text-align:center"><code>:battery:</code></td>
</tr>
<tr>
<td style="text-align:center">📲</td>
<td style="text-align:center"><code>:calling:</code></td>
</tr>
<tr>
<td style="text-align:center">📧</td>
<td style="text-align:center"><code>:email:</code></td>
</tr>
<tr>
<td style="text-align:center">📫</td>
<td style="text-align:center"><code>:mailbox:</code></td>
</tr>
<tr>
<td style="text-align:center">📮</td>
<td style="text-align:center"><code>:postbox:</code></td>
</tr>
<tr>
<td style="text-align:center">🛀</td>
<td style="text-align:center"><code>:bath:</code></td>
</tr>
<tr>
<td style="text-align:center">🛁</td>
<td style="text-align:center"><code>:bathtub:</code></td>
</tr>
<tr>
<td style="text-align:center">🚿</td>
<td style="text-align:center"><code>:shower:</code></td>
</tr>
<tr>
<td style="text-align:center">🚽</td>
<td style="text-align:center"><code>:toilet:</code></td>
</tr>
<tr>
<td style="text-align:center">🔧</td>
<td style="text-align:center"><code>:wrench:</code></td>
</tr>
<tr>
<td style="text-align:center">🔩</td>
<td style="text-align:center"><code>:nut_and_bolt:</code></td>
</tr>
<tr>
<td style="text-align:center">🔨</td>
<td style="text-align:center"><code>:hammer:</code></td>
</tr>
<tr>
<td style="text-align:center">💺</td>
<td style="text-align:center"><code>:seat:</code></td>
</tr>
<tr>
<td style="text-align:center">💰</td>
<td style="text-align:center"><code>:moneybag:</code></td>
</tr>
<tr>
<td style="text-align:center">💴</td>
<td style="text-align:center"><code>:yen:</code></td>
</tr>
<tr>
<td style="text-align:center">💵</td>
<td style="text-align:center"><code>:dollar:</code></td>
</tr>
<tr>
<td style="text-align:center">💷</td>
<td style="text-align:center"><code>:pound:</code></td>
</tr>
<tr>
<td style="text-align:center">💶</td>
<td style="text-align:center"><code>:euro:</code></td>
</tr>
<tr>
<td style="text-align:center">💳</td>
<td style="text-align:center"><code>:credit_card:</code></td>
</tr>
<tr>
<td style="text-align:center">💸</td>
<td style="text-align:center"><code>:money_with_wings:</code></td>
</tr>
<tr>
<td style="text-align:center">📧</td>
<td style="text-align:center"><code>:e-mail:</code></td>
</tr>
<tr>
<td style="text-align:center">📥</td>
<td style="text-align:center"><code>:inbox_tray:</code></td>
</tr>
<tr>
<td style="text-align:center">📤</td>
<td style="text-align:center"><code>:outbox_tray:</code></td>
</tr>
<tr>
<td style="text-align:center">✉️</td>
<td style="text-align:center"><code>:envelope:</code></td>
</tr>
<tr>
<td style="text-align:center">📨</td>
<td style="text-align:center"><code>:incoming_envelope:</code></td>
</tr>
<tr>
<td style="text-align:center">📯</td>
<td style="text-align:center"><code>:postal_horn:</code></td>
</tr>
<tr>
<td style="text-align:center">📪</td>
<td style="text-align:center"><code>:mailbox_closed:</code></td>
</tr>
<tr>
<td style="text-align:center">📬</td>
<td style="text-align:center"><code>:mailbox_with_mail:</code></td>
</tr>
<tr>
<td style="text-align:center">📭</td>
<td style="text-align:center"><code>:mailbox_with_no_mail:</code></td>
</tr>
<tr>
<td style="text-align:center">🚪</td>
<td style="text-align:center"><code>:door:</code></td>
</tr>
<tr>
<td style="text-align:center">🚬</td>
<td style="text-align:center"><code>:smoking:</code></td>
</tr>
<tr>
<td style="text-align:center">💣</td>
<td style="text-align:center"><code>:bomb:</code></td>
</tr>
<tr>
<td style="text-align:center">🔫</td>
<td style="text-align:center"><code>:gun:</code></td>
</tr>
<tr>
<td style="text-align:center">🔪</td>
<td style="text-align:center"><code>:hocho:</code></td>
</tr>
<tr>
<td style="text-align:center">💊</td>
<td style="text-align:center"><code>:pill:</code></td>
</tr>
<tr>
<td style="text-align:center">💉</td>
<td style="text-align:center"><code>:syringe:</code></td>
</tr>
<tr>
<td style="text-align:center">📄</td>
<td style="text-align:center"><code>:page_facing_up:</code></td>
</tr>
<tr>
<td style="text-align:center">📃</td>
<td style="text-align:center"><code>:page_with_curl:</code></td>
</tr>
<tr>
<td style="text-align:center">📑</td>
<td style="text-align:center"><code>:bookmark_tabs:</code></td>
</tr>
<tr>
<td style="text-align:center">📊</td>
<td style="text-align:center"><code>:bar_chart:</code></td>
</tr>
<tr>
<td style="text-align:center">📈</td>
<td style="text-align:center"><code>:chart_with_upwards_trend:</code></td>
</tr>
<tr>
<td style="text-align:center">📉</td>
<td style="text-align:center"><code>:chart_with_downwards_trend:</code></td>
</tr>
<tr>
<td style="text-align:center">📜</td>
<td style="text-align:center"><code>:scroll:</code></td>
</tr>
<tr>
<td style="text-align:center">📋</td>
<td style="text-align:center"><code>:clipboard:</code></td>
</tr>
<tr>
<td style="text-align:center">📆</td>
<td style="text-align:center"><code>:calendar:</code></td>
</tr>
<tr>
<td style="text-align:center">📅</td>
<td style="text-align:center"><code>:date:</code></td>
</tr>
<tr>
<td style="text-align:center">📇</td>
<td style="text-align:center"><code>:card_index:</code></td>
</tr>
<tr>
<td style="text-align:center">📁</td>
<td style="text-align:center"><code>:file_folder:</code></td>
</tr>
<tr>
<td style="text-align:center">📂</td>
<td style="text-align:center"><code>:open_file_folder:</code></td>
</tr>
<tr>
<td style="text-align:center">✂️</td>
<td style="text-align:center"><code>:scissors:</code></td>
</tr>
<tr>
<td style="text-align:center">📌</td>
<td style="text-align:center"><code>:pushpin:</code></td>
</tr>
<tr>
<td style="text-align:center">📎</td>
<td style="text-align:center"><code>:paperclip:</code></td>
</tr>
<tr>
<td style="text-align:center">✒️</td>
<td style="text-align:center"><code>:black_nib:</code></td>
</tr>
<tr>
<td style="text-align:center">✏️</td>
<td style="text-align:center"><code>:pencil2:</code></td>
</tr>
<tr>
<td style="text-align:center">📏</td>
<td style="text-align:center"><code>:straight_ruler:</code></td>
</tr>
<tr>
<td style="text-align:center">📐</td>
<td style="text-align:center"><code>:triangular_ruler:</code></td>
</tr>
<tr>
<td style="text-align:center">📕</td>
<td style="text-align:center"><code>:closed_book:</code></td>
</tr>
<tr>
<td style="text-align:center">📗</td>
<td style="text-align:center"><code>:green_book:</code></td>
</tr>
<tr>
<td style="text-align:center">📘</td>
<td style="text-align:center"><code>:blue_book:</code></td>
</tr>
<tr>
<td style="text-align:center">📙</td>
<td style="text-align:center"><code>:orange_book:</code></td>
</tr>
<tr>
<td style="text-align:center">📓</td>
<td style="text-align:center"><code>:notebook:</code></td>
</tr>
<tr>
<td style="text-align:center">📔</td>
<td style="text-align:center"><code>:notebook_with_decorative_cover:</code></td>
</tr>
<tr>
<td style="text-align:center">📒</td>
<td style="text-align:center"><code>:ledger:</code></td>
</tr>
<tr>
<td style="text-align:center">📚</td>
<td style="text-align:center"><code>:books:</code></td>
</tr>
<tr>
<td style="text-align:center">🔖</td>
<td style="text-align:center"><code>:bookmark:</code></td>
</tr>
<tr>
<td style="text-align:center">📛</td>
<td style="text-align:center"><code>:name_badge:</code></td>
</tr>
<tr>
<td style="text-align:center">🔬</td>
<td style="text-align:center"><code>:microscope:</code></td>
</tr>
<tr>
<td style="text-align:center">🔭</td>
<td style="text-align:center"><code>:telescope:</code></td>
</tr>
<tr>
<td style="text-align:center">📰</td>
<td style="text-align:center"><code>:newspaper:</code></td>
</tr>
<tr>
<td style="text-align:center">🏈</td>
<td style="text-align:center"><code>:football:</code></td>
</tr>
<tr>
<td style="text-align:center">🏀</td>
<td style="text-align:center"><code>:basketball:</code></td>
</tr>
<tr>
<td style="text-align:center">⚽</td>
<td style="text-align:center"><code>:soccer:</code></td>
</tr>
<tr>
<td style="text-align:center">⚾</td>
<td style="text-align:center"><code>:baseball:</code></td>
</tr>
<tr>
<td style="text-align:center">🎾</td>
<td style="text-align:center"><code>:tennis:</code></td>
</tr>
<tr>
<td style="text-align:center">🎱</td>
<td style="text-align:center"><code>:8ball:</code></td>
</tr>
<tr>
<td style="text-align:center">🏉</td>
<td style="text-align:center"><code>:rugby_football:</code></td>
</tr>
<tr>
<td style="text-align:center">🎳</td>
<td style="text-align:center"><code>:bowling:</code></td>
</tr>
<tr>
<td style="text-align:center">⛳</td>
<td style="text-align:center"><code>:golf:</code></td>
</tr>
<tr>
<td style="text-align:center">🚵</td>
<td style="text-align:center"><code>:mountain_bicyclist:</code></td>
</tr>
<tr>
<td style="text-align:center">🚴</td>
<td style="text-align:center"><code>:bicyclist:</code></td>
</tr>
<tr>
<td style="text-align:center">🏇</td>
<td style="text-align:center"><code>:horse_racing:</code></td>
</tr>
<tr>
<td style="text-align:center">🏂</td>
<td style="text-align:center"><code>:snowboarder:</code></td>
</tr>
<tr>
<td style="text-align:center">🏊</td>
<td style="text-align:center"><code>:swimmer:</code></td>
</tr>
<tr>
<td style="text-align:center">🏄</td>
<td style="text-align:center"><code>:surfer:</code></td>
</tr>
<tr>
<td style="text-align:center">🎿</td>
<td style="text-align:center"><code>:ski:</code></td>
</tr>
<tr>
<td style="text-align:center">♠️</td>
<td style="text-align:center"><code>:spades:</code></td>
</tr>
<tr>
<td style="text-align:center">♥️</td>
<td style="text-align:center"><code>:hearts:</code></td>
</tr>
<tr>
<td style="text-align:center">♣️</td>
<td style="text-align:center"><code>:clubs:</code></td>
</tr>
<tr>
<td style="text-align:center">♦️</td>
<td style="text-align:center"><code>:diamonds:</code></td>
</tr>
<tr>
<td style="text-align:center">💎</td>
<td style="text-align:center"><code>:gem:</code></td>
</tr>
<tr>
<td style="text-align:center">💍</td>
<td style="text-align:center"><code>:ring:</code></td>
</tr>
<tr>
<td style="text-align:center">🏆</td>
<td style="text-align:center"><code>:trophy:</code></td>
</tr>
<tr>
<td style="text-align:center">🎼</td>
<td style="text-align:center"><code>:musical_score:</code></td>
</tr>
<tr>
<td style="text-align:center">🎹</td>
<td style="text-align:center"><code>:musical_keyboard:</code></td>
</tr>
<tr>
<td style="text-align:center">🎻</td>
<td style="text-align:center"><code>:violin:</code></td>
</tr>
<tr>
<td style="text-align:center">👾</td>
<td style="text-align:center"><code>:space_invader:</code></td>
</tr>
<tr>
<td style="text-align:center">🎮</td>
<td style="text-align:center"><code>:video_game:</code></td>
</tr>
<tr>
<td style="text-align:center">🃏</td>
<td style="text-align:center"><code>:black_joker:</code></td>
</tr>
<tr>
<td style="text-align:center">🎴</td>
<td style="text-align:center"><code>:flower_playing_cards:</code></td>
</tr>
<tr>
<td style="text-align:center">🎲</td>
<td style="text-align:center"><code>:game_die:</code></td>
</tr>
<tr>
<td style="text-align:center">🎯</td>
<td style="text-align:center"><code>:dart:</code></td>
</tr>
<tr>
<td style="text-align:center">🀄</td>
<td style="text-align:center"><code>:mahjong:</code></td>
</tr>
<tr>
<td style="text-align:center">🎬</td>
<td style="text-align:center"><code>:clapper:</code></td>
</tr>
<tr>
<td style="text-align:center">📝</td>
<td style="text-align:center"><code>:memo:</code></td>
</tr>
<tr>
<td style="text-align:center">📝</td>
<td style="text-align:center"><code>:pencil:</code></td>
</tr>
<tr>
<td style="text-align:center">📖</td>
<td style="text-align:center"><code>:book:</code></td>
</tr>
<tr>
<td style="text-align:center">🎨</td>
<td style="text-align:center"><code>:art:</code></td>
</tr>
<tr>
<td style="text-align:center">🎤</td>
<td style="text-align:center"><code>:microphone:</code></td>
</tr>
<tr>
<td style="text-align:center">🎧</td>
<td style="text-align:center"><code>:headphones:</code></td>
</tr>
<tr>
<td style="text-align:center">🎺</td>
<td style="text-align:center"><code>:trumpet:</code></td>
</tr>
<tr>
<td style="text-align:center">🎷</td>
<td style="text-align:center"><code>:saxophone:</code></td>
</tr>
<tr>
<td style="text-align:center">🎸</td>
<td style="text-align:center"><code>:guitar:</code></td>
</tr>
<tr>
<td style="text-align:center">👞</td>
<td style="text-align:center"><code>:shoe:</code></td>
</tr>
<tr>
<td style="text-align:center">👡</td>
<td style="text-align:center"><code>:sandal:</code></td>
</tr>
<tr>
<td style="text-align:center">👠</td>
<td style="text-align:center"><code>:high_heel:</code></td>
</tr>
<tr>
<td style="text-align:center">💄</td>
<td style="text-align:center"><code>:lipstick:</code></td>
</tr>
<tr>
<td style="text-align:center">👢</td>
<td style="text-align:center"><code>:boot:</code></td>
</tr>
<tr>
<td style="text-align:center">👕</td>
<td style="text-align:center"><code>:shirt:</code></td>
</tr>
<tr>
<td style="text-align:center">👕</td>
<td style="text-align:center"><code>:tshirt:</code></td>
</tr>
<tr>
<td style="text-align:center">👔</td>
<td style="text-align:center"><code>:necktie:</code></td>
</tr>
<tr>
<td style="text-align:center">👚</td>
<td style="text-align:center"><code>:womans_clothes:</code></td>
</tr>
<tr>
<td style="text-align:center">👗</td>
<td style="text-align:center"><code>:dress:</code></td>
</tr>
<tr>
<td style="text-align:center">🎽</td>
<td style="text-align:center"><code>:running_shirt_with_sash:</code></td>
</tr>
<tr>
<td style="text-align:center">👖</td>
<td style="text-align:center"><code>:jeans:</code></td>
</tr>
<tr>
<td style="text-align:center">👘</td>
<td style="text-align:center"><code>:kimono:</code></td>
</tr>
<tr>
<td style="text-align:center">👙</td>
<td style="text-align:center"><code>:bikini:</code></td>
</tr>
<tr>
<td style="text-align:center">🎀</td>
<td style="text-align:center"><code>:ribbon:</code></td>
</tr>
<tr>
<td style="text-align:center">🎩</td>
<td style="text-align:center"><code>:tophat:</code></td>
</tr>
<tr>
<td style="text-align:center">👑</td>
<td style="text-align:center"><code>:crown:</code></td>
</tr>
<tr>
<td style="text-align:center">👒</td>
<td style="text-align:center"><code>:womans_hat:</code></td>
</tr>
<tr>
<td style="text-align:center">👞</td>
<td style="text-align:center"><code>:mans_shoe:</code></td>
</tr>
<tr>
<td style="text-align:center">🌂</td>
<td style="text-align:center"><code>:closed_umbrella:</code></td>
</tr>
<tr>
<td style="text-align:center">💼</td>
<td style="text-align:center"><code>:briefcase:</code></td>
</tr>
<tr>
<td style="text-align:center">👜</td>
<td style="text-align:center"><code>:handbag:</code></td>
</tr>
<tr>
<td style="text-align:center">👝</td>
<td style="text-align:center"><code>:pouch:</code></td>
</tr>
<tr>
<td style="text-align:center">👛</td>
<td style="text-align:center"><code>:purse:</code></td>
</tr>
<tr>
<td style="text-align:center">👓</td>
<td style="text-align:center"><code>:eyeglasses:</code></td>
</tr>
<tr>
<td style="text-align:center">🎣</td>
<td style="text-align:center"><code>:fishing_pole_and_fish:</code></td>
</tr>
<tr>
<td style="text-align:center">☕</td>
<td style="text-align:center"><code>:coffee:</code></td>
</tr>
<tr>
<td style="text-align:center">🍵</td>
<td style="text-align:center"><code>:tea:</code></td>
</tr>
<tr>
<td style="text-align:center">🍶</td>
<td style="text-align:center"><code>:sake:</code></td>
</tr>
<tr>
<td style="text-align:center">🍼</td>
<td style="text-align:center"><code>:baby_bottle:</code></td>
</tr>
<tr>
<td style="text-align:center">🍺</td>
<td style="text-align:center"><code>:beer:</code></td>
</tr>
<tr>
<td style="text-align:center">🍻</td>
<td style="text-align:center"><code>:beers:</code></td>
</tr>
<tr>
<td style="text-align:center">🍸</td>
<td style="text-align:center"><code>:cocktail:</code></td>
</tr>
<tr>
<td style="text-align:center">🍹</td>
<td style="text-align:center"><code>:tropical_drink:</code></td>
</tr>
<tr>
<td style="text-align:center">🍷</td>
<td style="text-align:center"><code>:wine_glass:</code></td>
</tr>
<tr>
<td style="text-align:center">🍴</td>
<td style="text-align:center"><code>:fork_and_knife:</code></td>
</tr>
<tr>
<td style="text-align:center">🍕</td>
<td style="text-align:center"><code>:pizza:</code></td>
</tr>
<tr>
<td style="text-align:center">🍔</td>
<td style="text-align:center"><code>:hamburger:</code></td>
</tr>
<tr>
<td style="text-align:center">🍟</td>
<td style="text-align:center"><code>:fries:</code></td>
</tr>
<tr>
<td style="text-align:center">🍗</td>
<td style="text-align:center"><code>:poultry_leg:</code></td>
</tr>
<tr>
<td style="text-align:center">🍖</td>
<td style="text-align:center"><code>:meat_on_bone:</code></td>
</tr>
<tr>
<td style="text-align:center">🍝</td>
<td style="text-align:center"><code>:spaghetti:</code></td>
</tr>
<tr>
<td style="text-align:center">🍛</td>
<td style="text-align:center"><code>:curry:</code></td>
</tr>
<tr>
<td style="text-align:center">🍤</td>
<td style="text-align:center"><code>:fried_shrimp:</code></td>
</tr>
<tr>
<td style="text-align:center">🍱</td>
<td style="text-align:center"><code>:bento:</code></td>
</tr>
<tr>
<td style="text-align:center">🍣</td>
<td style="text-align:center"><code>:sushi:</code></td>
</tr>
<tr>
<td style="text-align:center">🍥</td>
<td style="text-align:center"><code>:fish_cake:</code></td>
</tr>
<tr>
<td style="text-align:center">🍙</td>
<td style="text-align:center"><code>:rice_ball:</code></td>
</tr>
<tr>
<td style="text-align:center">🍘</td>
<td style="text-align:center"><code>:rice_cracker:</code></td>
</tr>
<tr>
<td style="text-align:center">🍚</td>
<td style="text-align:center"><code>:rice:</code></td>
</tr>
<tr>
<td style="text-align:center">🍜</td>
<td style="text-align:center"><code>:ramen:</code></td>
</tr>
<tr>
<td style="text-align:center">🍲</td>
<td style="text-align:center"><code>:stew:</code></td>
</tr>
<tr>
<td style="text-align:center">🍢</td>
<td style="text-align:center"><code>:oden:</code></td>
</tr>
<tr>
<td style="text-align:center">🍡</td>
<td style="text-align:center"><code>:dango:</code></td>
</tr>
<tr>
<td style="text-align:center">🥚</td>
<td style="text-align:center"><code>:egg:</code></td>
</tr>
<tr>
<td style="text-align:center">🍞</td>
<td style="text-align:center"><code>:bread:</code></td>
</tr>
<tr>
<td style="text-align:center">🍩</td>
<td style="text-align:center"><code>:doughnut:</code></td>
</tr>
<tr>
<td style="text-align:center">🍮</td>
<td style="text-align:center"><code>:custard:</code></td>
</tr>
<tr>
<td style="text-align:center">🍦</td>
<td style="text-align:center"><code>:icecream:</code></td>
</tr>
<tr>
<td style="text-align:center">🍨</td>
<td style="text-align:center"><code>:ice_cream:</code></td>
</tr>
<tr>
<td style="text-align:center">🍧</td>
<td style="text-align:center"><code>:shaved_ice:</code></td>
</tr>
<tr>
<td style="text-align:center">🎂</td>
<td style="text-align:center"><code>:birthday:</code></td>
</tr>
<tr>
<td style="text-align:center">🍰</td>
<td style="text-align:center"><code>:cake:</code></td>
</tr>
<tr>
<td style="text-align:center">🍪</td>
<td style="text-align:center"><code>:cookie:</code></td>
</tr>
<tr>
<td style="text-align:center">🍫</td>
<td style="text-align:center"><code>:chocolate_bar:</code></td>
</tr>
<tr>
<td style="text-align:center">🍬</td>
<td style="text-align:center"><code>:candy:</code></td>
</tr>
<tr>
<td style="text-align:center">🍭</td>
<td style="text-align:center"><code>:lollipop:</code></td>
</tr>
<tr>
<td style="text-align:center">🍯</td>
<td style="text-align:center"><code>:honey_pot:</code></td>
</tr>
<tr>
<td style="text-align:center">🍎</td>
<td style="text-align:center"><code>:apple:</code></td>
</tr>
<tr>
<td style="text-align:center">🍏</td>
<td style="text-align:center"><code>:green_apple:</code></td>
</tr>
<tr>
<td style="text-align:center">🍊</td>
<td style="text-align:center"><code>:tangerine:</code></td>
</tr>
<tr>
<td style="text-align:center">🍋</td>
<td style="text-align:center"><code>:lemon:</code></td>
</tr>
<tr>
<td style="text-align:center">🍒</td>
<td style="text-align:center"><code>:cherries:</code></td>
</tr>
<tr>
<td style="text-align:center">🍇</td>
<td style="text-align:center"><code>:grapes:</code></td>
</tr>
<tr>
<td style="text-align:center">🍉</td>
<td style="text-align:center"><code>:watermelon:</code></td>
</tr>
<tr>
<td style="text-align:center">🍓</td>
<td style="text-align:center"><code>:strawberry:</code></td>
</tr>
<tr>
<td style="text-align:center">🍑</td>
<td style="text-align:center"><code>:peach:</code></td>
</tr>
<tr>
<td style="text-align:center">🍈</td>
<td style="text-align:center"><code>:melon:</code></td>
</tr>
<tr>
<td style="text-align:center">🍌</td>
<td style="text-align:center"><code>:banana:</code></td>
</tr>
<tr>
<td style="text-align:center">🍐</td>
<td style="text-align:center"><code>:pear:</code></td>
</tr>
<tr>
<td style="text-align:center">🍍</td>
<td style="text-align:center"><code>:pineapple:</code></td>
</tr>
<tr>
<td style="text-align:center">🍠</td>
<td style="text-align:center"><code>:sweet_potato:</code></td>
</tr>
<tr>
<td style="text-align:center">🍆</td>
<td style="text-align:center"><code>:eggplant:</code></td>
</tr>
<tr>
<td style="text-align:center">🍅</td>
<td style="text-align:center"><code>:tomato:</code></td>
</tr>
<tr>
<td style="text-align:center">🌽</td>
<td style="text-align:center"><code>:corn:</code></td>
</tr>
<tr>
<td style="text-align:center"><strong>Places</strong></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">🏠</td>
<td style="text-align:center"><code>:house:</code></td>
</tr>
<tr>
<td style="text-align:center">🏡</td>
<td style="text-align:center"><code>:house_with_garden:</code></td>
</tr>
<tr>
<td style="text-align:center">🏫</td>
<td style="text-align:center"><code>:school:</code></td>
</tr>
<tr>
<td style="text-align:center">🏢</td>
<td style="text-align:center"><code>:office:</code></td>
</tr>
<tr>
<td style="text-align:center">🏣</td>
<td style="text-align:center"><code>:post_office:</code></td>
</tr>
<tr>
<td style="text-align:center">🏥</td>
<td style="text-align:center"><code>:hospital:</code></td>
</tr>
<tr>
<td style="text-align:center">🏦</td>
<td style="text-align:center"><code>:bank:</code></td>
</tr>
<tr>
<td style="text-align:center">🏪</td>
<td style="text-align:center"><code>:convenience_store:</code></td>
</tr>
<tr>
<td style="text-align:center">🏩</td>
<td style="text-align:center"><code>:love_hotel:</code></td>
</tr>
<tr>
<td style="text-align:center">🏨</td>
<td style="text-align:center"><code>:hotel:</code></td>
</tr>
<tr>
<td style="text-align:center">💒</td>
<td style="text-align:center"><code>:wedding:</code></td>
</tr>
<tr>
<td style="text-align:center">⛪</td>
<td style="text-align:center"><code>:church:</code></td>
</tr>
<tr>
<td style="text-align:center">🏬</td>
<td style="text-align:center"><code>:department_store:</code></td>
</tr>
<tr>
<td style="text-align:center">🏤</td>
<td style="text-align:center"><code>:european_post_office:</code></td>
</tr>
<tr>
<td style="text-align:center">🌇</td>
<td style="text-align:center"><code>:city_sunrise:</code></td>
</tr>
<tr>
<td style="text-align:center">🌆</td>
<td style="text-align:center"><code>:city_sunset:</code></td>
</tr>
<tr>
<td style="text-align:center">🏯</td>
<td style="text-align:center"><code>:japanese_castle:</code></td>
</tr>
<tr>
<td style="text-align:center">🏰</td>
<td style="text-align:center"><code>:european_castle:</code></td>
</tr>
<tr>
<td style="text-align:center">⛺</td>
<td style="text-align:center"><code>:tent:</code></td>
</tr>
<tr>
<td style="text-align:center">🏭</td>
<td style="text-align:center"><code>:factory:</code></td>
</tr>
<tr>
<td style="text-align:center">🗼</td>
<td style="text-align:center"><code>:tokyo_tower:</code></td>
</tr>
<tr>
<td style="text-align:center">🗾</td>
<td style="text-align:center"><code>:japan:</code></td>
</tr>
<tr>
<td style="text-align:center">🗻</td>
<td style="text-align:center"><code>:mount_fuji:</code></td>
</tr>
<tr>
<td style="text-align:center">🌄</td>
<td style="text-align:center"><code>:sunrise_over_mountains:</code></td>
</tr>
<tr>
<td style="text-align:center">🌅</td>
<td style="text-align:center"><code>:sunrise:</code></td>
</tr>
<tr>
<td style="text-align:center">🌠</td>
<td style="text-align:center"><code>:stars:</code></td>
</tr>
<tr>
<td style="text-align:center">🗽</td>
<td style="text-align:center"><code>:statue_of_liberty:</code></td>
</tr>
<tr>
<td style="text-align:center">🌉</td>
<td style="text-align:center"><code>:bridge_at_night:</code></td>
</tr>
<tr>
<td style="text-align:center">🎠</td>
<td style="text-align:center"><code>:carousel_horse:</code></td>
</tr>
<tr>
<td style="text-align:center">🌈</td>
<td style="text-align:center"><code>:rainbow:</code></td>
</tr>
<tr>
<td style="text-align:center">🎡</td>
<td style="text-align:center"><code>:ferris_wheel:</code></td>
</tr>
<tr>
<td style="text-align:center">⛲</td>
<td style="text-align:center"><code> :fountain:</code></td>
</tr>
<tr>
<td style="text-align:center">🎢</td>
<td style="text-align:center"><code>:roller_coaster:</code></td>
</tr>
<tr>
<td style="text-align:center">🚢</td>
<td style="text-align:center"><code>:ship:</code></td>
</tr>
<tr>
<td style="text-align:center">🚤</td>
<td style="text-align:center"><code>:speedboat:</code></td>
</tr>
<tr>
<td style="text-align:center">⛵</td>
<td style="text-align:center"><code>:boat:</code></td>
</tr>
<tr>
<td style="text-align:center">⛵</td>
<td style="text-align:center"><code>:sailboat:</code></td>
</tr>
<tr>
<td style="text-align:center">🚣</td>
<td style="text-align:center"><code>:rowboat:</code></td>
</tr>
<tr>
<td style="text-align:center">⚓</td>
<td style="text-align:center"><code>:anchor:</code></td>
</tr>
<tr>
<td style="text-align:center">🚀</td>
<td style="text-align:center"><code>:rocket:</code></td>
</tr>
<tr>
<td style="text-align:center">✈️</td>
<td style="text-align:center"><code>:airplane:</code></td>
</tr>
<tr>
<td style="text-align:center">🚁</td>
<td style="text-align:center"><code>:helicopter:</code></td>
</tr>
<tr>
<td style="text-align:center">🚂</td>
<td style="text-align:center"><code>:steam_locomotive:</code></td>
</tr>
<tr>
<td style="text-align:center">🚊</td>
<td style="text-align:center"><code>:tram:</code></td>
</tr>
<tr>
<td style="text-align:center">🚞</td>
<td style="text-align:center"><code>:mountain_railway:</code></td>
</tr>
<tr>
<td style="text-align:center">🚲</td>
<td style="text-align:center"><code>:bike:</code></td>
</tr>
<tr>
<td style="text-align:center">🚡</td>
<td style="text-align:center"><code>:aerial_tramway:</code></td>
</tr>
<tr>
<td style="text-align:center">🚟</td>
<td style="text-align:center"><code>:suspension_railway:</code></td>
</tr>
<tr>
<td style="text-align:center">🚠</td>
<td style="text-align:center"><code>:mountain_cableway:</code></td>
</tr>
<tr>
<td style="text-align:center">🚜</td>
<td style="text-align:center"><code>:tractor:</code></td>
</tr>
<tr>
<td style="text-align:center">🚙</td>
<td style="text-align:center"><code>:blue_car:</code></td>
</tr>
<tr>
<td style="text-align:center">🚘</td>
<td style="text-align:center"><code>:oncoming_automobile:</code></td>
</tr>
<tr>
<td style="text-align:center">🚗</td>
<td style="text-align:center"><code>:car:</code></td>
</tr>
<tr>
<td style="text-align:center">🚗</td>
<td style="text-align:center"><code>:red_car:</code></td>
</tr>
<tr>
<td style="text-align:center">🚕</td>
<td style="text-align:center"><code>:taxi:</code></td>
</tr>
<tr>
<td style="text-align:center">🚖</td>
<td style="text-align:center"><code>:oncoming_taxi:</code></td>
</tr>
<tr>
<td style="text-align:center">🚛</td>
<td style="text-align:center"><code>:articulated_lorry:</code></td>
</tr>
<tr>
<td style="text-align:center">🚌</td>
<td style="text-align:center"><code>:bus:</code></td>
</tr>
<tr>
<td style="text-align:center">🚍</td>
<td style="text-align:center"><code>:oncoming_bus:</code></td>
</tr>
<tr>
<td style="text-align:center">🚨</td>
<td style="text-align:center"><code>:rotating_light:</code></td>
</tr>
<tr>
<td style="text-align:center">🚓</td>
<td style="text-align:center"><code>:police_car:</code></td>
</tr>
<tr>
<td style="text-align:center">🚔</td>
<td style="text-align:center"><code>:oncoming_police_car:</code></td>
</tr>
<tr>
<td style="text-align:center">🚒</td>
<td style="text-align:center"><code>:fire_engine:</code></td>
</tr>
<tr>
<td style="text-align:center">🚑</td>
<td style="text-align:center"><code>:ambulance:</code></td>
</tr>
<tr>
<td style="text-align:center">🚐</td>
<td style="text-align:center"><code>:minibus:</code></td>
</tr>
<tr>
<td style="text-align:center">🚚</td>
<td style="text-align:center"><code>:truck:</code></td>
</tr>
<tr>
<td style="text-align:center">🚋</td>
<td style="text-align:center"><code>:train:</code></td>
</tr>
<tr>
<td style="text-align:center">🚉</td>
<td style="text-align:center"><code>:station:</code></td>
</tr>
<tr>
<td style="text-align:center">🚆</td>
<td style="text-align:center"><code>:train2:</code></td>
</tr>
<tr>
<td style="text-align:center">🚅</td>
<td style="text-align:center"><code>:bullettrain_front:</code></td>
</tr>
<tr>
<td style="text-align:center">🚄</td>
<td style="text-align:center"><code>:bullettrain_side:</code></td>
</tr>
<tr>
<td style="text-align:center">🚈</td>
<td style="text-align:center"><code>:light_rail:</code></td>
</tr>
<tr>
<td style="text-align:center">🚝</td>
<td style="text-align:center"><code>:monorail:</code></td>
</tr>
<tr>
<td style="text-align:center">🚃</td>
<td style="text-align:center"><code>:railway_car:</code></td>
</tr>
<tr>
<td style="text-align:center">🚎</td>
<td style="text-align:center"><code>:trolleybus:</code></td>
</tr>
<tr>
<td style="text-align:center">🎫</td>
<td style="text-align:center"><code>:ticket:</code></td>
</tr>
<tr>
<td style="text-align:center">⛽</td>
<td style="text-align:center"><code>:fuelpump:</code></td>
</tr>
<tr>
<td style="text-align:center">🚦</td>
<td style="text-align:center"><code>:vertical_traffic_light:</code></td>
</tr>
<tr>
<td style="text-align:center">🚥</td>
<td style="text-align:center"><code>:traffic_light:</code></td>
</tr>
<tr>
<td style="text-align:center">⚠️</td>
<td style="text-align:center"><code>:warning:</code></td>
</tr>
<tr>
<td style="text-align:center">🚧</td>
<td style="text-align:center"><code>:construction:</code></td>
</tr>
<tr>
<td style="text-align:center">🔰</td>
<td style="text-align:center"><code>:beginner:</code></td>
</tr>
<tr>
<td style="text-align:center">🏧</td>
<td style="text-align:center"><code>:atm:</code></td>
</tr>
<tr>
<td style="text-align:center">🎰</td>
<td style="text-align:center"><code>:slot_machine:</code></td>
</tr>
<tr>
<td style="text-align:center">🚏</td>
<td style="text-align:center"><code>:busstop:</code></td>
</tr>
<tr>
<td style="text-align:center">💈</td>
<td style="text-align:center"><code>:barber:</code></td>
</tr>
<tr>
<td style="text-align:center">♨️</td>
<td style="text-align:center"><code>:hotsprings:</code></td>
</tr>
<tr>
<td style="text-align:center">🏁</td>
<td style="text-align:center"><code>:checkered_flag:</code></td>
</tr>
<tr>
<td style="text-align:center">🎌</td>
<td style="text-align:center"><code>:crossed_flags:</code></td>
</tr>
<tr>
<td style="text-align:center">🏮</td>
<td style="text-align:center"><code>:izakaya_lantern:</code></td>
</tr>
<tr>
<td style="text-align:center">🗿</td>
<td style="text-align:center"><code>:moyai:</code></td>
</tr>
<tr>
<td style="text-align:center">🎪</td>
<td style="text-align:center"><code>:circus_tent:</code></td>
</tr>
<tr>
<td style="text-align:center">🎭</td>
<td style="text-align:center"><code>:performing_arts:</code></td>
</tr>
<tr>
<td style="text-align:center">📍</td>
<td style="text-align:center"><code>:round_pushpin:</code></td>
</tr>
<tr>
<td style="text-align:center">🚩</td>
<td style="text-align:center"><code>:triangular_flag_on_post:</code></td>
</tr>
<tr>
<td style="text-align:center">🇯🇵</td>
<td style="text-align:center"><code>:jp:</code></td>
</tr>
<tr>
<td style="text-align:center">🇰🇷</td>
<td style="text-align:center"><code>:kr:</code></td>
</tr>
<tr>
<td style="text-align:center">🇨🇳</td>
<td style="text-align:center"><code>:cn:</code></td>
</tr>
<tr>
<td style="text-align:center">🇺🇸</td>
<td style="text-align:center"><code>:us:</code></td>
</tr>
<tr>
<td style="text-align:center">🇫🇷</td>
<td style="text-align:center"><code>:fr:</code></td>
</tr>
<tr>
<td style="text-align:center">🇪🇸</td>
<td style="text-align:center"><code>:es:</code></td>
</tr>
<tr>
<td style="text-align:center">🇮🇹</td>
<td style="text-align:center"><code>:it:</code></td>
</tr>
<tr>
<td style="text-align:center">🇷🇺</td>
<td style="text-align:center"><code>:ru:</code></td>
</tr>
<tr>
<td style="text-align:center">🇬🇧</td>
<td style="text-align:center"><code>:gb:</code></td>
</tr>
<tr>
<td style="text-align:center">🇬🇧</td>
<td style="text-align:center"><code>:uk:</code></td>
</tr>
<tr>
<td style="text-align:center">🇩🇪</td>
<td style="text-align:center"><code>:de:</code></td>
</tr>
<tr>
<td style="text-align:center"><strong>Symbols</strong></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">1️⃣</td>
<td style="text-align:center"><code> :one:</code></td>
</tr>
<tr>
<td style="text-align:center">2️⃣</td>
<td style="text-align:center"><code> :two:</code></td>
</tr>
<tr>
<td style="text-align:center">3️⃣</td>
<td style="text-align:center"><code> :three:</code></td>
</tr>
<tr>
<td style="text-align:center">4️⃣</td>
<td style="text-align:center"><code> :four:</code></td>
</tr>
<tr>
<td style="text-align:center">5️⃣</td>
<td style="text-align:center"><code> :five:</code></td>
</tr>
<tr>
<td style="text-align:center">6️⃣</td>
<td style="text-align:center"><code> :six:</code></td>
</tr>
<tr>
<td style="text-align:center">7️⃣</td>
<td style="text-align:center"><code> :seven:</code></td>
</tr>
<tr>
<td style="text-align:center">8️⃣</td>
<td style="text-align:center"><code> :eight:</code></td>
</tr>
<tr>
<td style="text-align:center">9️⃣</td>
<td style="text-align:center"><code> :nine:</code></td>
</tr>
<tr>
<td style="text-align:center">🔟</td>
<td style="text-align:center"><code>:keycap_ten:</code></td>
</tr>
<tr>
<td style="text-align:center">🔢</td>
<td style="text-align:center"><code>:1234:</code></td>
</tr>
<tr>
<td style="text-align:center">0️⃣</td>
<td style="text-align:center"><code> :zero:</code></td>
</tr>
<tr>
<td style="text-align:center">#️⃣</td>
<td style="text-align:center"><code> :hash:</code></td>
</tr>
<tr>
<td style="text-align:center">🔣</td>
<td style="text-align:center"><code>:symbols:</code></td>
</tr>
<tr>
<td style="text-align:center">◀️</td>
<td style="text-align:center"><code>:arrow_backward:</code></td>
</tr>
<tr>
<td style="text-align:center">⬇️</td>
<td style="text-align:center"><code>:arrow_down:</code></td>
</tr>
<tr>
<td style="text-align:center">▶️</td>
<td style="text-align:center"><code>:arrow_forward:</code></td>
</tr>
<tr>
<td style="text-align:center">⬅️</td>
<td style="text-align:center"><code>:arrow_left:</code></td>
</tr>
<tr>
<td style="text-align:center">🔠</td>
<td style="text-align:center"><code>:capital_abcd:</code></td>
</tr>
<tr>
<td style="text-align:center">🔡</td>
<td style="text-align:center"><code>:abcd:</code></td>
</tr>
<tr>
<td style="text-align:center">🔤</td>
<td style="text-align:center"><code>:abc:</code></td>
</tr>
<tr>
<td style="text-align:center">↙️</td>
<td style="text-align:center"><code>:arrow_lower_left:</code></td>
</tr>
<tr>
<td style="text-align:center">↘️</td>
<td style="text-align:center"><code>:arrow_lower_right:</code></td>
</tr>
<tr>
<td style="text-align:center">➡️</td>
<td style="text-align:center"><code>:arrow_right:</code></td>
</tr>
<tr>
<td style="text-align:center">⬆️</td>
<td style="text-align:center"><code>:arrow_up:</code></td>
</tr>
<tr>
<td style="text-align:center">↖️</td>
<td style="text-align:center"><code>:arrow_upper_left:</code></td>
</tr>
<tr>
<td style="text-align:center">↗️</td>
<td style="text-align:center"><code>:arrow_upper_right:</code></td>
</tr>
<tr>
<td style="text-align:center">⏬</td>
<td style="text-align:center"><code>:arrow_double_down:</code></td>
</tr>
<tr>
<td style="text-align:center">⏫</td>
<td style="text-align:center"><code>:arrow_double_up:</code></td>
</tr>
<tr>
<td style="text-align:center">🔽</td>
<td style="text-align:center"><code>:arrow_down_small:</code></td>
</tr>
<tr>
<td style="text-align:center">⤵️</td>
<td style="text-align:center"><code>:arrow_heading_down:</code></td>
</tr>
<tr>
<td style="text-align:center">⤴️</td>
<td style="text-align:center"><code>:arrow_heading_up:</code></td>
</tr>
<tr>
<td style="text-align:center">↩️</td>
<td style="text-align:center"><code>:leftwards_arrow_with_hook:</code></td>
</tr>
<tr>
<td style="text-align:center">↪️</td>
<td style="text-align:center"><code>:arrow_right_hook:</code></td>
</tr>
<tr>
<td style="text-align:center">↔️</td>
<td style="text-align:center"><code>:left_right_arrow:</code></td>
</tr>
<tr>
<td style="text-align:center">↕️</td>
<td style="text-align:center"><code>:arrow_up_down:</code></td>
</tr>
<tr>
<td style="text-align:center">🔼</td>
<td style="text-align:center"><code>:arrow_up_small:</code></td>
</tr>
<tr>
<td style="text-align:center">🔃</td>
<td style="text-align:center"><code>:arrows_clockwise:</code></td>
</tr>
<tr>
<td style="text-align:center">🔄</td>
<td style="text-align:center"><code>:arrows_counterclockwise:</code></td>
</tr>
<tr>
<td style="text-align:center">⏪</td>
<td style="text-align:center"><code>:rewind:</code></td>
</tr>
<tr>
<td style="text-align:center">⏩</td>
<td style="text-align:center"><code>:fast_forward:</code></td>
</tr>
<tr>
<td style="text-align:center">ℹ️</td>
<td style="text-align:center"><code>:information_source:</code></td>
</tr>
<tr>
<td style="text-align:center">🆗</td>
<td style="text-align:center"><code>:ok:</code></td>
</tr>
<tr>
<td style="text-align:center">🔀</td>
<td style="text-align:center"><code>:twisted_rightwards_arrows:</code></td>
</tr>
<tr>
<td style="text-align:center">🔁</td>
<td style="text-align:center"><code>:repeat:</code></td>
</tr>
<tr>
<td style="text-align:center">🔂</td>
<td style="text-align:center"><code>:repeat_one:</code></td>
</tr>
<tr>
<td style="text-align:center">🆕</td>
<td style="text-align:center"><code>:new:</code></td>
</tr>
<tr>
<td style="text-align:center">🔝</td>
<td style="text-align:center"><code>:top:</code></td>
</tr>
<tr>
<td style="text-align:center">🆙</td>
<td style="text-align:center"><code>:up:</code></td>
</tr>
<tr>
<td style="text-align:center">🆒</td>
<td style="text-align:center"><code>:cool:</code></td>
</tr>
<tr>
<td style="text-align:center">🆓</td>
<td style="text-align:center"><code>:free:</code></td>
</tr>
<tr>
<td style="text-align:center">🆖</td>
<td style="text-align:center"><code>:ng:</code></td>
</tr>
<tr>
<td style="text-align:center">🎦</td>
<td style="text-align:center"><code>:cinema:</code></td>
</tr>
<tr>
<td style="text-align:center">🈁</td>
<td style="text-align:center"><code>:koko:</code></td>
</tr>
<tr>
<td style="text-align:center">📶</td>
<td style="text-align:center"><code>:signal_strength:</code></td>
</tr>
<tr>
<td style="text-align:center">🈹</td>
<td style="text-align:center"><code>:u5272:</code></td>
</tr>
<tr>
<td style="text-align:center">🈴</td>
<td style="text-align:center"><code>:u5408:</code></td>
</tr>
<tr>
<td style="text-align:center">🈺</td>
<td style="text-align:center"><code>:u55b6:</code></td>
</tr>
<tr>
<td style="text-align:center">🈯</td>
<td style="text-align:center"><code>:u6307:</code></td>
</tr>
<tr>
<td style="text-align:center">🈷️</td>
<td style="text-align:center"><code> :u6708:</code></td>
</tr>
<tr>
<td style="text-align:center">🈶</td>
<td style="text-align:center"><code>:u6709:</code></td>
</tr>
<tr>
<td style="text-align:center">🈵</td>
<td style="text-align:center"><code>:u6e80:</code></td>
</tr>
<tr>
<td style="text-align:center">🈚</td>
<td style="text-align:center"><code>:u7121:</code></td>
</tr>
<tr>
<td style="text-align:center">🈸</td>
<td style="text-align:center"><code>:u7533:</code></td>
</tr>
<tr>
<td style="text-align:center">🈳</td>
<td style="text-align:center"><code>:u7a7a:</code></td>
</tr>
<tr>
<td style="text-align:center">🈲</td>
<td style="text-align:center"><code>:u7981:</code></td>
</tr>
<tr>
<td style="text-align:center">🈂️</td>
<td style="text-align:center"><code> :sa:</code></td>
</tr>
<tr>
<td style="text-align:center">🚻</td>
<td style="text-align:center"><code>:restroom:</code></td>
</tr>
<tr>
<td style="text-align:center">🚹</td>
<td style="text-align:center"><code>:mens:</code></td>
</tr>
<tr>
<td style="text-align:center">🚺</td>
<td style="text-align:center"><code>:womens:</code></td>
</tr>
<tr>
<td style="text-align:center">🚼</td>
<td style="text-align:center"><code>:baby_symbol:</code></td>
</tr>
<tr>
<td style="text-align:center">🚭</td>
<td style="text-align:center"><code>:no_smoking:</code></td>
</tr>
<tr>
<td style="text-align:center">🅿️</td>
<td style="text-align:center"><code>:parking:</code></td>
</tr>
<tr>
<td style="text-align:center">♿</td>
<td style="text-align:center"><code>:wheelchair:</code></td>
</tr>
<tr>
<td style="text-align:center">🚇</td>
<td style="text-align:center"><code>:metro:</code></td>
</tr>
<tr>
<td style="text-align:center">🛄</td>
<td style="text-align:center"><code>:baggage_claim:</code></td>
</tr>
<tr>
<td style="text-align:center">🉑</td>
<td style="text-align:center"><code>:accept:</code></td>
</tr>
<tr>
<td style="text-align:center">🚾</td>
<td style="text-align:center"><code>:wc:</code></td>
</tr>
<tr>
<td style="text-align:center">🚰</td>
<td style="text-align:center"><code>:potable_water:</code></td>
</tr>
<tr>
<td style="text-align:center">🚮</td>
<td style="text-align:center"><code>:put_litter_in_its_place:</code></td>
</tr>
<tr>
<td style="text-align:center">㊙️</td>
<td style="text-align:center"><code>:secret:</code></td>
</tr>
<tr>
<td style="text-align:center">㊗️</td>
<td style="text-align:center"><code>:congratulations:</code></td>
</tr>
<tr>
<td style="text-align:center">Ⓜ️</td>
<td style="text-align:center"><code>:m:</code></td>
</tr>
<tr>
<td style="text-align:center">🛂</td>
<td style="text-align:center"><code>:passport_control:</code></td>
</tr>
<tr>
<td style="text-align:center">🛅</td>
<td style="text-align:center"><code>:left_luggage:</code></td>
</tr>
<tr>
<td style="text-align:center">🛃</td>
<td style="text-align:center"><code>:customs:</code></td>
</tr>
<tr>
<td style="text-align:center">🉐</td>
<td style="text-align:center"><code>:ideograph_advantage:</code></td>
</tr>
<tr>
<td style="text-align:center">🆑</td>
<td style="text-align:center"><code>:cl:</code></td>
</tr>
<tr>
<td style="text-align:center">🆘</td>
<td style="text-align:center"><code>:sos:</code></td>
</tr>
<tr>
<td style="text-align:center">🆔</td>
<td style="text-align:center"><code>:id:</code></td>
</tr>
<tr>
<td style="text-align:center">🚫</td>
<td style="text-align:center"><code>:no_entry_sign:</code></td>
</tr>
<tr>
<td style="text-align:center">🔞</td>
<td style="text-align:center"><code>:underage:</code></td>
</tr>
<tr>
<td style="text-align:center">📵</td>
<td style="text-align:center"><code>:no_mobile_phones:</code></td>
</tr>
<tr>
<td style="text-align:center">🚯</td>
<td style="text-align:center"><code>:do_not_litter:</code></td>
</tr>
<tr>
<td style="text-align:center">🚱</td>
<td style="text-align:center"><code>:non-potable_water:</code></td>
</tr>
<tr>
<td style="text-align:center">🚳</td>
<td style="text-align:center"><code>:no_bicycles:</code></td>
</tr>
<tr>
<td style="text-align:center">🚷</td>
<td style="text-align:center"><code>:no_pedestrians:</code></td>
</tr>
<tr>
<td style="text-align:center">🚸</td>
<td style="text-align:center"><code>:children_crossing:</code></td>
</tr>
<tr>
<td style="text-align:center">⛔</td>
<td style="text-align:center"><code>:no_entry:</code></td>
</tr>
<tr>
<td style="text-align:center">✳️</td>
<td style="text-align:center"><code>:eight_spoked_asterisk:</code></td>
</tr>
<tr>
<td style="text-align:center">✴️</td>
<td style="text-align:center"><code>:eight_pointed_black_star:</code></td>
</tr>
<tr>
<td style="text-align:center">💟</td>
<td style="text-align:center"><code>:heart_decoration:</code></td>
</tr>
<tr>
<td style="text-align:center">🆚</td>
<td style="text-align:center"><code>:vs:</code></td>
</tr>
<tr>
<td style="text-align:center">📳</td>
<td style="text-align:center"><code>:vibration_mode:</code></td>
</tr>
<tr>
<td style="text-align:center">📴</td>
<td style="text-align:center"><code>:mobile_phone_off:</code></td>
</tr>
<tr>
<td style="text-align:center">💹</td>
<td style="text-align:center"><code>:chart:</code></td>
</tr>
<tr>
<td style="text-align:center">💱</td>
<td style="text-align:center"><code>:currency_exchange:</code></td>
</tr>
<tr>
<td style="text-align:center">♈</td>
<td style="text-align:center"><code>:aries:</code></td>
</tr>
<tr>
<td style="text-align:center">♉</td>
<td style="text-align:center"><code>:taurus:</code></td>
</tr>
<tr>
<td style="text-align:center">♊</td>
<td style="text-align:center"><code>:gemini:</code></td>
</tr>
<tr>
<td style="text-align:center">♋</td>
<td style="text-align:center"><code>:cancer:</code></td>
</tr>
<tr>
<td style="text-align:center">♌</td>
<td style="text-align:center"><code>:leo:</code></td>
</tr>
<tr>
<td style="text-align:center">♍</td>
<td style="text-align:center"><code>:virgo:</code></td>
</tr>
<tr>
<td style="text-align:center">♎</td>
<td style="text-align:center"><code>:libra:</code></td>
</tr>
<tr>
<td style="text-align:center">♏</td>
<td style="text-align:center"><code>:scorpius:</code></td>
</tr>
<tr>
<td style="text-align:center">♐</td>
<td style="text-align:center"><code>:sagittarius:</code></td>
</tr>
<tr>
<td style="text-align:center">♑</td>
<td style="text-align:center"><code>:capricorn:</code></td>
</tr>
<tr>
<td style="text-align:center">♒</td>
<td style="text-align:center"><code>:aquarius:</code></td>
</tr>
<tr>
<td style="text-align:center">♓</td>
<td style="text-align:center"><code>:pisces:</code></td>
</tr>
<tr>
<td style="text-align:center">⛎</td>
<td style="text-align:center"><code>:ophiuchus:</code></td>
</tr>
<tr>
<td style="text-align:center">🔯</td>
<td style="text-align:center"><code>:six_pointed_star:</code></td>
</tr>
<tr>
<td style="text-align:center">❎</td>
<td style="text-align:center"><code>:negative_squared_cross_mark:</code></td>
</tr>
<tr>
<td style="text-align:center">🅰️</td>
<td style="text-align:center"><code>:a:</code></td>
</tr>
<tr>
<td style="text-align:center">🅱️</td>
<td style="text-align:center"><code>:b:</code></td>
</tr>
<tr>
<td style="text-align:center">🆎</td>
<td style="text-align:center"><code>:ab:</code></td>
</tr>
<tr>
<td style="text-align:center">🅾️</td>
<td style="text-align:center"><code>:o2:</code></td>
</tr>
<tr>
<td style="text-align:center">💠</td>
<td style="text-align:center"><code>:diamond_shape_with_a_dot_inside:</code></td>
</tr>
<tr>
<td style="text-align:center">♻️</td>
<td style="text-align:center"><code>:recycle:</code></td>
</tr>
<tr>
<td style="text-align:center">🔚</td>
<td style="text-align:center"><code>:end:</code></td>
</tr>
<tr>
<td style="text-align:center">🔛</td>
<td style="text-align:center"><code>:on:</code></td>
</tr>
<tr>
<td style="text-align:center">🔜</td>
<td style="text-align:center"><code>:soon:</code></td>
</tr>
<tr>
<td style="text-align:center">🕐</td>
<td style="text-align:center"><code>:clock1:</code></td>
</tr>
<tr>
<td style="text-align:center">🕜</td>
<td style="text-align:center"><code>:clock130:</code></td>
</tr>
<tr>
<td style="text-align:center">🕙</td>
<td style="text-align:center"><code>:clock10:</code></td>
</tr>
<tr>
<td style="text-align:center">🕥</td>
<td style="text-align:center"><code>:clock1030:</code></td>
</tr>
<tr>
<td style="text-align:center">🕚</td>
<td style="text-align:center"><code>:clock11:</code></td>
</tr>
<tr>
<td style="text-align:center">🕦</td>
<td style="text-align:center"><code>:clock1130:</code></td>
</tr>
<tr>
<td style="text-align:center">🕛</td>
<td style="text-align:center"><code>:clock12:</code></td>
</tr>
<tr>
<td style="text-align:center">🕧</td>
<td style="text-align:center"><code>:clock1230:</code></td>
</tr>
<tr>
<td style="text-align:center">🕑</td>
<td style="text-align:center"><code>:clock2:</code></td>
</tr>
<tr>
<td style="text-align:center">🕝</td>
<td style="text-align:center"><code>:clock230:</code></td>
</tr>
<tr>
<td style="text-align:center">🕒</td>
<td style="text-align:center"><code>:clock3:</code></td>
</tr>
<tr>
<td style="text-align:center">🕞</td>
<td style="text-align:center"><code>:clock330:</code></td>
</tr>
<tr>
<td style="text-align:center">🕓</td>
<td style="text-align:center"><code>:clock4:</code></td>
</tr>
<tr>
<td style="text-align:center">🕟</td>
<td style="text-align:center"><code>:clock430:</code></td>
</tr>
<tr>
<td style="text-align:center">🕔</td>
<td style="text-align:center"><code>:clock5:</code></td>
</tr>
<tr>
<td style="text-align:center">🕠</td>
<td style="text-align:center"><code>:clock530:</code></td>
</tr>
<tr>
<td style="text-align:center">🕕</td>
<td style="text-align:center"><code>:clock6:</code></td>
</tr>
<tr>
<td style="text-align:center">🕡</td>
<td style="text-align:center"><code>:clock630:</code></td>
</tr>
<tr>
<td style="text-align:center">🕖</td>
<td style="text-align:center"><code>:clock7:</code></td>
</tr>
<tr>
<td style="text-align:center">🕢</td>
<td style="text-align:center"><code>:clock730:</code></td>
</tr>
<tr>
<td style="text-align:center">🕗</td>
<td style="text-align:center"><code>:clock8:</code></td>
</tr>
<tr>
<td style="text-align:center">🕣</td>
<td style="text-align:center"><code>:clock830:</code></td>
</tr>
<tr>
<td style="text-align:center">🕘</td>
<td style="text-align:center"><code>:clock9:</code></td>
</tr>
<tr>
<td style="text-align:center">🕤</td>
<td style="text-align:center"><code>:clock930:</code></td>
</tr>
<tr>
<td style="text-align:center">💲</td>
<td style="text-align:center"><code>:heavy_dollar_sign:</code></td>
</tr>
<tr>
<td style="text-align:center">©️</td>
<td style="text-align:center"><code>:copyright:</code></td>
</tr>
<tr>
<td style="text-align:center">®️</td>
<td style="text-align:center"><code>:registered:</code></td>
</tr>
<tr>
<td style="text-align:center">™️</td>
<td style="text-align:center"><code>:tm:</code></td>
</tr>
<tr>
<td style="text-align:center">❌</td>
<td style="text-align:center"><code>:x:</code></td>
</tr>
<tr>
<td style="text-align:center">❗</td>
<td style="text-align:center"><code>:heavy_exclamation_mark:</code></td>
</tr>
<tr>
<td style="text-align:center">‼️</td>
<td style="text-align:center"><code>:bangbang:</code></td>
</tr>
<tr>
<td style="text-align:center">⁉️</td>
<td style="text-align:center"><code>:interrobang:</code></td>
</tr>
<tr>
<td style="text-align:center">⭕</td>
<td style="text-align:center"><code>:o:</code></td>
</tr>
<tr>
<td style="text-align:center">✖️</td>
<td style="text-align:center"><code>:heavy_multiplication_x:</code></td>
</tr>
<tr>
<td style="text-align:center">➕</td>
<td style="text-align:center"><code>:heavy_plus_sign:</code></td>
</tr>
<tr>
<td style="text-align:center">➖</td>
<td style="text-align:center"><code>:heavy_minus_sign:</code></td>
</tr>
<tr>
<td style="text-align:center">➗</td>
<td style="text-align:center"><code>:heavy_division_sign:</code></td>
</tr>
<tr>
<td style="text-align:center">💮</td>
<td style="text-align:center"><code>:white_flower:</code></td>
</tr>
<tr>
<td style="text-align:center">💯</td>
<td style="text-align:center"><code>:100:</code></td>
</tr>
<tr>
<td style="text-align:center">✔️</td>
<td style="text-align:center"><code>:heavy_check_mark:</code></td>
</tr>
<tr>
<td style="text-align:center">☑️</td>
<td style="text-align:center"><code>:ballot_box_with_check:</code></td>
</tr>
<tr>
<td style="text-align:center">🔘</td>
<td style="text-align:center"><code>:radio_button:</code></td>
</tr>
<tr>
<td style="text-align:center">🔗</td>
<td style="text-align:center"><code>:link:</code></td>
</tr>
<tr>
<td style="text-align:center">➰</td>
<td style="text-align:center"><code>:curly_loop:</code></td>
</tr>
<tr>
<td style="text-align:center">〰️</td>
<td style="text-align:center"><code>:wavy_dash:</code></td>
</tr>
<tr>
<td style="text-align:center">〽️</td>
<td style="text-align:center"><code>:part_alternation_mark:</code></td>
</tr>
<tr>
<td style="text-align:center">🔱</td>
<td style="text-align:center"><code>:trident:</code></td>
</tr>
<tr>
<td style="text-align:center">✅</td>
<td style="text-align:center"><code>.white_check_mark:</code></td>
</tr>
<tr>
<td style="text-align:center">🔲</td>
<td style="text-align:center"><code>:black_square_button:</code></td>
</tr>
<tr>
<td style="text-align:center">🔳</td>
<td style="text-align:center"><code>:white_square_button:</code></td>
</tr>
<tr>
<td style="text-align:center">⚫</td>
<td style="text-align:center"><code>:black_circle:</code></td>
</tr>
<tr>
<td style="text-align:center">⚪</td>
<td style="text-align:center"><code>:white_circle:</code></td>
</tr>
<tr>
<td style="text-align:center">🔴</td>
<td style="text-align:center"><code>:red_circle:</code></td>
</tr>
<tr>
<td style="text-align:center">🔵</td>
<td style="text-align:center"><code>:large_blue_circle:</code></td>
</tr>
<tr>
<td style="text-align:center">🔷</td>
<td style="text-align:center"><code>:large_blue_diamond:</code></td>
</tr>
<tr>
<td style="text-align:center">🔶</td>
<td style="text-align:center"><code>:large_orange_diamond:</code></td>
</tr>
<tr>
<td style="text-align:center">🔹</td>
<td style="text-align:center"><code>:small_blue_diamond:</code></td>
</tr>
<tr>
<td style="text-align:center">🔸</td>
<td style="text-align:center"><code>:small_orange_diamond:</code></td>
</tr>
<tr>
<td style="text-align:center">🔺</td>
<td style="text-align:center"><code>:small_red_triangle:</code></td>
</tr>
<tr>
<td style="text-align:center">🔻</td>
<td style="text-align:center"><code>:small_red_triangle_down: </code></td>
</tr>
</tbody>
</table>
<p>Some of the emojis may be missing. If you haven&rsquo;t found the one you were looking for, consider taking a look at <a href="https://api.github.com/emojis">Github Emoji API</a> and get the code from there.</p>
<h2 id="source-">Source 📚</h2>
<ol>
<li><a href="https://gist.github.com/rxaviers/7360908">Complete list of Github Markdown Emoji Markup</a></li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>Terminal Tips and Tricks</title>
			<link>http://localhost:1313/blog/en/posts/terminal-tips-and-tricks/</link>
			<pubDate>Mon, 27 Mar 2023 11:33:22 +0200</pubDate>
			
			<guid>http://localhost:1313/blog/en/posts/terminal-tips-and-tricks/</guid>
			<description><![CDATA[%!s(<nil>)]]></description>
			<content type="html"><![CDATA[<h1 id="terminal-tips-and-tricks">Terminal Tips and Tricks</h1>
<p>This cheat sheet shows you various tips and tricks for working with terminal.</p>
<h2 id="interactive-shell">Interactive Shell</h2>
<p>If you are using Ubuntu, you can open terminal with <code>CTRL + ALT + T</code> keyboard shortcut.</p>
<h3 id="basic-tasks">Basic Tasks</h3>
<ul>
<li>Print the current working directory: <code>pwd</code></li>
<li>List files in the current directory: <code>ls</code></li>
<li>List files in a list format: <code>ls -l</code></li>
<li>List all files (including hidden ones): <code>ls -a</code></li>
<li>List all files in a list format: <code>ls -al</code></li>
<li>List all files in a list format, and use a human readable format for file sizes: <code>ls -alh</code></li>
<li>Change into a directory: <code>cd my-directory</code></li>
<li>Move to the home directory: <code>cd ~</code></li>
<li>Go to the previous directory: <code>cd -</code> (useful, when you want to jump back and forth between two folders)</li>
<li>Create an empty file: <code>touch my-file</code></li>
<li>Create a directory: <code>mkdir my-directory</code></li>
<li>Create a directory and <code>cd</code> into it: <code>mkdir dir_name &amp;&amp; cd $_</code></li>
<li>Create a directory with it&rsquo;s parents: <code>mkdir -p path/to/some/dir</code></li>
<li>Create multiple subdirectories: <code>mkdir -p path/{subdirectory1,subdirectory2,subdirectory3}</code></li>
<li>Download a file from the internet:
<ul>
<li>Using <code>curl</code>: <code>curl -O URL</code></li>
<li>Using <code>wget</code>: <code>wget URL</code></li>
</ul>
</li>
<li>You can use <code>TAB</code> to auto-complete a command or a folder/file name, after you&rsquo;ve written several letters</li>
<li>Get a list of all environment variables: <code>env</code></li>
<li>Get help with a given command: <code>man command</code></li>
<li>Redirect the <code>STDOUT</code> output of one command into the <code>STDIN</code> of another command: <code>command1 | command2</code></li>
<li>Redirect the <code>STDOUT</code> output of a command into a file: <code>command &gt; /path/to/file.txt</code> (if the file doesn&rsquo;t exist, it will be created, if it exists, it will be overwritten)</li>
<li>Append the <code>STDOUT</code> output of a command into a file: <code>command &gt;&gt; /path/to/file.txt</code> (if the file doesn&rsquo;t exist, it will be created, if it exists, it won&rsquo;t be overwritten)</li>
<li>Display a simple calendar: <code>cal</code> (or <code>cal -3</code> to display three months)</li>
</ul>
<h3 id="running-scripts">Running Scripts</h3>
<ul>
<li>Give your user ability to run a script: <code>chmod u+x my-script.sh</code></li>
<li>Remove your user&rsquo;s ability to run a script: <code>chmod u-x my-script.sh</code></li>
<li>Run the script from the current directory: <code>./my-script.sh</code></li>
<li>Run the script from a different directory: <code>./path/to/my-script.sh</code></li>
<li>You can create a directory for your executable scripts (e.g. <code>~/bin</code>), move your scripts there, and add this directory to your path (<code>export PATH=$PATH:~/bin</code>). You can then you can run your script without <code>./</code> or the path (e.g. <code>my-script.sh</code>)</li>
</ul>
<h3 id="history">History</h3>
<ul>
<li>View commands you&rsquo;ve used in the past: <code>history</code></li>
<li>For a more convenient browsing of history: <code>history | less</code></li>
<li>Search for some pattern in history: <code>history | grep &quot;pattern&quot;</code></li>
<li>Click <code>CTRL + R</code> and start typing, this will bring up the last command that matches what you&rsquo;ve written. Click <code>CTRL + R</code> repeatedly to find older matches</li>
<li>Use arrow up and down to &ldquo;scroll&rdquo; through recent commands</li>
<li>Re-run the last command: <code>!!</code></li>
<li>Re-run the last command, but as a superuser: <code>sudo !!</code></li>
<li>Refer to the n-th command in the history: <code>!n</code></li>
<li>Refer to the n-th command from the end in the history: <code>!-n</code></li>
<li>Re-run the second last command: <code>!-2</code></li>
<li>Refer to the most recent command in the history starting with <code>string</code>: <code>!string</code>, e.g. <code>!cd</code></li>
</ul>
<h3 id="administrative-tasks">Administrative Tasks</h3>
<ul>
<li>Update and upgrade Debian-based Linux distros: <code>sudo apt-get install &amp;&amp; sudo apt-get upgrade</code></li>
<li>Install a package in Debian-based Linux distros: <code>sudo apt-get install some-package</code></li>
<li>Search for a package in repositories: <code>apt search my-query</code> (this is useful, if you are not sure, what is the package with a program called)</li>
<li>Show details of a package: <code>apt show some-package</code></li>
<li>Shutdown the computer: <code>sudo shutdown -h now</code></li>
<li>Restart the computer immediately: <code>sudo shutdown -r now</code></li>
<li>Restart the computer in 60 minutes: <code>sudo shutdown -r +60</code></li>
<li>Continually monitor a log file: <code>tail -f /var/log/some.log</code></li>
<li>Get your IP address: <code>ifconfig</code></li>
<li>Get your external address: <code>curl ipecho.net/plain; echo</code></li>
<li>Test connectivity to a website: <code>ping -c 10 URL</code></li>
<li>Task monitor: <code>top</code> or for more colorful option <code>htop</code></li>
</ul>
<h3 id="development">Development</h3>
<ul>
<li>Start a simple server in any directory: <code>python -m SimpleHTTPServer 8000</code> (you need Python installed)</li>
</ul>
<h3 id="remote-shell">Remote Shell</h3>
<h3 id="automating-common-tasks">Automating Common Tasks</h3>
<p>If you often run a long command (either with many flags and options, or several commands chained together), it you probably should create a alias to simplify running the command.</p>
<p>To create a alias, add the line that looks like this to your <code>~/.bashrc</code> file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>alias cmd<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;my-very-very-long-often-used-command&#39;</span>
</span></span></code></pre></div><p>Replace everything between the quotes with your command and it&rsquo;s flags and options. Make sure that you use the single quote (<code>'</code>) and not the double quote (<code>&quot;</code>). When you are done with adding <code>~/.bashrc</code>, close and reopen terminal, or run <code>source ~/.bashrc</code>.</p>
<p>You can then use the alias like a normal command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cmd
</span></span></code></pre></div><p>The alias doesn&rsquo;t have to be a complete command, it can contain just the flags and options, and you add some input parameter when you use the alias:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cmd <span style="color:#e6db74">&#34;some input&#34;</span>
</span></span></code></pre></div><p>Disadvantage of aliases is that you can not pass parameters that are &ldquo;in the middle&rdquo; of the command. But you can functions that use parameters to your <code>~/.bashrc</code>, e.g.:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>repeat <span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  local count<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> i;
</span></span><span style="display:flex;"><span>  shift;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> i in <span style="color:#66d9ef">$(</span>_seq <span style="color:#ae81ff">1</span> <span style="color:#e6db74">&#34;</span>$count<span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">)</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>    eval <span style="color:#e6db74">&#34;</span>$@<span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">done</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Subfunction needed by `repeat&#39;.</span>
</span></span><span style="display:flex;"><span>_seq <span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  local lower upper output;
</span></span><span style="display:flex;"><span>  lower<span style="color:#f92672">=</span>$1 upper<span style="color:#f92672">=</span>$2;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> $lower -ge $upper <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span> <span style="color:#66d9ef">return</span>; <span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">while</span> <span style="color:#f92672">[</span> $lower -lt $upper <span style="color:#f92672">]</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>    echo -n <span style="color:#e6db74">&#34;</span>$lower<span style="color:#e6db74"> &#34;</span>
</span></span><span style="display:flex;"><span>    lower<span style="color:#f92672">=</span><span style="color:#66d9ef">$((</span>$lower <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span><span style="color:#66d9ef">))</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">done</span>
</span></span><span style="display:flex;"><span>  echo <span style="color:#e6db74">&#34;</span>$lower<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>This function repeats a given command given number of times. Example usage:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>repeat <span style="color:#ae81ff">10</span> echo foo
</span></span></code></pre></div><p>Here is a couple of aliases from my <code>.bashrc</code> for inspiration:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Make outputs more colorful</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> -x /usr/bin/dircolors <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>  test -r ~/.dircolors <span style="color:#f92672">&amp;&amp;</span> eval <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>dircolors -b ~/.dircolors<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">||</span> eval <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>dircolors -b<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>  alias ls<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;ls --color=auto&#39;</span>
</span></span><span style="display:flex;"><span>  alias grep<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;grep --color=auto&#39;</span>
</span></span><span style="display:flex;"><span>  alias fgrep<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;fgrep --color=auto&#39;</span>
</span></span><span style="display:flex;"><span>  alias egrep<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;egrep --color=auto&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># some ls aliases</span>
</span></span><span style="display:flex;"><span>alias ll<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;ls -alF&#39;</span>
</span></span><span style="display:flex;"><span>alias la<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;ls -A&#39;</span>
</span></span><span style="display:flex;"><span>alias l<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;ls -CF&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">## Debian/Ubuntu</span>
</span></span><span style="display:flex;"><span>alias age<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;sudo apt-get&#39;</span>
</span></span><span style="display:flex;"><span>alias ags<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;apt search&#39;</span>
</span></span><span style="display:flex;"><span>alias apu<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;sudo apt update &amp;&amp; sudo apt upgrade&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">## Faster navigation</span>
</span></span><span style="display:flex;"><span>alias ..<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;cd ..&#34;</span>
</span></span><span style="display:flex;"><span>alias ...<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;cd ../..&#34;</span>
</span></span><span style="display:flex;"><span>alias ....<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;cd ../../..&#34;</span>
</span></span><span style="display:flex;"><span>alias .....<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;cd ../../../..&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Frequently used commands</span>
</span></span><span style="display:flex;"><span>alias c<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;clear&#39;</span> <span style="color:#75715e"># you can use CTRL+L instead, if you haven&#39;t remaped it like I did</span>
</span></span><span style="display:flex;"><span>alias h<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;history&#39;</span>
</span></span><span style="display:flex;"><span>alias ss<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ps -aux&#34;</span>
</span></span><span style="display:flex;"><span>alias dot<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;ls .[a-zA-Z0-9_]*&#39;</span>
</span></span><span style="display:flex;"><span>alias texclean<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;rm -f *.toc *.aux *.log *.cp *.fn *.tp *.vr *.pg *.ky&#39;</span>
</span></span><span style="display:flex;"><span>alias cp<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;cp -i&#34;</span>                          <span style="color:#75715e"># confirm before overwriting something</span>
</span></span><span style="display:flex;"><span>alias df<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;df -h&#39;</span>                          <span style="color:#75715e"># human-readable sizes</span>
</span></span><span style="display:flex;"><span>alias free<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;free -m&#39;</span>                      <span style="color:#75715e"># show sizes in MB</span>
</span></span><span style="display:flex;"><span>alias more<span style="color:#f92672">=</span>less
</span></span><span style="display:flex;"><span>alias alert<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;notify-send --urgency=low -i &#34;$([ $? = 0 ] &amp;&amp; echo terminal || echo error)&#34; &#34;$(history|tail -n1|sed -e &#39;</span><span style="color:#ae81ff">\&#39;</span><span style="color:#e6db74">&#39;s/^\s*[0-9]\+\s*//;s/[;&amp;|]\s*alert$//&#39;</span><span style="color:#ae81ff">\&#39;</span><span style="color:#e6db74">&#39;)&#34;&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Tmux</span>
</span></span><span style="display:flex;"><span>alias ta<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;tmux attach-session -t $(tmux list-sessions | fzf | cut -d&#34;:&#34; -f 1)&#39;</span>
</span></span><span style="display:flex;"><span>alias ts<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;tmux new-session -s&#39;</span>      <span style="color:#75715e"># create a new named session</span>
</span></span><span style="display:flex;"><span>alias tl<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;tmux list-sessions&#39;</span>
</span></span><span style="display:flex;"><span>alias tksv<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;tmux kill-server&#39;</span>       <span style="color:#75715e"># kill all the server and all the sessions</span>
</span></span><span style="display:flex;"><span>alias tkss<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;tmux kill-session -t&#39;</span>   <span style="color:#75715e"># kill a named session</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">## Simple fun or useful stuff</span>
</span></span><span style="display:flex;"><span>alias wttr<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;curl wttr.in/&lt;your-town&gt;&#39;</span>
</span></span><span style="display:flex;"><span>alias clear<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;[ $[$RANDOM % 15] = 0 ] &amp;&amp; timeout 1 cmatrix || clear&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Common misspellings</span>
</span></span><span style="display:flex;"><span>alias mroe<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;more&#39;</span>
</span></span><span style="display:flex;"><span>alias moar<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;more&#39;</span>
</span></span><span style="display:flex;"><span>alias pdw<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;pwd&#39;</span>
</span></span><span style="display:flex;"><span>alias exot<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;exit&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Dice</span>
</span></span><span style="display:flex;"><span>alias d4<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;shuf -i1-4 -n1&#39;</span>
</span></span><span style="display:flex;"><span>alias d6<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;shuf -i1-6 -n1&#39;</span>
</span></span><span style="display:flex;"><span>alias d8<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;shuf -i1-8 -n1&#39;</span>
</span></span><span style="display:flex;"><span>alias d20<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;shuf -i1-20 -n1&#39;</span>
</span></span><span style="display:flex;"><span>alias d60<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;shuf -i1-60 -n1&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Git</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># You must install Git first</span>
</span></span><span style="display:flex;"><span>alias gs<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;git status&#39;</span>
</span></span><span style="display:flex;"><span>alias gl<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;git log --graph --oneline --all&#39;</span>
</span></span><span style="display:flex;"><span>alias ga<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;git add .&#39;</span>
</span></span><span style="display:flex;"><span>alias gc<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;git commit -m&#39;</span> <span style="color:#75715e"># requires you to type a commit message</span>
</span></span><span style="display:flex;"><span>alias gp<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;git push&#39;</span>
</span></span><span style="display:flex;"><span>alias gau<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;git add -u&#39;</span>
</span></span><span style="display:flex;"><span>alias grm<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;git rm $(git ls-files --deleted)&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># # ex - archive extractor</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># # usage: ex &lt;file&gt;</span>
</span></span><span style="display:flex;"><span>ex <span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> -f $1 <span style="color:#f92672">]</span> ; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> $1 in
</span></span><span style="display:flex;"><span>      *.tar.bz2<span style="color:#f92672">)</span>   tar xjf $1   ;;
</span></span><span style="display:flex;"><span>      *.tar.gz<span style="color:#f92672">)</span>    tar xzf $1   ;;
</span></span><span style="display:flex;"><span>      *.bz2<span style="color:#f92672">)</span>       bunzip2 $1   ;;
</span></span><span style="display:flex;"><span>      *.rar<span style="color:#f92672">)</span>       unrar x $1   ;;
</span></span><span style="display:flex;"><span>      *.gz<span style="color:#f92672">)</span>        gunzip $1    ;;
</span></span><span style="display:flex;"><span>      *.tar<span style="color:#f92672">)</span>       tar xf $1    ;;
</span></span><span style="display:flex;"><span>      *.tbz2<span style="color:#f92672">)</span>      tar xjf $1   ;;
</span></span><span style="display:flex;"><span>      *.tgz<span style="color:#f92672">)</span>       tar xzf $1   ;;
</span></span><span style="display:flex;"><span>      *.zip<span style="color:#f92672">)</span>       unzip $1     ;;
</span></span><span style="display:flex;"><span>      *.Z<span style="color:#f92672">)</span>         uncompress $1;;
</span></span><span style="display:flex;"><span>      *.7z<span style="color:#f92672">)</span>        7z x $1      ;;
</span></span><span style="display:flex;"><span>      *<span style="color:#f92672">)</span>           echo <span style="color:#e6db74">&#34;&#39;</span>$1<span style="color:#e6db74">&#39; cannot be extracted via ex()&#34;</span> ;;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">esac</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    echo <span style="color:#e6db74">&#34;&#39;</span>$1<span style="color:#e6db74">&#39; is not a valid file&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h2 id="scripting">Scripting</h2>
<p>You can use all the tricks from interactive section while scripting.</p>
<h3 id="comment-your-code">Comment Your Code</h3>
<p>You will thank me when you return to your script after longer period of time and won&rsquo;t remember what it does and why.</p>
<p>I also recommend using longer versions of the flags, when writing a script, because it documents the script. E.g instead of <code>-q</code> use <code>--quiet</code>.</p>
<h3 id="make-script-exit-on-fail">Make Script Exit On Fail</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>set -o errexit
</span></span><span style="display:flex;"><span><span style="color:#75715e"># OR</span>
</span></span><span style="display:flex;"><span>set -e
</span></span></code></pre></div><h3 id="make-script-fail-when-it-uses-undeclared-variables">Make Script Fail When It Uses Undeclared Variables</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>set -o nounset
</span></span><span style="display:flex;"><span><span style="color:#75715e"># OR</span>
</span></span><span style="display:flex;"><span>set -u
</span></span></code></pre></div><h3 id="consider-using-functions-in-longer-scripts">Consider Using Functions In Longer Scripts</h3>
<p>Functions make your code more readable, document it, and make it more reusable. With exception of the small scripts, it is a good idea to use functions.</p>
<p>Syntax for writing functions is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> function_name <span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># function code`</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Or</span>
</span></span><span style="display:flex;"><span>function_name <span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># function code`</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># It can be written in a single line</span>
</span></span><span style="display:flex;"><span>function_name<span style="color:#f92672">()</span> <span style="color:#f92672">{</span> command1; command2; <span style="color:#f92672">}</span>
</span></span></code></pre></div><h2 id="multi-line-output-and-input">Multi-Line Output And Input</h2>
<p>You can use documents to output a multi-line message. E.g. for outputting a help message:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cat <span style="color:#e6db74">&lt;&lt; EOF
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">usage: up [--level &lt;n&gt;| -n &lt;levels&gt;][--help][--version]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">Report bugs to: support@up.app
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">up home page: https://up.app
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">EOF</span>
</span></span></code></pre></div><p>You can also load multi-line string into a variable like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>read -d <span style="color:#e6db74">&#39;&#39;</span> variable <span style="color:#e6db74">&lt;&lt;- EOF
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">This is a very long document.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">It has several lines.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">And one more.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">You can even your variables, such as &#34;$USER&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">EOF</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Now you can use your variable</span>
</span></span></code></pre></div><h3 id="use--instead-of--for-string-comparisons">Use = Instead Of == For String Comparisons</h3>
<p>Note that <code>==</code> is a synonym for <code>=</code>, therefore only use a single <code>=</code> for string comparisons.</p>
<h3 id="command-substitution">Command Substitution</h3>
<p>Command substitution replaces a command with it&rsquo;s output. You can use <code>$(command)</code> or surround the command with backticks (legacy approach to command substitution), but <code>$(command)</code> is recommended. Example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>user<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>echo “$UID”<span style="color:#e6db74">`</span>
</span></span><span style="display:flex;"><span>user<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>echo “$UID”<span style="color:#66d9ef">)</span>
</span></span></code></pre></div><h3 id="use-read-only-to-declare-static-variables">Use Read-Only To Declare Static Variables</h3>
<p>Static variables can not be changed once defined in a script. Example usage:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>readonly password_file<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/etc/passwd&#34;</span>
</span></span></code></pre></div><h3 id="check-your-scripts-with-shell-check-tool">Check Your Scripts With Shell Check Tool</h3>
<p>Use <a href="https://www.tecmint.com/shellcheck-shell-script-code-analyzer-for-linux/">ShellCheck tool</a> to find warnings and suggestions concerning bad code in bash/sh shell scripts.</p>
<h3 id="always-surround-your-variables-with-quotation-marks">Always Surround Your Variables With Quotation Marks</h3>
<p>Surround your variables with quotation mark to ensure that variables are referenced correctly. This is especially important if your variable has several words separated with spaces. Without the quotation marks, Bash will interpret the next word as the beginning of the next command.</p>
<p>A variable in single quotes <code>'</code> is treated as a literal string, and not as a variable. Variables in quotation marks <code>&quot;</code>  are treated as variables.</p>
<h3 id="break-up-scripts-into-multiple-files">Break Up Scripts Into Multiple Files</h3>
<p>You can import variables and functions defined in another files with <code>source</code> command. E.g.:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>source ~/.bash_aliases
</span></span></code></pre></div><p>This specific line can often be seen in <code>~/.bashrc</code> files, because people who have many aliases like to write them into <code>~/.bash_aliases</code>. Some people also create a separate file for their functions (<code>~/.bash_functions</code>).</p>
<p>When you source, all lines of code will be executed (including creation of aliases), so keep that in mind.</p>
<h3 id="environment-variables">Environment Variables</h3>
<p>There are various special, pre-defined environment variables, which you can use:</p>
<ul>
<li><code>$#</code> - Returns the number of parameters passed to the script</li>
<li><code>$@</code> - List of all the command line parameters passed to the script</li>
<li><code>$?</code> - Returns the exit status of the last process to run</li>
<li><code>$$</code> - The process ID (PID) of the current script</li>
<li><code>$USER</code> - The username of the user who is currently logged in</li>
<li><code>$HOSTNAME</code> - The host name of the computer you are using</li>
<li><code>$PWD</code> - The current working directory</li>
<li><code>$HOME</code> - The home folder of the current user</li>
<li><code>$SECONDS</code> - Number of seconds the script has been running for</li>
<li><code>$RANDOM</code> - Returns a random number</li>
<li><code>$LINENO</code> - Returns the current line number of the script</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>We looked at various tips and tricks that will help you use Bash interactively or for scripting.</p>
]]></content>
		</item>
		
		<item>
			<title>Creating a blog with Hugo</title>
			<link>http://localhost:1313/blog/en/posts/creating-a-blog-with-hugo/</link>
			<pubDate>Sun, 26 Mar 2023 21:58:30 +0200</pubDate>
			
			<guid>http://localhost:1313/blog/en/posts/creating-a-blog-with-hugo/</guid>
			<description><![CDATA[%!s(<nil>)]]></description>
			<content type="html"><![CDATA[<h1 id="creating-a-blog-with-hugo">Creating a blog with Hugo</h1>
<h2 id="what-is-hugo">What is Hugo?</h2>
<p><a href="https://gohugo.io/getting-started/configuration/">Hugo</a> is a vary fast framework for building websites written in Go programming language. It is also one of the most popular open-source static site generators with amazing flexibility. It allows its users to write your content in Markdown, which is simple to use and easy learn. Since it support plugins, you have access to unlimited content types, taxonomies, menus, dynamic API-driven content, and more via plugins.</p>
<p>Because of these features, it is ideal for creating a simple blog.</p>
<h2 id="preliminary-steps">Preliminary steps</h2>
<p>Before you can start with Hugo, you need to complete these two steps:</p>
<ol>
<li>Install <a href="https://gohugo.io/installation/">Hugo</a></li>
<li>Install <a href="https://git-scm.com/downloads">Git</a></li>
</ol>
<h2 id="how-to-create-a-site-with-hugo">How to create a site with Hugo</h2>
<p>Create a Hugo website:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>hugo new site my-blog
</span></span></code></pre></div><p>Go into the generated directory:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cd my-blog 
</span></span></code></pre></div><p>Initialize Git repository:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git init
</span></span></code></pre></div><p>We will use <a href="https://github.com/theNewDynamic/gohugo-theme-ananke">Anake</a> theme, which we can add into our project with the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke themes/ananke
</span></span></code></pre></div><p>You can learn more about this theme in its <a href="https://github.com/theNewDynamic/gohugo-theme-ananke#readme">documentation</a>.</p>
<p>Once Git adds the submodule, and clones the repository into your folder. Now we can update the <code>config.toml</code> file, telling Hugo that we are using Anake theme:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;theme = &#39;ananke&#39;&#34;</span> &gt;&gt; config.toml
</span></span></code></pre></div><p>At this point the website is created and read, you can check if everything went correctly by starting a server:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>hugo server
</span></span></code></pre></div><p>You can access your website in your browser at <code>http://localhost:1313</code>. To stop the server, press <code>CTRL + C</code>.</p>
<h2 id="adding-content">Adding content</h2>
<p>Our new website is amazing, but there is something missing. We need to add content. To add a new page to your website, run the command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>hugo new posts/my-first-post.md
</span></span></code></pre></div><p>This will create a file that can be found in the <code>content/posts</code> directory. If we open it in the editor of our choice, we can see inside something along lines:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-markdown" data-lang="markdown"><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span>title: &#34;My First Post&#34;
</span></span><span style="display:flex;"><span>date: 2023-01-22T04:03:20-08:00
</span></span><span style="display:flex;"><span>draft: true
</span></span><span style="display:flex;"><span>---
</span></span></code></pre></div><p>This is so-called front-matter, and it contains meta-data about our page. Notice that <code>draft</code> is equal to <code>true</code>. By default, Hugo does not publish draft content when you build the site. If you want to know more about draft, future, and expired content, click <a href="https://gohugo.io/getting-started/usage/#draft-future-and-expired-content">here</a>.</p>
<p>Let&rsquo;s add some content:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-markdown" data-lang="markdown"><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span>title: &#34;My First Post&#34;
</span></span><span style="display:flex;"><span>date: 2023-01-22T04:03:20-08:00
</span></span><span style="display:flex;"><span>draft: true
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span># My First Post
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>This is my <span style="font-weight:bold">**first**</span>  post. <span style="font-style:italic">*Welcome to my blog*</span>.
</span></span></code></pre></div><p>The <code>#</code> and asterisks are part of Markdown syntax. If you want to use Hugo, you should learn more about <a href="https://www.markdownguide.org/basic-syntax">Markdown</a>.</p>
<p>Once you&rsquo;ve completed your changes, save the file and start Hugo&rsquo;s development server:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Run this</span>
</span></span><span style="display:flex;"><span>hugo server --buildDrafts
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Or</span>
</span></span><span style="display:flex;"><span>hugo server -D
</span></span></code></pre></div><p>This will start a development server, which will keep updating the content of your webpage, while you are modifying it. Feel free to add or change the file.</p>
<h2 id="additional-configuration">Additional configuration</h2>
<p>You can specify more details by changing <code>config.toml</code>, which can be found in the root folder of your project.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-toml" data-lang="toml"><span style="display:flex;"><span><span style="color:#a6e22e">baseURL</span> = <span style="color:#e6db74">&#39;http://example.org/&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">languageCode</span> = <span style="color:#e6db74">&#39;en-us&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">title</span> = <span style="color:#e6db74">&#39;My New Hugo Site&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">theme</span> = <span style="color:#e6db74">&#39;ananke&#39;</span>
</span></span></code></pre></div><p>Change <code>baseURL</code> to your production URL, <code>languageCode</code> to your language and region, and set the title to your production site. Don&rsquo;t forget to start the production server with <code>hugo server -D</code> to see drafts.</p>
<h1 id="publishing-website">Publishing website</h1>
<p>Publishing means that Hugo will create the entire static site in the <code>public</code> directory, which you can then deploy to your web server. This folder will include HTML files, CSS style sheets, and all the necessary JavaScript. Typically, you want to exclude <a href="https://gohugo.io/getting-started/usage/#draft-future-and-expired-content">drafts, futures, and expired content</a>. The command to publish your site is a simple:</p>
<pre tabindex="0"><code>hugo
</code></pre><p>The next step is <a href="https://gohugo.io/hosting-and-deployment/">hosting and deployment</a>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>In this post we created a Hugo project, we added own page, and published the page.</p>
<h2 id="sources">Sources</h2>
<ol>
<li><a href="https://gohugo.io/hosting-and-deployment://gohugo.io/getting-started/quick-start/">Hugo Documentation</a></li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>My First Post</title>
			<link>http://localhost:1313/blog/en/posts/my-first-post/</link>
			<pubDate>Sun, 26 Mar 2023 16:34:01 +0200</pubDate>
			
			<guid>http://localhost:1313/blog/en/posts/my-first-post/</guid>
			<description><![CDATA[%!s(<nil>)]]></description>
			<content type="html"><![CDATA[<h1 id="introduction">Introduction</h1>
<p>Welcome, dear reader.</p>
<p>So, I&rsquo;ve just made my blog. I&rsquo;ve decided to use Hugo to build it, because writing Markdown is easy, and it does not get in your way.</p>
<p>I&rsquo;ve decided to start a blog for a couple of reasons:</p>
<ul>
<li>As an outlet for my creative writing</li>
<li>To improve my technical writing</li>
<li>For sharing my knowledge</li>
<li>As well as a documentation of my journey as a programmer/developer</li>
</ul>
<p>I&rsquo;ve been writing before, but those were just personal notes that I haven&rsquo;t shared with other people.</p>
]]></content>
		</item>
		
		<item>
			<title>Linking Vimwiki And Markdown Notes</title>
			<link>http://localhost:1313/blog/en/posts/first-markdown-note/</link>
			<pubDate>Sun, 26 Feb 2023 17:03:52 +0200</pubDate>
			
			<guid>http://localhost:1313/blog/en/posts/first-markdown-note/</guid>
			<description><![CDATA[%!s(<nil>)]]></description>
			<content type="html"><![CDATA[<h1 id="linking-vimwiki-and-markdown-notes">Linking Vimwiki And Markdown Notes</h1>
<p>Can I successfully link a Markdown note to a Vim Wiki one, and vice-versa?</p>
<h2 id="troubles-and-attempts-to-solve-them">Troubles And Attempts To Solve Them</h2>
<h3 id="file-and-local">file: and local:</h3>
<p>I can go to a Vimwiki note from the Markdown ones, but when I try to go in the other direction, Vim Wiki just appends <code>.wiki</code> to my Markdown note file name.</p>
<p>One possible solution is to add <code>file:</code> or <code>local:</code>, which allows user to open any file type like this</p>
<pre tabindex="0"><code class="language-wiki" data-lang="wiki">[[file:note.md|Note]]   - links become absolute paths, when converted to HTML
[[local:note.md|Note]]  - links become relative paths, when converted to HTML
</code></pre><p>But this opens a new Vim, or some other program that can open the MIME type of the given file.</p>
<h3 id="the-vim-way">The Vim Way</h3>
<p>Other &ldquo;hack&rdquo; is to type <code>gf</code> on your keyboard, while having cursor over the file path, which let&rsquo;s you successfully open the Markdown note, but you have to have your cursor over the path and other parts of the link won&rsquo;t work. This is a built-in way of opening files from Vim, and it is not limited just to Vim Wiki.</p>
<h2 id="solution">Solution</h2>
<p>These solutions were not good, so I&rsquo;ve decided to google for a better one. It turns out that more people want to  link plain text files in different formats to their Vim Wiki notes. This was possible in older versions, but when Vim Wiki authors decided to fix a bug with links that contain a dot (<code>.</code>), it got &ldquo;broken&rdquo;.</p>
<p>As of 26 March possible solutions are being <a href="https://github.com/vimwiki/vimwiki/issues/1271">discussed</a>, but I am impatient, so I&rsquo;ve decided to modify the Vim Wiki link handler, like someone suggested in the linked Github issue.. I don&rsquo;t know Vim Script, so I had to ask ChatGPT to help me, and then modified it&rsquo;s output.</p>
<p>You can add the following snippet to your <code>.vimrc</code> file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span><span style="color:#75715e">&#34; Override default vimwiki link handling</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span>! <span style="color:#a6e22e">VimwikiLinkHandler</span>(<span style="color:#a6e22e">link</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">current_file_base_path</span> = <span style="color:#a6e22e">expand</span>(<span style="color:#e6db74">&#39;%:h&#39;</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">match</span>(<span style="color:#a6e22e">a</span>:<span style="color:#a6e22e">link</span>, <span style="color:#e6db74">&#39;\.\(md\|wiki\)$&#39;</span>) != <span style="color:#ae81ff">-1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">try</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">execute</span> <span style="color:#e6db74">&#39;:edit &#39;</span> . <span style="color:#a6e22e">current_file_base_path</span> . <span style="color:#e6db74">&#39;/&#39;</span> . <span style="color:#a6e22e">a</span>:<span style="color:#a6e22e">link</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">return</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">catch</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">echo</span> <span style="color:#e6db74">&#34;Failed opening file in vim.&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">endtry</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">endif</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">return</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">endfunction</span>
</span></span></code></pre></div><p>This will open the links that have <code>.md</code> and <code>.wiki</code> in their names. If you want other formats to be supported, modify the regex to include other extensions. E.g. for Python source files, you can change the appropriate line:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">match</span>(<span style="color:#a6e22e">a</span>:<span style="color:#a6e22e">link</span>, <span style="color:#e6db74">&#39;\.\(md\|wiki\|py\)$&#39;</span>) != <span style="color:#ae81ff">-1</span>
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>In the current version of Vim Wiki, you can not link Markdown files in your notes written with the default Vim Wiki syntax (provided, you use Vim wiki syntax), because Vim Wiki automatically appends <code>.wiki</code> to the file name. In this article I&rsquo;ve described what I&rsquo;ve tried to fix it, and a possible work around that fixes the issue.</p>
]]></content>
		</item>
		
	</channel>
</rss>
